import { DomainName, GetUrlProtocolPrefix, GetUrlSource, Ip4Address, Ip6AddressLoose, UrlPath, AsString } from "src/types/index";
/**
 * **isIp4Address**`(val)`
 *
 * Type guard which checks whether the value is a valid IPv4 address.
 */
export declare const isIp4Address: <T>(val: T) => val is T & Ip4Address;
/**
 * **isIp6Address**`(val)`
 *
 * Type guard which checks whether the value is a valid IPv6 address.
 */
export declare const isIp6Address: <T>(val: T) => val is T & Ip6AddressLoose;
/**
 * **isIpAddress**`(val)`
 *
 * Type guard which checks whether the value is a valid IP address (v4 or v6).
 */
export declare const isIpAddress: <T>(val: T) => val is T & (Ip4Address | Ip6AddressLoose);
/**
 * **hasUrlPort**`(val)`
 *
 * Type guard which tests whether there is an explicit _port_ reference
 * in the passed in URL (versus implicitly using the default port of the
 * protocol)
 */
export declare const hasUrlPort: <T>(val: T) => val is T & `${GetUrlProtocolPrefix<T>}${GetUrlSource<AsString<T>>}:${number}${string}`;
/**
 * **isUrlPath**`(val)`
 *
 * Type guard which checks whether the value is a valid `UrlPath`
 */
export declare const isUrlPath: <T>(val: T) => val is T & UrlPath;
/**
 * **isDomainName**`(val)`
 *
 * Type guard which checks whether the value is a valid DNS domain name
 */
export declare const isDomainName: <T>(val: T) => val is T & DomainName<AsString<T>>;
/**
 * **isUrlSource**`(val)`
 *
 * Type guard which checks whether the value is a valid URL source
 * (aka, an IP address or a Domain Name)
 */
export declare const isUrlSource: <T>(val: T) => val is (T & DomainName<AsString<T>>) | (T & (`${number}.${number}.${number}.${number}` | `0${string}:${string}` | `1${string}:${string}` | `2${string}:${string}` | `3${string}:${string}` | `4${string}:${string}` | `5${string}:${string}` | `6${string}:${string}` | `7${string}:${string}` | `8${string}:${string}` | `9${string}:${string}` | `E${string}:${string}` | `A${string}:${string}` | `B${string}:${string}` | `C${string}:${string}` | `D${string}:${string}` | `F${string}:${string}` | `a${string}:${string}` | `b${string}:${string}` | `c${string}:${string}` | `d${string}:${string}` | `e${string}:${string}` | `f${string}:${string}`));
/**
 * **hasUrlQueryParameter**`(val,prop)`
 *
 * Tests whether the valued in has a query parameter specified by `prop`.
 */
export declare const hasUrlQueryParameter: <T extends string, P extends string>(val: T, prop: P) => boolean;
//# sourceMappingURL=network-tg.d.ts.map