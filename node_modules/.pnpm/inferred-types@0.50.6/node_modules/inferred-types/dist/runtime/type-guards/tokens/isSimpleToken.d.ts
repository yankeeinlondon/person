import { SimpleContainerToken, SimpleScalarToken, SimpleToken } from "src/types/index";
/**
 * **isSimpleToken**`(val)`
 *
 * Type guard which validates that what was passed in is a `SimpleToken`
 *
 * **Related:** `isSimpleTokenTuple`
 */
export declare const isSimpleToken: (val: unknown) => val is SimpleToken;
/**
 * **isSimpleScalarToken**`(val)`
 *
 * Type guard which validates that what was passed in is a `SimpleScalarToken`
 *
 * **Related:** `isSimpleToken()`, `isSimpleContainerToken()`
 */
export declare const isSimpleScalarToken: (val: unknown) => val is SimpleScalarToken;
/**
 * **isSimpleContainerToken**`(val)`
 *
 * Type guard which validates that what was passed in is a
 * `SimpleContainerToken`.
 *
 * **Related:** `isSimpleToken()`, `isSimpleScalarToken()`
 */
export declare const isSimpleContainerToken: (val: unknown) => val is SimpleContainerToken;
/**
 * **isSimpleTokenTuple**`(val)`
 *
 * Type guard which validates that what was passed in a tuple of `SimpleToken`'s
 *
 * **Related:** `isSimpleToken()`, `isSimpleTokenTuple()`
 */
export declare const isSimpleTokenTuple: (val: unknown) => val is SimpleToken[];
/**
 * **isSimpleScalarTokenTuple**`(val)`
 *
 * Type guard which validates that what was passed in a tuple of
 * `SimpleScalarToken`'s
 *
 * **Related:** `isSimpleToken()`, `isSimpleTokenTuple()`
 */
export declare const isSimpleScalarTokenTuple: (val: unknown) => val is SimpleScalarToken[];
/**
 * **isSimpleContainerTokenTuple**`(val)`
 *
 * Type guard which validates that what was passed in a tuple of
 * `SimpleContainerToken`'s
 *
 * **Related:** `isSimpleToken()`, `isSimpleTokenTuple()`
 */
export declare const isSimpleContainerTokenTuple: (val: unknown) => val is SimpleContainerToken[];
//# sourceMappingURL=isSimpleToken.d.ts.map