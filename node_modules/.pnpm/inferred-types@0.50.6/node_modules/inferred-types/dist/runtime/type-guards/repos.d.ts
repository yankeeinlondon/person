import { RepoSource, RepoUrls, SemanticVersion, UrlsFrom } from "src/types/index";
import { REPO_SOURCE_LOOKUP } from "src/constants/index";
/**
 * **isRepoSource**`(val)`
 *
 * Type guard which validates whether the value passed in is a
 * `RepoSource`.
 */
export declare const isRepoSource: <T>(v: T) => v is T & RepoSource;
/**
 * **isSemanticVersion**`(val,[allowPrefix]=false)`
 *
 * Type guard which validates whether the value passed in is a
 * semantic version number.
 *
 * - the optional `allowPrefix` parameter allows for a lowercase "v"
 * to be prefixed to the version so that values like `v1.0.12` and
 * `v 1.0.12` are allowed.
 * - by default the `allowPrefix` option is set to false
 */
export declare const isSemanticVersion: <T, P extends boolean>(v: T, allowPrefix?: P) => v is T & SemanticVersion<P>;
/**
 * **isRepoUrl**`(val)`
 *
 * Type guard which validates that the value passed in is a valid Repo URL
 */
export declare const isRepoUrl: <T>(val: T) => val is T & RepoUrls;
/**
 * **isBitbucketUrl**`(val)`
 *
 * Type guard which validates that the value passed in is a valid BitBucket URL
 */
export declare const isBitbucketUrl: <T>(val: T) => val is T & UrlsFrom<(typeof REPO_SOURCE_LOOKUP)["bitbucket"]>;
/**
 * **isCodeCommitUrl**`(val)`
 *
 * Type guard which validates that the value passed in is a valid AWS Code Commit URL
 */
export declare const isCodeCommitUrl: <T>(val: T) => val is T & UrlsFrom<(typeof REPO_SOURCE_LOOKUP)["codecommit"]>;
//# sourceMappingURL=repos.d.ts.map