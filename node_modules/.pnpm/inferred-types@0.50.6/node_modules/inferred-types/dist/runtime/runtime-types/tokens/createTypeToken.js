import { isAtomicToken, isSingletonToken, jsonValues } from "src/runtime/index";
const unionToken = (...els) => {
    return `<<union::[${jsonValues(els)}]>>`;
};
const singleton = (base) => {
    const handler = (...lits) => {
        return (lits.length === 0
            ? base === "string" ? `<<string>>` : `<<number>>`
            : lits.length === 1
                ? base === "string" ? `<<string::${lits[0]}>>` : `<<number::${lits[0]}>>`
                : base === "string"
                    ? `<<string::${unionToken(...lits)}>>`
                    : `<<number::${unionToken(...lits)}>>`);
    };
    return handler;
};
/**
 * **createTypeToken**`(base) => (secondary) => ...`
 *
 * A higher order function designed to creating a valid
 * `TypeToken` simple through a compound process.
 */
export const createTypeToken = (base) => {
    return (isAtomicToken(base)
        ? `<<${base}>>`
        : isSingletonToken(base)
            ? singleton(base)
            : "");
};
