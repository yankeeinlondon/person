import { SimpleContainerToken, SimpleScalarToken, SimpleToken, SimpleType } from "src/types/index";
/**
 * **simpleToken**`(token)`
 *
 * Creates a `SimpleToken` which assured to be a valid token type.
 *
 * **Related:** `simpleType()`, `simpleScalarToken()`, `simpleContainerToken()`
 */
export declare const simpleToken: <T extends SimpleToken>(token: T) => T;
/**
 * **simpleScalarToken**`(token)`
 *
 * Creates a `SimpleScalarToken` which is assured to be a valid token type.
 *
 * **Related:** `simpleType()`, `simpleToken()`, `simpleContainerToken()`
 */
export declare const simpleScalarToken: <T extends SimpleScalarToken>(token: T) => T;
/**
 * **simpleContainerToken**`(token)`
 *
 * Creates a `SimpleContainerToken` which assured to be a valid token type.
 *
 * **Related:** `simpleType()`, `simpleToken()`, `simpleScalarToken()`
 */
export declare const simpleContainerToken: <T extends SimpleContainerToken>(token: T) => T;
/**
 * **simpleScalarType**`(token)`
 *
 * Creates a valid runtime token _and_ converts it's type to the type that
 * the token represents.
 *
 * **Related:** `simpleScalarToken`
 */
export declare const simpleScalarType: <T extends SimpleScalarToken>(token: T) => SimpleType<T>;
/**
 * **simpleContainerType**`(token)`
 *
 * Creates a valid runtime token _and_ converts it's type to the type that
 * the token represents.
 *
 * **Related:** `simpleContainerToken`
 */
export declare const simpleContainerType: <T extends SimpleContainerToken>(token: T) => SimpleType<T>;
/**
 * **simpleType**`(token)`
 *
 * Creates a valid runtime token of the `SimpleToken` convention and converts
 * the _type_ to the type that the token represents.
 */
export declare const simpleType: <T extends SimpleToken>(token: T) => SimpleType<T>;
//# sourceMappingURL=simpleToken.d.ts.map