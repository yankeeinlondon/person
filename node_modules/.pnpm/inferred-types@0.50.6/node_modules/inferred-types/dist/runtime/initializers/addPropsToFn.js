/**
 * **addFnToProps**(props, [clone]) => (fn) => FnWithProps
 *
 * A higher order function which takes
 *
 * - `props` - key/value pairs to add to the a _future_ function
 * - `clone` - optionally state whether you want to use the future function's
 * type "as is" or you want to purify it's props with a clone (default is `true`)
 *
 * This is partially applied to reveal a function which takes a
 * function as input.
 */
export const addFnToProps = (props, _clone_fn) => (fn) => {
    const localFn = (...args) => fn(args);
    for (const k in props) {
        localFn[k] = props[k];
    }
    return localFn;
};
// export const narrowFn = <
//   TFn extends AnyFunction
// >(fn: TFn) => <TArgs extends AsFnMeta<TFn>["args"]>(...args: TArgs) => <R extends AsFnMeta<TFn>["returns"]>(fn(args): R) =>  ;
