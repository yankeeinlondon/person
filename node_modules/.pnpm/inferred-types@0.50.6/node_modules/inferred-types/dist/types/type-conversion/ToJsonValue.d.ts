import { As, Join, Tuple } from "src/types/index";
type AsJsonArray<T extends Tuple> = Join<[
    "[ ",
    ...T,
    " ]"
]>;
export type ToJsonValue<T> = T extends string ? `"${T}"` : T extends number ? `${T}` : T extends boolean ? `${T}` : T extends undefined ? "undefined" : T extends null ? "null" : T extends Tuple ? AsJsonArray<As<{
    [K in keyof T]: ToJsonValue<T[K]>;
}, Tuple>> : never;
export {};
//# sourceMappingURL=ToJsonValue.d.ts.map