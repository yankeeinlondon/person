/**
 * **TYPE_TRANSFORMS**
 *
 * A lookup table keyed with the available conversions `ConversionOp` and where
 * each row provides:
 *
 * 1. Reference Type
 * 2. Parameters
 * 3. Description
 */
export declare const TYPE_TRANSFORMS: {
    readonly Identity: readonly [unknown, readonly [], "a transform which returns the same value passed in"];
    readonly ToNever: readonly [unknown, readonly [], "converts all incoming types to the Never type"];
    readonly ToString: readonly [unknown, readonly [], "ensures that any incoming type is converted to a string variant of that value"];
    readonly ToBoolean: readonly [unknown, readonly [], "uses Javascript's \"truthiness\" to convert inputs to a boolean value; with functions it will use the return type"];
    readonly Trim: readonly [string, readonly [], "Trims whitespace from start and end of string"];
    readonly TrimStart: readonly [string, readonly [], "Trims whitespace from start of string"];
    readonly TrimEnd: readonly [string, readonly [], "Trims whitespace from end of string"];
    readonly Capitalize: readonly [string, readonly [], "Converts a string input to a capitalized variant"];
    readonly UnCapitalize: readonly [string, readonly [], "Converts a string input to a un-capitalized variant"];
    readonly AllCaps: readonly [string, readonly [], "Converts a string input to all uppercase characters"];
    readonly Lowercase: readonly [string, readonly [], "Converts a string input to all lowercase characters"];
    readonly ToCamelCase: readonly [string, readonly [], "Converts a string to use the camelCase naming convention"];
    readonly ToKebabCase: readonly [string, readonly [], "Converts a string to use the kebab-case naming convention"];
    readonly ToPascalCase: readonly [string, readonly [], "Converts a string to use the PascalCase naming convention"];
    readonly ToSnakeCase: readonly [string, readonly [], "Converts a string to use the snake_case naming convention"];
    readonly StripLeading: readonly [string, readonly [string], "Strips a string literal from the beginning of a string (if it exists)"];
    readonly StripTrailing: readonly [string, readonly [string], "Strips a string literal from the end of a string (if it exists)"];
    readonly EnsureLeading: readonly [string, readonly [string], "Ensures a string literal is at the beginning of a string (with no change if it already was)"];
    readonly EnsureTrailing: readonly [string, readonly [string], "Ensures a string literal is at the end of a string (with no change if it already was)"];
    readonly ToPlural: readonly [string, readonly [], "Pluralizes a word"];
    readonly Surround: readonly [string, readonly [string, string], "Surrounds a string literal with a pre and post character or set of characters"];
    readonly Prepend: readonly [string | readonly unknown[], readonly [unknown], "Takes a string or tuple and prepends a value to the start."];
    readonly Append: readonly [string | readonly unknown[], readonly [unknown], "Takes a string or tuple and appends a value to the end."];
    readonly Increment: readonly [number, readonly [], "Increments a numeric value by one"];
    readonly Decrement: readonly [number, readonly [], "Decrements a numeric value by one"];
};
//# sourceMappingURL=TypeTransforms.d.ts.map