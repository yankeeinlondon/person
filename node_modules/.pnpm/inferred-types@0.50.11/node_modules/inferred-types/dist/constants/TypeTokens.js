export const SIMPLE_DICT_VALUES = [
    "string", "number", "boolean", "unknown",
    "Opt<string>", "Opt<number>", "Opt<boolean>", "Opt<unknown>",
];
export const SIMPLE_SET_TYPES = [
    "string", "number", "boolean", "unknown",
    "Opt<string>", "Opt<number>", "Opt<boolean>", "Opt<unknown>",
];
export const SIMPLE_SCALAR_TOKENS = [
    "string",
    "number",
    `string(TOKEN)`,
    `number(TOKEN)`,
    "boolean",
    "true",
    "false",
    "null",
    "undefined",
    "unknown",
    "any",
    "never"
];
export const SIMPLE_OPT_SCALAR_TOKENS = [
    "Opt<string>",
    "Opt<number>",
    "Opt<boolean>",
    "Opt<true>",
    "Opt<false>",
    "Opt<null>",
    "Opt<undefined>",
    "Opt<unknown>",
    "Opt<any>",
    "Opt<string(TOKEN)>",
    "Opt<number(TOKEN)>",
    "Opt<undefined>",
];
export const SIMPLE_UNION_TOKENS = [
    `Union(TOKEN)`
];
export const SIMPLE_MAP_KEYS = [
    "string",
    "number",
    "Dict",
    "Dict<string, string>",
    "Dict<string, number>",
    "Dict<string, boolean>",
    "Dict<string, unknown>",
    "Dict<string, Opt<string>>",
    "Dict<string, Opt<number>>",
    "Dict<string, Opt<boolean>>",
];
export const SIMPLE_MAP_VALUES = [
    ...SIMPLE_MAP_KEYS,
    "boolean",
    "unknown",
    "undefined",
    "Dict",
    "Array",
    "Dict<string, Opt<string>>",
    "Dict<string, Opt<number>>",
    "Dict<string, Opt<boolean>>",
    "Dict<string, Opt<unknown>>",
];
export const SIMPLE_DICT_TOKENS = [
    "Dict",
    "Dict<string, string>",
    "Dict<string, number>",
    "Dict<string, boolean>",
    "Dict<string, unknown>",
    "Dict<string, Opt<string>>",
    "Dict<string, Opt<number>>",
    "Dict<string, Opt<boolean>>",
    "Dict<string, Opt<unknown>>",
    "Dict<{TOKEN: TOKEN}>",
    "Dict<{TOKEN: TOKEN, TOKEN: TOKEN}>",
];
export const SIMPLE_ARRAY_TOKENS = [
    "Array",
    "Array<string>",
    "Array<string(TOKEN)>",
    "Array<number>",
    "Array<number(TOKEN)>",
    "Array<boolean>",
    "Array<unknown>",
    `Array<Dict>`,
    `Array<Set>`,
    `Array<Map>`
];
export const SIMPLE_MAP_TOKENS = [
    "Map",
    "Map<TOKEN, TOKEN>",
    "WeakMap"
];
export const SIMPLE_SET_TOKENS = [
    "Set",
    "Set<TOKEN>"
];
export const SIMPLE_CONTAINER_TOKENS = [
    ...SIMPLE_DICT_TOKENS,
    ...SIMPLE_ARRAY_TOKENS,
    ...SIMPLE_MAP_TOKENS,
    ...SIMPLE_SET_TOKENS
];
/**
 * **SIMPLE_TOKENS**
 *
 * A list of strings literals which can be used
 * to express the type of a variable or token
 * in relatively course granularity
 */
export const SIMPLE_TOKENS = [
    ...SIMPLE_SCALAR_TOKENS,
    ...SIMPLE_OPT_SCALAR_TOKENS,
    ...SIMPLE_CONTAINER_TOKENS,
    ...SIMPLE_UNION_TOKENS,
];
/**
 * **Type Tokens** which have zero configuration elements.
 */
export const TT_Atomics = [
    "undefined",
    "null",
    "boolean",
    "true",
    "false"
];
/**
 * **Type Tokens** which have a literal variant which represents
 * the _single_ configuration of this type which is available.
 */
export const TT_Singletons = [
    "string",
    "number"
];
export const TT_Sets = [
    "string-set",
    "numeric-set",
    "union-set"
];
/**
 * **Type Tokens** which represent _functions_ (either the typical
 * variety or Generator functions).
 */
export const TT_Functions = [
    "fn",
    "gen"
];
/**
 * **Type Tokens** which _contain_ other **Type Tokens** to make up their
 * identity.
 */
export const TT_Containers = [
    "rec",
    "arr",
    "set",
    "map",
    "union",
    "obj",
    "tuple"
];
export const TT_START = "<<";
export const TT_STOP = ">>";
export const TT_SEP = "::";
/**
 * `TypeToken` names whose name provides the full definition
 * for the type.
 */
export const TYPE_TOKEN_IDENTITIES = [
    "string",
    "number",
    "numericString",
    "booleanString",
    "null",
    "undefined",
    "boolean",
    "true",
    "false",
    "space",
    "whitespace",
    "object",
    "emptyObject",
    "function",
    "array"
];
/**
 * `TypeToken` names which need a _string_ parameter to fully qualify
 */
export const TYPE_TOKEN_PARAM_STR = [
    "explicitClass",
    "startsWith",
    "endsWith",
    "ensureLeading",
    "stripLeading",
    "ensureTrailing",
    "stripTrailing",
    "camelCase",
    "pascalCase",
    "snakeCase",
    "kebabCase",
    "explicitType"
];
/**
 * `TypeToken` names which need a _CSV_ parameter to fully qualify
 */
export const TYPE_TOKEN_PARAM_CSV = [
    "stringLiteral",
    "numericLiteral",
    "objectLiteral",
    "tuple",
    "union"
];
/**
 * `TypeToken` names which need a _datetime_ parameter to fully qualify
 */
export const TYPE_TOKEN_PARAM_DATETIME = [
    "datetime",
];
/**
 * `TypeToken` names which need a _datetime_ parameter to fully qualify
 */
export const TYPE_TOKEN_PARAM_DATE = [
    "ymd",
    "monthThenDate",
    "dateThenMonth"
];
export const TYPE_TOKEN_PARAM_TIME = [
    "timeInMinutes",
    "timeInSeconds",
    "militaryTimeInMinutes",
    "militaryTimeInSeconds",
    "militaryTimeInMilliseconds",
    "civilianTimeInMinutes"
];
export const TYPE_TOKEN_ALL = [
    ...TYPE_TOKEN_IDENTITIES,
    ...TYPE_TOKEN_PARAM_CSV,
    ...TYPE_TOKEN_PARAM_DATE,
    ...TYPE_TOKEN_PARAM_DATETIME,
    ...TYPE_TOKEN_PARAM_STR,
    ...TYPE_TOKEN_PARAM_TIME
];
