import { Dictionary, If, IsScalar, Narrowable, Scalar } from "src/types/index";
/**
 * **ifScalar**(value, ifCallback, notCallback)
 *
 * A runtime utility which branches based on whether
 * the type is a `T` is a _scalar_ value or not.
 *
 *  - each branch is provided an _optional_ callback to further
 * refine the type.
 * ```ts
 * const val: number | string = 42;
 * const narrow = ifScalar(val);
 * ```
 */
export declare function ifScalar<T extends Narrowable, TIf extends Narrowable, TElse extends Narrowable>(value: T, ifCallback: <V extends Exclude<T, undefined | Dictionary | unknown[]>>(v: V) => TIf, notCallback: <V extends Exclude<T, Scalar>>(v: V) => TElse): (TIf | TElse) & If<IsScalar<T>, TIf, TElse>;
//# sourceMappingURL=ifScalar.d.ts.map