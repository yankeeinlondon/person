/**
 * Allows a value with an inner-type to be boxed into a dictionary
 * so that this type inference is preserved with the help of
 * [instantiation expressions](https://devblogs.microsoft.com/typescript/announcing-typescript-4-7-beta/#instantiation-expressions).
 *
 * NOTE: this feature is immature at best right now
 */
export function box(value) {
    const rtn = {
        __type: "box",
        value,
        unbox: ((...p) => {
            return typeof value === "function" ? value(...p) : value;
        }),
    };
    return rtn;
}
export function isBox(thing) {
    return (typeof thing === "object" && "__type" in thing && thing.__type === "box");
}
/**
 * **boxDictionaryValues**(dict)
 *
 * Runtime utility which boxes each value in a dictionary
 */
export function boxDictionaryValues(dict) {
    const keys = Object.keys(dict);
    return keys.reduce((acc, key) => ({ ...acc, [key]: box(dict[key]) }), {});
}
//TODO: it would make sense in the future to use `b.unbox` instead
// of `b.value` to keep consistent but currently value behaves more
// consistently and with somewhat stronger typing
/**
 * **unbox**(maybeBox)
 *
 * Unboxes a value if it was a box; otherwise it leaves _as is_.
 */
export function unbox(val) {
    return (isBox(val)
        ? val.value
        : val);
}
