import { isString } from "./isString";
import { AMAZON_DNS, APPLE_DNS, BEST_BUY_DNS, COSTCO_DNS, CVS_DNS, DELL_DNS, EBAY_DNS, ETSY_DNS, HM_DNS, HOME_DEPOT_DNS, KROGER_DNS, MACYS_DNS, NIKE_DNS, TARGET_DNS, WALGREENS_DNS, WALMART_DNS, WAYFAIR_DNS, WHOLE_FOODS_DNS, ZARA_DNS, } from "src/constants/index";
/**
 * type guard which validates that the `val` passed in is a valid URL
 * for **Whole Food Markets**.
 */
export const isWholeFoodsUrl = (val) => {
    return isString(val) && WHOLE_FOODS_DNS.some(i => val.startsWith(`https://${i}`));
};
/**
 * type guard which validates that the `val` passed in is a valid URL
 * for **CVS** pharmacy.
 */
export const isCvsUrl = (val) => {
    return isString(val) && CVS_DNS.some(i => val.startsWith(`https://${i}`));
};
/**
 * type guard which validates that the `val` passed in is a valid URL
 * for **Walgreens** pharmacy.
 */
export const isWalgreensUrl = (val) => {
    return isString(val) && WALGREENS_DNS.some(i => val.startsWith(`https://${i}`));
};
/**
 * type guard which validates that the `val` passed in is a valid URL
 * for **CVS** pharmacy.
 */
export const isKrogersUrl = (val) => {
    return isString(val) && KROGER_DNS.some(i => val.startsWith(`https://${i}`));
};
/**
 * type guard which validates that the `val` passed in is a valid URL
 * for **CVS** pharmacy.
 */
export const isZaraUrl = (val) => {
    return isString(val) && ZARA_DNS.some(i => val.startsWith(`https://${i}`));
};
/**
 * type guard which validates that the `val` passed in is a valid URL
 * for **H&M** retailer.
 */
export const isHmUrl = (val) => {
    return isString(val) && HM_DNS.some(i => val.startsWith(`https://${i}`));
};
/**
 * type guard which validates that the `val` passed in is a valid URL
 * for **Dell** retailer.
 */
export const isDellUrl = (val) => {
    return isString(val) && DELL_DNS.some(i => val.startsWith(`https://${i}`));
};
/**
 * type guard which validates that the `val` passed in is a valid URL
 * for **Ikea** retailer.
 */
export const isIkeaUrl = (val) => {
    return isString(val) && KROGER_DNS.some(i => val.startsWith(`https://${i}`));
};
/**
 * type guard which validates that the `val` passed in is a valid URL
 * for **Lowes** retailer.
 */
export const isLowesUrl = (val) => {
    return isString(val) && KROGER_DNS.some(i => val.startsWith(`https://${i}`));
};
/**
 * type guard which validates that the `val` passed in is a valid URL
 * for **Macy's** retailer.
 */
export const isNikeUrl = (val) => {
    return isString(val) && NIKE_DNS.some(i => val.startsWith(`https://${i}`));
};
/**
 * type guard which validates that the `val` passed in is a valid URL
 * for **Macy's** retailer.
 */
export const isWayfairUrl = (val) => {
    return isString(val) && WAYFAIR_DNS.some(i => val.startsWith(`https://${i}`));
};
/**
 * type guard which validates that the `val` passed in is a valid URL
 * for **Macy's** retailer.
 */
export const isBestBuyUrl = (val) => {
    return isString(val) && BEST_BUY_DNS.some(i => val.startsWith(`https://${i}`));
};
/**
 * type guard which validates that the `val` passed in is a valid URL
 * for **Macy's** retailer.
 */
export const isCostCoUrl = (val) => {
    return isString(val) && COSTCO_DNS.some(i => val.startsWith(`https://${i}`));
};
/**
 * type guard which validates that the `val` passed in is a valid URL
 * for **Macy's** retailer.
 */
export const isEtsyUrl = (val) => {
    return isString(val) && ETSY_DNS.some(i => val.startsWith(`https://${i}`));
};
/**
 * type guard which validates that the `val` passed in is a valid URL
 * for **Macy's** retailer.
 */
export const isTargetUrl = (val) => {
    return isString(val) && TARGET_DNS.some(i => val.startsWith(`https://${i}`));
};
/**
 * type guard which validates that the `val` passed in is a valid URL
 * for **Macy's** retailer.
 */
export const isEbayUrl = (val) => {
    return isString(val) && EBAY_DNS.some(i => val.startsWith(`https://${i}`));
};
/**
 * type guard which validates that the `val` passed in is a valid URL
 * for the **Home Depot** retailer.
 */
export const isHomeDepotUrl = (val) => {
    return isString(val) && HOME_DEPOT_DNS.some(i => val.startsWith(`https://${i}`));
};
/**
 * type guard which validates that the `val` passed in is a valid URL
 * for the **Macy's** retailer.
 */
export const isMacysUrl = (val) => {
    return isString(val) && MACYS_DNS.some(i => val.startsWith(`https://${i}`));
};
/**
 * type guard which validates that the `val` passed in is a valid URL
 * for **Apple**.
 */
export const isAppleUrl = (val) => {
    return isString(val) && APPLE_DNS.some(i => val.startsWith(`https://${i}`));
};
/**
 * type guard which validates that the `val` passed in is a valid URL
 * for **Walmart**.
 */
export const isWalmartUrl = (val) => {
    return isString(val) && WALMART_DNS.some(i => val.startsWith(`https://${i}`));
};
/**
 * type guard which validates that the `val` passed in is a valid URL
 * for **Walmart**.
 */
export const isAmazonUrl = (val) => {
    return isString(val) && AMAZON_DNS.some(i => val.startsWith(`https://${i}`));
};
