import { isString } from "../isString";
import { ACCELERATION_METRICS_LOOKUP, AREA_METRICS_LOOKUP, CURRENT_METRICS_LOOKUP, ENERGY_METRICS_LOOKUP, FREQUENCY_METRICS_LOOKUP, LUMINOSITY_METRICS_LOOKUP, MASS_METRICS_LOOKUP, POWER_METRICS_LOOKUP, PRESSURE_METRICS_LOOKUP, RESISTANCE_METRICS_LOOKUP, SPEED_METRICS_LOOKUP, TEMPERATURE_METRICS_LOOKUP, TIME_METRICS_LOOKUP, VOLTAGE_METRICS_LOOKUP, VOLUME_METRICS_LOOKUP, } from "src/constants/index";
export const isAreaUom = (val) => {
    return isString(val) && AREA_METRICS_LOOKUP.map(i => i.abbrev).includes(val);
};
export const isLuminosityUom = (val) => {
    return isString(val) && LUMINOSITY_METRICS_LOOKUP.map(i => i.abbrev).includes(val);
};
export const isResistanceUom = (val) => {
    return isString(val) && RESISTANCE_METRICS_LOOKUP.map(i => i.abbrev).includes(val);
};
export const isCurrentUom = (val) => {
    return isString(val) && CURRENT_METRICS_LOOKUP.map(i => i.abbrev).includes(val);
};
export const isVoltageUom = (val) => {
    return isString(val) && VOLTAGE_METRICS_LOOKUP.map(i => i.abbrev).includes(val);
};
export const isFrequencyUom = (val) => {
    return isString(val) && FREQUENCY_METRICS_LOOKUP.map(i => i.abbrev).includes(val);
};
export const isPowerUom = (val) => {
    return isString(val) && POWER_METRICS_LOOKUP.map(i => i.abbrev).includes(val);
};
export const isTimeUom = (val) => {
    return isString(val) && TIME_METRICS_LOOKUP.map(i => i.abbrev).includes(val);
};
export const isEnergyUom = (val) => {
    return isString(val) && ENERGY_METRICS_LOOKUP.map(i => i.abbrev).includes(val);
};
export const isPressureUom = (val) => {
    return isString(val) && PRESSURE_METRICS_LOOKUP.map(i => i.abbrev).includes(val);
};
export const isTemperatureUom = (val) => {
    return isString(val) && TEMPERATURE_METRICS_LOOKUP.map(i => i.abbrev).includes(val);
};
export const isVolumeUom = (val) => {
    return isString(val) && VOLUME_METRICS_LOOKUP.map(i => i.abbrev).includes(val);
};
export const isAccelerationUom = (val) => {
    return isString(val) && ACCELERATION_METRICS_LOOKUP.map(i => i.abbrev).includes(val);
};
export const isSpeedUom = (val) => {
    return isString(val) && SPEED_METRICS_LOOKUP.map(i => i.abbrev).includes(val);
};
export const isMassUom = (val) => {
    return isString(val) && MASS_METRICS_LOOKUP.map(i => i.abbrev).includes(val);
};
export const isDistanceUom = (val) => {
    return isString(val) && ENERGY_METRICS_LOOKUP.map(i => i.abbrev).includes(val);
};
/**
 * Type guard which validates the passed in `val` is a `Uom` (unit
 * of measure).
 */
export const isUom = (val) => {
    return isDistanceUom(val)
        || isMassUom(val)
        || isSpeedUom(val)
        || isAccelerationUom(val)
        || isVoltageUom(val)
        || isTemperatureUom(val)
        || isPressureUom(val)
        || isEnergyUom(val)
        || isTimeUom(val)
        || isPowerUom(val)
        || isFrequencyUom(val)
        || isVoltageUom(val)
        || isCurrentUom(val)
        || isLuminosityUom(val)
        || isAreaUom(val);
};
