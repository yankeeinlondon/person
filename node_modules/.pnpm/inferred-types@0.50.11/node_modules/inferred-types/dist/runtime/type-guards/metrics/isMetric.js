import { isString } from "../isString";
import { ACCELERATION_METRICS_LOOKUP, AREA_METRICS_LOOKUP, CURRENT_METRICS_LOOKUP, ENERGY_METRICS_LOOKUP, FREQUENCY_METRICS_LOOKUP, LUMINOSITY_METRICS_LOOKUP, MASS_METRICS_LOOKUP, POWER_METRICS_LOOKUP, PRESSURE_METRICS_LOOKUP, RESISTANCE_METRICS_LOOKUP, SPEED_METRICS_LOOKUP, TEMPERATURE_METRICS_LOOKUP, TIME_METRICS_LOOKUP, VOLTAGE_METRICS_LOOKUP, VOLUME_METRICS_LOOKUP, } from "src/constants/index";
export const isAreaMetric = (val) => {
    return isString(val) && AREA_METRICS_LOOKUP.map(i => i.abbrev).includes(val);
};
export const isLuminosityMetric = (val) => {
    return isString(val) && LUMINOSITY_METRICS_LOOKUP.map(i => i.abbrev).includes(val);
};
export const isResistance = (val) => {
    return isString(val) && RESISTANCE_METRICS_LOOKUP.map(i => i.abbrev).includes(val);
};
export const isCurrentMetric = (val) => {
    return isString(val) && CURRENT_METRICS_LOOKUP.map(i => i.abbrev).includes(val);
};
export const isVoltageMetric = (val) => {
    return isString(val) && VOLTAGE_METRICS_LOOKUP.map(i => i.abbrev).includes(val);
};
export const isFrequencyMetric = (val) => {
    return isString(val) && FREQUENCY_METRICS_LOOKUP.map(i => i.abbrev).includes(val);
};
export const isPowerMetric = (val) => {
    return isString(val) && POWER_METRICS_LOOKUP.map(i => i.abbrev).includes(val);
};
export const isTimeMetric = (val) => {
    return isString(val) && TIME_METRICS_LOOKUP.map(i => i.abbrev).includes(val);
};
export const isEnergyMetric = (val) => {
    return isString(val) && ENERGY_METRICS_LOOKUP.map(i => i.abbrev).includes(val);
};
export const isPressureMetric = (val) => {
    return isString(val) && PRESSURE_METRICS_LOOKUP.map(i => i.abbrev).includes(val);
};
export const isTemperatureMetric = (val) => {
    return isString(val) && TEMPERATURE_METRICS_LOOKUP.map(i => i.abbrev).includes(val);
};
export const isVolumeMetric = (val) => {
    return isString(val) && VOLUME_METRICS_LOOKUP.map(i => i.abbrev).includes(val);
};
export const isAccelerationMetric = (val) => {
    return isString(val) && ACCELERATION_METRICS_LOOKUP.map(i => i.abbrev).includes(val);
};
export const isSpeedMetric = (val) => {
    return isString(val) && SPEED_METRICS_LOOKUP.map(i => i.abbrev).includes(val);
};
export const isMassMetric = (val) => {
    return isString(val) && MASS_METRICS_LOOKUP.map(i => i.abbrev).includes(val);
};
export const isDistanceMetric = (val) => {
    return isString(val) && ENERGY_METRICS_LOOKUP.map(i => i.abbrev).includes(val);
};
/**
 * Type guard which validates the passed in `val` is a `Metric` (unit
 * of measure).
 */
export const isMetric = (val) => {
    return isDistanceMetric(val)
        || isMassMetric(val)
        || isSpeedMetric(val)
        || isAccelerationMetric(val)
        || isVoltageMetric(val)
        || isTemperatureMetric(val)
        || isPressureMetric(val)
        || isEnergyMetric(val)
        || isTimeMetric(val)
        || isPowerMetric(val)
        || isFrequencyMetric(val)
        || isVoltageMetric(val)
        || isCurrentMetric(val)
        || isLuminosityMetric(val)
        || isAreaMetric(val);
};
