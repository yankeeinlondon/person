import { isIso3166Alpha2, isIso3166Alpha3, isIso3166CountryName, isNumber, isNumberLike } from "../type-guards";
import { ISO3166_1 } from "src/constants/index";
import { uppercase } from "../literals";
const lookupAlpha2Code = (code, prop) => {
    const found = ISO3166_1.find(i => i["alpha2"] === code);
    return (found ? found[prop] : undefined);
};
const lookupAlpha3Code = (code, prop) => {
    const found = ISO3166_1.find(i => i["alpha3"] === code);
    return (found ? found[prop] : undefined);
};
const lookupName = (name, prop) => {
    const found = ISO3166_1.find(i => i["name"] === name);
    return (found ? found[prop] : undefined);
};
const lookupNumericCode = (code, prop) => {
    let num = isNumber(code) ? `${code}` : code;
    if (num.length === 1) {
        num = `00${num}`;
    }
    else if (num.length === 2) {
        num = `0${num}`;
    }
    const found = ISO3166_1.find(i => i["countryCode"] === num);
    return found ? found[prop] : undefined;
};
/**
 * **lookupCountryName**`(code)`
 *
 * Looks up a country name by either the alpha-2, alpha-3, or country code
 * as defined by the [ISO3166-1](https://en.wikipedia.org/wiki/ISO_3166-1) standard.
 *
 * - the ISO standard uses uppercase characters for Alpha2 and Alpha3 codes but
 * this utility will handle upper or lowercase
 * - it will correctly type the country name if the code passed in is a literal
 * string (and a valid code)
 *
 * **Related:** `lookupCountryAlpha2()`, `lookupCountryAlpha3()`
 */
export const lookupCountryName = (code) => {
    const uc = uppercase(code);
    return (isNumberLike(code)
        ? lookupNumericCode(code, "name")
        : isIso3166Alpha2(uc)
            ? lookupAlpha2Code(uc, "name")
            : isIso3166Alpha3(uc)
                ? lookupAlpha3Code(uc, "name")
                : undefined);
};
/**
 * Looks up the Alpha2 component of a [ISO3166-1](https://en.wikipedia.org/wiki/ISO_3166-1)
 * standard.
 */
export const lookupCountryAlpha2 = (code) => {
    const uc = uppercase(code);
    return (isNumberLike(code)
        ? lookupNumericCode(code, "alpha2")
        : isIso3166Alpha2(uc)
            ? lookupAlpha2Code(uc, "alpha2")
            : isIso3166Alpha3(uc)
                ? lookupAlpha3Code(uc, "alpha2")
                : isIso3166CountryName(code)
                    ? lookupName(code, "alpha2")
                    : undefined);
};
/**
 * Looks up the Alpha3 component of a [ISO3166-1](https://en.wikipedia.org/wiki/ISO_3166-1)
 * standard.
 */
export const lookupCountryAlpha3 = (token) => {
    const uc = uppercase(token);
    return (isNumberLike(token)
        ? lookupNumericCode(token, "alpha3")
        : isIso3166Alpha2(uc)
            ? lookupAlpha2Code(uc, "alpha3")
            : isIso3166Alpha3(uc)
                ? lookupAlpha3Code(uc, "alpha3")
                : isIso3166CountryName(token)
                    ? lookupName(token, "alpha3")
                    : undefined);
};
/**
 * Looks up the Alpha3 component of a [ISO3166-1](https://en.wikipedia.org/wiki/ISO_3166-1)
 * standard.
 */
export const lookupCountryCode = (token) => {
    const uc = uppercase(token);
    return (isNumberLike(token)
        ? lookupNumericCode(token, "countryCode")
        : isIso3166Alpha2(uc)
            ? lookupAlpha2Code(uc, "countryCode")
            : isIso3166Alpha3(uc)
                ? lookupAlpha3Code(uc, "countryCode")
                : isIso3166CountryName(token)
                    ? lookupName(token, "countryCode")
                    : undefined);
};
