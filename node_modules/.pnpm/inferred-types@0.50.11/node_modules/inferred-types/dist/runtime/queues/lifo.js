const queue = (state) => ({
    queue: state,
    size: state.length,
    isEmpty() {
        return state.length === 0;
    },
    push(...add) {
        state.push(...add);
    },
    drop(quantity) {
        state.splice(-quantity);
    },
    clear() {
        state.slice(0, 0);
    },
    drain() {
        const old_state = [...state];
        state.slice(0, 0);
        return old_state;
    },
    take(quantity) {
        const result = state.slice(-quantity);
        state.splice(-quantity);
        return result;
    },
    [Symbol.iterator]: function* () {
        for (let i = state.length - 1; i >= 0; i--) {
            yield state[i];
        }
    }
});
export const createLifoQueue = (...list) => {
    return queue([...list]);
};
