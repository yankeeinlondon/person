import { isArray } from "src/runtime/index";
const createProxy = (...initialize) => {
    const state = initialize;
    state.id = null;
    const proxy = new Proxy(state, {});
    Object.defineProperty(proxy, "id", {
        enumerable: false
    });
    return proxy;
};
/**
 * **list**([init])
 *
 * Creates a `List` container which aims to behave _exactly_ like a
 * [Javascript Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array)
 * but with the exception that when declared as a variable (aka, `let` or `var`,
 * not `const`), the variable can't be replaced with another raw array declaration.
 *
 * ```ts
 * // List<number>
 * let a = list([1,2,3]);
 * // mutate the list
 * a.push(4);
 * // NOT allowed
 * a = [4,5,6];
 * // pass into fn as a reference
 * const fn = (v: List<number>) => { v.push(4); return v; }
 * // List<number> with values [1,2,3,4]
 * fn(list([1,2,3]));
 * ```
 */
export const list = (...init) => {
    return (init.length === 1 && isArray(init[0])
        ? createProxy(...init[0])
        : createProxy(...init));
};
