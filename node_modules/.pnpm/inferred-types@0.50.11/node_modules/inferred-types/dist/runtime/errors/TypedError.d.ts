import { AnyObject, Narrowable } from "src/types/index";
export interface TypedError<TKind extends string = string, TMsg extends string = string, TContext extends AnyObject = AnyObject> extends Error {
    kind: TKind;
    msg: TMsg;
    context: TContext;
    stack?: string;
}
/**
 * **KindedApi**
 *
 * An error builder where the `kind` property has already been set.
 */
export type KindedApi<TKind extends string> = <TMsg extends string, K extends PropertyKey, V extends Narrowable, TContext extends Record<K, V>>(msg: TMsg, context?: TContext) => TypedError<TKind, TMsg, TContext>;
export type ErrorApi = {
    /**
     * A simple API surface to create an error with a `kind` and `msg` type.
     */
    kinded<TKind extends string, TMsg extends string>(kind: TKind, msg: TMsg): TypedError<TMsg, TKind>;
    /**
     * Allows expressing the `kind` of error initially
     * and then provides a function to supply specific
     * errors.
     */
    asKind<TKind extends string>(kind: TKind): KindedApi<TKind>;
};
export declare const TypedError: (<TMsg extends string>(msg: TMsg) => {
    kind: "unknown";
    msg: TMsg;
    context: {};
}) & ErrorApi;
//# sourceMappingURL=TypedError.d.ts.map