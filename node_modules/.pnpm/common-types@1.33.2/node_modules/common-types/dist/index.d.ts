/**
 * provides a friendly way to pause execution when using
 * async/await symantics
 */
declare function wait(ms: number): Promise<void>;

/**
 * A Javascript hash which allows for any set of keys
 */
interface IDictionary<T = any> {
    [key: string]: T;
}
/**
 * The class constructor for a class (or _interface_ for class)
 */
declare type ConstructorFor<TInstance, TParams extends Array<any> = any[]> = new (...params: TParams) => TInstance;
declare type INameValuePair<T = any> = INameValuePairWithId<T> | INameValuePairWithKey<T>;
interface INameValuePairWithId<T = any> {
    id: string | number;
    value: T;
}
interface INameValuePairWithKey<T = any> {
    key: string | number;
    value: T;
}
/** A function for sorting JS arrays */
declare type SortingFunction = (a: any, b: any) => number;
declare const STAGE_MAP: IDictionary<string>;
declare function STAGE(stage: string): string;
/**
 * Allows a type T to have certain properties "omitted" and thereby
 * creating a new type definition. Very useful for omitting an "id"
 * property before a record is saved, etc.
 */
declare type Omit$1<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;
declare type Callback<T, P extends Array<any> = any[]> = (...args: P) => T;
declare type AsyncCallback<T, P extends Array<any> = any[]> = (...args: P) => Promise<T>;
/**
 * **CallbackOption**
 *
 * Allows values to be typed as defined by `T[K]` but also will allow a callback function
 * which returns the same `T[K]`
 */
declare type CallbackOption<T, K extends keyof T = keyof T> = {
    [key in keyof T]: T[K] | Callback<T[K]>;
};
/**
 * For a given hash/object, this produces a type which is just the
 * names of functions contained within hash.
 *
 * @depreacted this type of abstraction tends to obfuscate rather than clarify
 */
declare type FunctionPropertyNames<T> = {
    [K in keyof T]: T[K] extends Function ? K : never;
}[keyof T];
declare type FunctionProperties<T> = Pick<T, FunctionPropertyNames<T>>;
/**
 * The properties on a given hash/object
 *
 * @depreacted this type of abstraction tends to obfuscate rather than clarify
 */
declare type NonFunctionPropertyNames<T> = {
    [K in keyof T]: T[K] extends Function ? never : K;
}[keyof T];
/**
 * A type definition which reduces the type of the T to just those non-function
 * properties.
 *
 * @depreacted this type of abstraction tends to obfuscate rather than clarify
 */
declare type NonFunctionProperties<T> = Pick<T, NonFunctionPropertyNames<T>>;

declare type sql = string;
/**
 * A string representation of the common Type/SubType classification.
 */
declare type TypeSubtype<T extends string = string, S extends string = string> = `${T}/${S}`;
/**
 * Stages of development.
 *
 * Starting with "local" which is intended for local-only environment.
 * After that each stage typically indicates a _server_ based
 * environment your code should point to.
 */
declare type DevelopmentStage<T extends string = ""> = "local" | "dev" | "prod" | "test" | "stage" & T;
declare type OptSpace = "" | " ";
/**
 * Lowercase alphabetic character
 */
declare type LowerAlpha = "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z";
/** Uppercase alphabetic character */
declare type UpperAlpha = Uppercase<LowerAlpha>;
/**
 * An alphabetic character (upper or lower)
 */
declare type Alpha = LowerAlpha | UpperAlpha;
/**
 * A [_semver_](https://semver.org/) version number
 */
declare type semver = `${number}.${number}.${number}`;

declare type integer = number;
declare type int32 = number;
declare type int64 = number;
declare type float = number;
declare type NumericCharacter = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9";
declare type Hexadecimal = NumericCharacter | "A" | "B" | "C" | "D" | "E" | "F";
declare type Digit = NumericCharacter;
declare type TwoDigit = `${Digit}${Digit}`;
declare type OptTwoDigit = Digit | TwoDigit;
declare type ThreeDigit = `${Digit}${Digit}${Digit}`;
declare type MostSignificantDigit = "0" | "1" | "2";
declare type OptThreeDigit = Digit | TwoDigit | ThreeDigit;
/**
 * Provides strong typing for an eight bit number, represented as a string.
 * First digit must be 0-3, remaining two digits can be whatever you like.
 *
 * Must be three digits. If you want to provide length flexibility use `OptEightBitBase10`
 * instead.
 */
declare type EightBitBase10 = `${MostSignificantDigit}${Digit}${Digit}`;
/**
 * Provides strong typing for an eight bit number, represented as a string.
 * First digit -- in a three digit number -- is limited to "1" or "2" others
 * are any valid digit.
 */
declare type OptEightBitBase10 = `${Exclude<MostSignificantDigit, "0">}${Digit}${Digit}` | Digit | TwoDigit;
declare type FourDigit = `${Digit}${Digit}${Digit}${Digit}`;
declare type OptFourDigit = Digit | TwoDigit | ThreeDigit | FourDigit;
/** an aspect ration represented in the normal convention of "x:y" */
declare type AspectRatioColon = `${number}:${number}`;
/** an aspect ratio represented in the CSS syntax */
declare type AspectRatioCss = `${number}${OptSpace}/${OptSpace}${number}`;
/**
 * Allows the expression of an Aspect Ratio with both the standard "x:y"
 * convention _or_ the CSS variant of "a / y".
 */
declare type AspectRatio = AspectRatioColon | AspectRatioCss;

declare type RgbObject = {
    r: number;
    g: number;
    b: number;
};
declare type RgbArray = [number, number, number];
/**
 * Defines a tuple of length 3 to represent the RGB colors but where values are
 * strings rather than numbers. This _could_ be useful because we can more strongly
 * type them as strings than as numbers and
 */
declare type RgbStrArray = [OptThreeDigit, OptThreeDigit, OptThreeDigit];
/**
 * Strong typing for a string representation of an RGB value which will look like:
 *
 * ```ts
 * const color: RgbStr = "{ r: 0, g: 0, b: 0 }";
 * const colorSomeSpace: RgbStr = "{ r:0, g:0, b:0 }";
 * const colorNoSpace: RgbStr = "{r:0,g:0,b:0}";
 * ```
 *
 * Note: due to TS limitations the `r` value MUST be hexadecimal and the broader
 * structure much match but `g` and `b` can be any string value.
 */
declare type RgbStr = `{${OptSpace}r:${OptSpace}${OptThreeDigit},${OptSpace}g:${OptSpace}${string},${OptSpace}b:${OptSpace}${string}}`;
/**
 * Provides strong but -- though not perfect -- type support for a hexadecimal
 * representation of color.
 *
 * ```ts
 * const color: HexColor = "F0A703";
 * ```
 *
 * Note: the first four digits are forced to be valid hexadecimal digits; after that we revert
 * to just a plain string due to TS limitations on complexity.
 */
declare type HexColor = `${Hexadecimal}${Hexadecimal}${Hexadecimal}${Hexadecimal}${string}`;
/**
 * A variant of the type `HexColor` which requires the Hexadecimal string to start with a
 * `#` character as is common in HTML.
 *
 * ```ts
 * const color: HtmlHexColor = "#F0A703";
 * ```
 *
 * Note: like `HexColor`, there is strong typing for first four (of six) Hexadecimal characters
 * but afterward it is typed as a simple string.
 */
declare type HtmlHexColor = `#${HexColor}`;

/** days of the week in 3-letter abbreviated form; first letter capitalized  */
declare type DayShort = "Mon" | "Tue" | "Wed" | "Thu" | "Fri" | "Sat" | "Sun";
/** days of the week in 3-letter abbreviated form; all lowercase */
declare type DayShortLower = "mon" | "tue" | "wed" | "thu" | "fri" | "sat" | "sun";
declare type Day = "Monday" | "Tuesday" | "Wednesday" | "Thursday" | "Friday" | "Saturday" | "Sunday";
declare type Month = "January" | "February" | "March" | "April" | "May" | "June" | "July" | "August" | "September" | "October" | "November" | "December";
declare type MonthShort = "Jan" | "Feb" | "Mar" | "Apr" | "May" | "Jun" | "Jul" | "Aug" | "Sep" | "Oct" | "Nov" | "Dec";
/**
 * Follows the general HTTP header standard for dates ([spec](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Date)).
 * The format will look something like `Sat, 10 Apr 2021 19:10:26 GMT` and can be generated
 * in Javascript with `new Date().toUTCString()`
 */
declare type UtcDateString = `${DayShort}, ${NumericCharacter}${string}`;
/** a string of the format: "HH:mm:ss" */
declare type timestring = string;
/**
 * an array containing hours and minutes since midnight with the optional
 * ability to add _seconds_ or even _miliseconds_
 * a useful way of representing _time of day_ that has human readable
 * elements, and is easily incorporated into a Javascript `Date`.
 *
 * example:
 * ```typescript
 * const tod: todStructured = [5,15]
 * const date = new Date();
 * date.setHours(...todStructured)
 * ```
 */
declare type todStructured = [hours, minutes] | [hours, minutes, seconds] | [hours, minutes, seconds, ms];
declare type hours = number;
declare type ms = number;
/**
 * The _time-of-day_ expressed as the number of **minutes** since midnight
 */
declare type todMinutes = minutes;
/**
 * The _time-of-day_ expressed as the number of **seconds** since midnight
 */
declare type todSeconds = seconds;
/** a string of the format: "UTC" */
declare type timezone = string;
/** string representation of datetime in format of "2016-07-17T13:29:11.652Z" */
declare type datetime = string;
/** unix epoch datetime format (aka, seconds since 1970) */
declare type epoch = number;
/** javascript datetime format (aka, milliseconds since 1970) */
declare type epochWithMilliseconds = number;
/** a numeric value representing the number of minutes */
declare type minutes = number;
/** a numeric value representing the number of seconds */
declare type seconds = number;
/**
 * A 4-digit year in the gregorian calendar (represented numerically).
 *
 * > Note: use `yearString` for same format as a string.
 */
declare type year = number;
/**
 * A 4-digit year in the gregorian calendar (represented as a string).
 *
 * > Note: due to TS limitations, can only represent years 1900-2999
 * > if you need broader support use `yearString2`
 */
declare type yearString = `${1 | 2}${NumericCharacter}${NumericCharacter}${NumericCharacter}`;
/**
 * A 4-digit year in the gregorian calendar (represented as a string).
 */
declare type yearString2 = `${number}`;
/**
 * A string representing a month as a two digit string: "01", "11", etc.
 */
declare type monthString = `${0 | 1}${NumericCharacter}`;
declare type dateAsString = `${0 | 1 | 2 | 3}${NumericCharacter}`;
/**
 * An [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) compliant
 * _date_ and _time_ string of the form: _YYYY-MM-DD**T**HH:mm:ss.sssZ_.
 * Apparently another format for year which is 6 characters long is also
 * allowed (this must be preceeded by a + or - character).
 *
 * Note: this is the format which you will get from JS with `.toISOString()`
 */
declare type Iso8601DateTime = `${string}${number}-${number}-${number}T${number}:${number}:${number}.${number}Z`;
/**
 * Type guard to determine if a given timestamp is a valid ISO 8601
 * datetime stamp.
 */
declare function isIso8601DateTime(timestamp: unknown): timestamp is Iso8601DateTime;
/**
 * a string of the format: "YYYY-MM-DD"
 */
declare type datestring = `${number}-${monthString}-${dateAsString}`;
/**
 * A **2-digit** abbreviation for the year _ending in_ "xx".
 *
 * This form of year representation is still used a decent
 * amount as a "shortcut" to the full 4-digit variation but
 * as we've crossed over into the 2000's it is far less
 * common that it used to be.
 *
 * This abbreviated form is always represented as a _string_
 * to preserve the form/structure and convey clearer meaning
 * in the first part of a century.
 */
declare type yearAbbreviated = `${NumericCharacter}${NumericCharacter}`;

/** a string blob that represents JSON structured data */
declare type json = string;
/** a string blob that represents CSV structured data */
declare type csv = string;
/** a _string_ variable which contains **Markdown** content */
declare type markdown = string;
/** a _string_ variable which contains **HTML** content */
declare type html = string;
/**
 * a _string_ which represents zipped content run through a base64
 * conversion process to a string
 */
declare type Base64Zip = string;
/** a binary value (represented as a number in JS) */
declare type binary = number;

/**
 * An IP address (of the v4 variety) which is represented in string
 * form like: `8.8.8.8`
 */
declare type ipv4 = string;
/**
 * An IP address (of the v6 variety) which is reprented in string
 * form like: `2001:0db8:85a3:0000:0000:8a2e:0370:7334`
 */
declare type ipv6 = string;
/**
 * A IP range stated in [CIDR](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing)
 * notation (e.g,. `192.168.100.0/22`)
 */
declare type CIDR = string;
/**
 * A string representation of a _subnet mask_
 * (e.g., `255.255.0.0`).
 *
 * Subnet masks provide similar functionality to CIDR
 * but predate it and still are used today.
 */
declare type subnetMask = string;

/** a number which should represent a percentage value */
declare type percentage = number;
declare type scalar = string | number | boolean;
/** a object which has been serialized to a string in JSON notation */
declare type JSONstring = string;
/** foreign key reference */
declare type fk = string;
/** primary key reference */
declare type pk = string;
/** universal resource locator */
declare type url = string;
/** universal resource indicator */
declare type uri = string;
/** an email address (alias to string) */
declare type email = string;
/** a numeric value which is represented as a string */
declare type numberAsString = string;
/**
 * A boolean value sometimes gets converted into a string
 * representation of "true" or "false"
 */
declare type BooleanAsString = "true" | "false";

/**
 * A string which represents a UUID in it's standard
 * dasherized format (aka, 32 random string values separated by
 * dashes): `xxxxxxxx-xxxx-xxxx-xxxxxxxxxxxxx`.
 *
 * If you prefer to use the non-dasherized representation,
 * you should use `uuid_unformatted` instead.
 */
declare type uuid = string;
/**
 * A string which represents a UUID but in a _non_-dasherized version
 * (aka., just 32 random string values with no separation)
 */
declare type uuid_unformatted = string;

/**
 * the most basic cookie assignment for `Set-Cookie` header
 * is just a `name=value` pairing
 */
declare type SimpleCookie = `${string}=${string}`;
/**
 * Most cookies start with the `SimpleCookie` and then
 * add some attributes.
 */
declare type AttributedCookie = `${SimpleCookie};${string}`;
/**
 * This provides basic typing support for the `Set-Cookie` header
 * variable. If you want stronger support you can use `StrictCookie`.
 */
declare type Cookie = SimpleCookie | AttributedCookie;
declare type CookieSameSite = "Strict" | "Lax" | "None; Secure";
declare type CookieExpires = `Expires=${UtcDateString}`;
declare type CookieMaxAge = `Max-Age=${number}`;
declare type CookieHttpOnly = "HttpOnly";
declare type CookieDomain = `Domain=${string}`;
declare type CookieSecure = "Secure";
declare type CookieAttribute = `SameSite=${CookieSameSite}` | CookieExpires | CookieMaxAge | CookieHttpOnly | CookieDomain | CookieSecure;
declare type CookieAttributes = CookieAttribute | `${CookieAttribute}; ${CookieAttribute}` | `${CookieAttribute}; ${CookieAttribute}; ${string}`;
/**
 * Provides typing for the `Set-Cookie` header variable. If for some
 * reason this ends up being too strict you can try the `Cookie` type
 * for a more relaxed typing.
 */
declare type StrictCookie = SimpleCookie | `${SimpleCookie}; ${CookieAttributes}`;

/**
 * Provides a string lookup of a AWS region's
 * geographic name based on it's more technical AWS region
 * name.
 *
 * For instance, `us-east-1` looks up to "N. Virginia", etc.
 */
declare enum AwsRegionName {
    "us-east-1" = "N. Virginia",
    "us-east-2" = "Ohio",
    "us-west-1" = "N. California",
    "us-west-2" = "Oregon",
    "af-south-1" = "Cape Town",
    "ap-east-1" = "Hong Kong",
    "ap-south-1" = "Mumbai",
    "ap-northeast-1" = "Tokyo",
    "ap-northeast-2" = "Seoul",
    "ap-northeast-3" = "Osaka",
    "ap-southeast-1" = "Singapore",
    "ap-southeast-2" = "Sydney",
    "ca-central-1" = "Canada (central)",
    "eu-central-1" = "Frankfurt",
    "eu-west-1" = "Ireland",
    "eu-west-2" = "London",
    "eu-west-3" = "Paris",
    "eu-north-1" = "Stockholm",
    "eu-south-1" = "Milan",
    "me-south-1" = "Bahrain",
    "sa-east-1" = "S\u0101o Paulo"
}
/**
 * Strong typing of all valid AWS regions.
 *
 * > Note: if you need a more generalized form you can try `AwsRegionPattern`
 */
declare type AwsRegion = keyof typeof AwsRegionName;
declare type Region = "us" | "us" | "ca" | "af" | "ap" | "eu" | "me" | "sa";
declare type SubRegion = "east" | "west" | "south" | "north" | "southeast" | "northeast" | "central";
/**
 * Reasonable typing of AWS regions based on known patterns.
 *
 * > Note: for explicit regions available use `AwsRegion` instead
 */
declare type AwsRegionPattern = `${Region}-${SubRegion}-${"1" | "2" | "3"}`;

/**
 * The partition in which the resource is located. A partition is a group of AWS Regions.
 * Each AWS account is scoped to one partition.
 */
declare type AwsArnPartition = "aws" | "aws-cn" | "aws-us-gov";
/**
 * A type alias for an AWS account id. Typically these accounts
 * are a 12-digit value but in the case of AWS owned things it
 * can also be "aws".
 */
declare type AwsAccountId = `${number}` | "aws";
/**
 * A AWS _resource_ id which is used as part of AWS **ARN**.
 * This type provides a set of common examples but allows
 * any string as well to provide a safety hatch.
 */
declare type AwsArnService = "lambda" | "iam" | "logs" | "states" | "sqs" | "sns" | "dynamodb" | "events";
/**
 * AWS _resources_ are found in an ARN and tied to the parent _service_
 * that precedes it in the ARN.
 *
 * Note: there are some cases where a _resource_ is not included in the ARN
 * (for instance SNS). This type, however, does not accomodate an undefined
 * value.
 */
declare type AwsArnResource = "function" | "log-group" | "user" | "group" | "policy" | "role" | "stateMachine" | "table" | "event-bus";
declare type AwsArnLambdaResource = "function";
/**
 * Describes the shape of a fully-qualified AWS **ARN** for a _Lambda function_.
 *
 * Note: _generics provides way to dial in a highly specific version_
 */
declare type AwsArnLambda<T extends string = AwsArnLambdaResource, X extends string = string, P extends string = AwsArnPartition, R extends string = AwsRegion, A extends string = AwsAccountId> = `arn:${P}:lambda:${R}:${A}:${T}:${X}`;
declare type AwsArnDynamoDbResource = "table";
declare type AwsArnDynamoDb<T extends string = AwsArnDynamoDbResource, 
/** the table name, in the case of a table */
X extends string = string, P extends string = AwsArnPartition, R extends string = AwsRegion, A extends string = AwsAccountId> = `arn:${P}:dynamodb:${R}:${A}:${T}:${X}`;
declare type AwsArnCloudwatchResource = "log-group";
/**
 * Describes the shape of a fully-qualified AWS **ARN** for a _log group_.
 */
declare type AwsArnCloudwatch<T extends string = AwsArnCloudwatchResource> = `arn:${AwsArnPartition}:logs:${AwsRegion}:${AwsAccountId}:${T}:${string}`;
/**
 * An AWS ARN for the `states` service. Typically this means a Step Function.
 *
 * If you pass in a value for `<T>` can go further and define
 * the Resource to `stateMachine` or whatever is appropriate.
 *
 * This further typing can be good but doing so makes it narrower than
 * the type `AwsArn` and so it should be seen as a tradeoff.
 */
declare type AwsArnStepFunction<T extends string = string> = `arn:${AwsArnPartition}:states:${AwsRegion}:${AwsAccountId}:${T}:${string}`;
declare type AwsIamResource = "user" | "group" | "role" | "policy";
declare type AwsIamResourceName = string;
/**
 * Describes the shape of a fully-qualified AWS **ARN** for a _IAM Role_.
 */
declare type AwsArnIam<R extends string = AwsIamResource, N extends string = AwsIamResourceName> = `arn:${AwsArnPartition}:iam::${AwsAccountId}:${R}/${N}`;
declare type AwsArnEventBridgeResource = `event-bus`;
/**
 * Describes the shape of a fully-qualified AWS **ARN** for a _EventBridge event_.
 *
 * Generics:
 *  - `X` provides a way to type the event buses name/path
 *  - `R` defaults to "event-bus" but if you can override with a differnt AWS Resource name where appropriate
 */
declare type AwsArnEventBridge<X extends string = string, R extends string = AwsArnEventBridgeResource> = `arn:${AwsArnPartition}:events:${AwsRegion}:${AwsAccountId}:${R}/${X}`;
/**
 * Describes the shape of a fully-qualified AWS **ARN** for an _SNS topic_
 * where the generic `<T>` is the _name_ of the topic.
 */
declare type AwsArnSnsTopic<T extends string = string> = `arn:${AwsArnPartition}:sns:${AwsRegion}:${AwsAccountId}:${T}`;
/**
 * An AWS ARN string
 */
declare type arn = `arn:${string}`;
/**
 * Provides good type support for a AWS ARN.
 *
 * Note: type support validates partition, service, region, and account but
 * not beyond that part. The first generic -- `<X>` -- can be used to reach
 * out to the last part of the string if you need it.
 *
 * The other generics are provided give fine grained control over what are
 * meant to be sensible defaults.
 */
declare type AwsArn<X extends string = string, P extends string = AwsArnPartition, S extends string = AwsArnService, R extends string = AwsRegion, A extends string = AwsAccountId> = `arn:${P}:${S}:${R}:${A}:${string}` | `arn:${P}:${S}::${A}:${X}`;
declare type AwsGlobalArn<X extends string = string, P extends string = AwsArnPartition, S extends string = AwsArnService, A extends string = AwsAccountId> = `arn:${P}:${S}::${A}:${string}` | `arn:${P}:${S}::${A}:${X}`;
declare type SqsArn = AwsArn<string, string, "sqs", string>;
declare type SnsArn = AwsArn<string, string, "sns", string>;

declare type Source = "ec2" | "s3" | "codestar";
declare type IAwsEventSource = `aws.${Source}` | string;
declare type IAwsEventUrls = `${Source}.amazonaws.com` | string;
declare type IAwsEventName = "PutObject" | "GetObject" | string;
interface ICloudWatchConfigEvent {
    source: IAwsEventSource;
    "detail-type": string[];
    resources: arn[];
    detail: {
        state?: "pending" | string;
        eventSource?: IAwsEventUrls[];
        eventName?: IAwsEventName[];
        requestParameters?: {
            bucketName: string[];
        };
        "changed-tag-keys": string[];
        tags: string[];
        eventDescription?: Array<{
            language: string;
            latestDescription: string;
        }>;
        userAgent?: string[];
        requestID?: string;
        eventID?: string;
        eventTime?: datetime;
        eventType?: string;
        sourceIPAddress: string;
        [key: string]: any;
    };
    enabled: boolean;
    input: Record<string, any>;
}
interface ICloudWatchEvent extends ICloudWatchConfigEvent {
    id: string;
    account: string;
    time: datetime;
    region: string;
}

/**
 * This represents a meta-data format that repos which push up an AWS Layer can export
 * as part of their main/module exports to help consumers consume their Layer.
 *
 * **Note:** if you are using the _Yeoman scaffold_ `lambda-typescript` it will automatically
 * understand this meta-data and use it during your deployments
 */
interface IAwsLayerMeta {
    /**
     * A short, descriptive name for the layer (avoiding spaces by convention)
     */
    name: string;
    /**
     * You may optionally describe what the layer is doing
     */
    description?: string;
    /**
     * Layers are dropped into the Lambda functions `/opt` filesystem but in order
     * to avoid namespace collisions it is a good idea to make sure that you offset
     * your layer by some meaningful _namespace_.
     */
    namespace: string;
    /**
     * For _layers_ which provide the dependency graph of a one or more **npm**
     * modules, the layer author is requested to list them out here.
     *
     * **Note:** this is just the top level packages, the full dependency graph
     * is not desireable and instead you want to just state the "entry points"
     * which the consumer will no longer need to require.
     */
    externals?: string[];
    /**
     * If a particular layer is being used as a "reference layer" ... meaning it
     * will be the "single source of truth" for this layer then an **ARN** should
     * be provided.
     *
     * Alternatively, if a repo is providing organisations the right
     * to publish _their version_ of this layer then the **ARN** will not be known
     * and instead must be calculated at deploy-time from the full set of meta-data
     * known at that time.
     */
    arn?: string;
    versions: IAwsLayerVersion[];
}
/**
 * An AWS Layer is versioned over time and consumers of the layer can peg their
 * dependency to any version or just the "latest" version. This interface helps
 * the consumer to understand what underlying versions of the bundled deps are
 * included in the version so as best to decide when to upgrade and also to help
 * ensure that the consumers development sandbox mimics the deployed environment
 * as possible.
 *
 * **Note:** this is _most_ useful if the layer is providing **npm** modules but
 * can also be leveraged for other versioned assets. Even in cases where the
 * asset is less structured, the versioning concept is core to Layers and
 * documenting the range of options and ideally a description of what that version
 * brings is useful to consumers.
 */
interface IAwsLayerVersion {
    version: number;
    released?: datestring;
    /**
     * A human readable description of what this release changes from the prior
     * version
     */
    description?: string;
    /**
     * Provides a full fingerprint of the underlying modules which are being handled
     * by this Layer. This _can_ be **npm** modules but doesn't need to be.
     */
    packages?: IDictionary;
}

/**
 * The `AWS::ApiGatewayV2::Model` resource updates data model for a WebSocket API. For more information,
 * see [Model Selection Expressions](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-model-selection-expressions)
 * in the API Gateway Developer Guide.
 *
 * [docs](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigatewayv2-model.html)
 *
 * Example:
 * ```json
 * {
 *  "MyModel": {
 *      "Type": "AWS::ApiGatewayV2::Model",
 *      "Properties": {
 *          "Name": "ModelName",
 *          "ApiId": {
 *              "Ref": "MyApi"
 *          },
 *          "ContentType": "application/json",
 *          "Schema": {
 *              "$schema": "http://json-schema.org/draft-04/schema#",
 *              "title": "DummySchema",
 *              "type": "object",
 *              "properties": {
 *                  "id": {
 *                      "type": "string"
 *                  }
 *              }
 *          }
 *      }
 *  }
 * }
 * ```
 */
interface IAwsApiGatewayV2Model {
    /** The API identifier. */
    ApiId: string;
    /**
     * The content-type for the model, for example, "application/json".
     */
    ContentType?: string;
    /** The description of the model. */
    Description?: string;
    /** The name of the model. */
    Name: string;
    /**
     * The schema for the model. For application/json models, this should be JSON schema draft 4 model.
     */
    Schema: JSON;
}
/**
 * The `AWS::ApiGatewayV2::Integration` resource creates an integration for an API.
 */
interface IAwsAPiGatewayV2Integration {
    Type: AwsResourceType.apiGatewayV2Integration;
    Properties: {
        /** The API identifier. */
        ApiId: string;
        /**
         * The ID of the VPC link for a private integration. Supported only for HTTP APIs.
         */
        ConnectionId?: string;
        /**
         * The type of the network connection to the integration endpoint. Specify INTERNET for connections
         * through the public routable internet or VPC_LINK for private connections between API Gateway and
         * resources in a VPC. The default value is INTERNET.
         */
        ConnectionType?: "INTERNET" | "VPC_LINK";
        /**
         * Supported only for WebSocket APIs. Specifies how to handle response payload content type conversions.
         * - `CONVERT_TO_BINARY`: Converts a response payload from a Base64-encoded string to the corresponding binary blob.
         * - `CONVERT_TO_TEXT`: Converts a response payload from a binary blob to a Base64-encoded string.
         */
        ContentHandlingStrategy?: "CONVERT_TO_BINARY" | "CONVERT_TO_TEXT";
        /**
         * Specifies the credentials required for the integration, if any. For AWS integrations, three options
         * are available.
         * - To specify an IAM Role for API Gateway to assume, use the role's Amazon Resource Name (ARN).
         * - To require that the caller's identity be passed through from the request, specify the string arn:aws:iam::*:user/*.
         * - To use resource-based permissions on supported AWS services, don't specify this parameter.
         */
        CredentialsArn?: arn;
        Description?: string;
        /**
         * Specifies the integration's HTTP method type.
         */
        IntegrationMethod?: string;
        /**
         * Supported only for HTTP API AWS_PROXY integrations. Specifies the AWS service action to invoke.
         */
        IntegrationSubtype?: string;
        /**
         * The integration type of an integration.
         * - `AWS`: for integrating the route or method request with an AWS service action, including the Lambda function-invoking action. With the Lambda function-invoking action, this is referred to as the Lambda custom integration. With any other AWS service action, this is known as AWS integration. Supported only for WebSocket APIs.
         * - `AWS_PROXY`: for integrating the route or method request with a Lambda function or other AWS service action. This integration is also referred to as a Lambda proxy integration.
         * - `HTTP`: for integrating the route or method request with an HTTP endpoint. This integration is also referred to as the HTTP custom integration. Supported only for WebSocket APIs.
         * - `HTTP_PROXY`: for integrating the route or method request with an HTTP endpoint, with the client request passed through as-is. This is also referred to as HTTP proxy integration. For HTTP API private integrations, use an HTTP_PROXY integration.
         * - `MOCK`: for integrating the route or method request with API Gateway as a "loopback" endpoint without invoking any backend. Supported only for WebSocket APIs.
         */
        IntegrationType?: "AWS" | "AWS_PROXY" | "HTTP" | "HTTP_PROXY" | "MOCK";
        /**
         * - For a Lambda integration, specify the URI of a Lambda function.
         * - For an HTTP integration, specify a fully-qualified URL.
         * - For an HTTP API private integration, specify the ARN of an Application Load Balancer listener, Network Load Balancer listener, or AWS Cloud Map service.
         */
        IntegrationUri?: string;
        /**
         * Specifies the pass-through behavior for incoming requests based on the Content-Type header in the
         * request, and the available mapping templates specified as the requestTemplates property on the
         * Integration resource. There are three valid values: WHEN_NO_MATCH, WHEN_NO_TEMPLATES, and NEVER.
         * Supported only for WebSocket APIs.
         */
        PassthroughBehavior?: "WHEN_NO_MATCH" | "WHEN_NO_TEMPLATES" | "NEVER";
        /**
         * Specifies the format of the payload sent to an integration. Required for HTTP APIs. For HTTP APIs,
         * supported values for Lambda proxy integrations are 1.0 and 2.0. For all other integrations,
         * 1.0 is the only supported value. To learn more, see
         * [Working with AWS Lambda proxy integrations for HTTP APIs](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-lambda.html).
         */
        PayloadFormatVersion?: string;
        /**
         * For WebSocket APIs, a key-value map specifying request parameters that are passed from the method
         * request to the backend. The key is an integration request parameter name and the associated value
         * is a method request parameter value or static value that must be enclosed within single quotes and
         * pre-encoded as required by the backend. The method request parameter value must match the pattern
         * of method.request.{location}.{name} , where {location} is querystring, path, or header; and {name}
         * must be a valid and unique method request parameter name.
         *
         * For HTTP API integrations with a specified integrationSubtype, request parameters are a key-value
         * map specifying parameters that are passed to AWS_PROXY integrations. You can provide static values,
         * or map request data, stage variables, or context variables that are evaluated at runtime. To learn more,
         * see [Working with AWS service integrations for HTTP APIs](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-aws-services.html).
         *
         * For HTTP API integrations without a specified integrationSubtype request parameters are a key-value
         * map specifying how to transform HTTP requests before sending them to the backend. The key should follow
         * the pattern <action>:<header|querystring|path>.<location> where action can be append, overwrite or
         * remove. For values, you can provide static values, or map request data, stage variables, or context
         * variables that are evaluated at runtime. To learn more, see
         * [Transforming API requests and responses](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-parameter-mapping.html).
         */
        RequestParameters?: JSON;
        /**
         * Represents a map of Velocity templates that are applied on the request payload based on the value of
         * the Content-Type header sent by the client. The content type value is the key in this map, and the
         * template (as a String) is the value. Supported only for WebSocket APIs.
         */
        RequestTemplates?: JSON;
        /**
         * Supported only for HTTP APIs. You use response parameters to transform the HTTP response from a backend
         * integration before returning the response to clients. Specify a key-value map from a selection key to
         * response parameters. The selection key must be a valid HTTP status code within the range of 200-599.
         * The value is of type [ResponseParameterList](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apigatewayv2-integration-responseparameterlist.html).
         * To learn more, see
         * [Transforming API requests and responses](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-parameter-mapping.html).
         */
        ResponseParameters?: JSON;
        TemplateSelectionExpression?: string;
        TimeoutInMillis?: integer;
        TlsConfig?: {
            /**
             * If you specify a server name, API Gateway uses it to verify the hostname on the
             * integration's certificate. The server name is also included in the TLS handshake
             * to support Server Name Indication (SNI) or virtual hosting.
             */
            ServerNameToVerify?: string;
        };
    };
}
/**
 * The `AWS::ApiGatewayV2::IntegrationResponse` resource updates an integration response for
 * an WebSocket API. For more information, see
 * [Set up WebSocket API Integration Responses in API Gateway](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-integration-responses.html)
 * in the API Gateway Developer Guide.
 */
interface IAwsApiGatewayV2IntegrationResponse {
    Type: AwsResourceType.apiGatewayV2IntegrationResponse;
    Properties: {
        ApiId: string;
        ContentHandlingStrategy: string;
        IntegrationId: string;
        IntegrationResponseKey: string;
        ResponseParameters: JSON;
        ResponseTemplates: JSON;
        TemplateSelectionExpression: string;
    };
}

/**
 * The `AWS::CloudWatch::Alarm` type specifies an alarm and associates it with the specified metric or
 * metric math expression.
 *
 * When this operation creates an alarm, the alarm state is immediately set to INSUFFICIENT_DATA. The alarm
 * is then evaluated and its state is set appropriately. Any actions associated with the new state are then
 * executed.
 *
 * When you update an existing alarm, its state is left unchanged, but the update completely overwrites the
 * previous configuration of the alarm.
 */
interface IAwsCloudwatchAlarm<T extends string = string> {
    Type: AwsResourceType.cloudwatchAlarm;
    Properties: {
        ActionsEnabled: Boolean;
        AlarmActions: string[];
        AlarmDescription: string;
        AlarmName: string;
        ComparisonOperator: string;
        DatapointsToAlarm: integer;
        Dimensions: any[];
        EvaluateLowSampleCountPercentile: string;
        EvaluationPeriods: integer;
        ExtendedStatistic: string;
        InsufficientDataActions: string[];
        MetricName: T;
        Metrics: any[];
        Namespace: string;
        OKActions: string[];
        Period: integer;
        Statistic: string;
        Threshold: int64;
        ThresholdMetricId: string;
        TreatMissingData: string;
        Unit: string;
    };
}
interface IAwsMetricStat {
    Metric: {
        Dimensions?: any[];
        MetricName: string;
        Namespace: string;
    };
    Period: integer;
    Stat: string;
    Unit?: "Bits" | "Bits/Second" | "Bytes" | "Bytes/Second" | "Count" | "Count/Second" | "Gigabits" | "Gigabits/Second" | "Gigabytes" | "Gigabytes/Second" | "Kilobits" | "Kilobits/Second" | "Kilobytes" | "Kilobytes/Second" | "Megabits" | "Megabits/Second" | "Megabytes" | "Megabytes/Second" | "Microseconds" | "Milliseconds" | "None" | "Percent" | "Seconds" | "Terabits" | "Terabits/Second" | "Terabytes" | "Terabytes/Second";
}
interface IAwsAnomalyMetricDataQuery {
    AccountId: string;
    Expression: string;
    Id: string;
    Label: string;
    MetricStat: IAwsMetricStat;
    Period: integer;
    ReturnData: boolean;
}
/**
 * The `AWS::CloudWatch::AnomalyDetector` type specifies an anomaly detection band for a certain metric
 * and statistic. The band represents the expected "normal" range for the metric values. Anomaly
 * detection bands can be used for visualization of a metric's expected values, and for alarms.
 */
interface IAwsCloudwatchAnomalyDetector<T extends string = string> {
    Type: AwsResourceType.cloudwatchAnomalyDetector;
    Properties: {
        Configuration: {
            /**
             * Specifies an array of time ranges to exclude from use when the anomaly detection model
             * is trained and updated. Use this to make sure that events that could cause unusual
             * values for the metric, such as deployments, aren't used when CloudWatch creates or
             * updates the model.
             */
            ExcludedTimeRanges?: {
                /**
                 * The end time of the range to exclude. The format is yyyy-MM-dd'T'HH:mm:ss. For example, 2019-07-01T23:59:59.
                 */
                EndTime: string;
                /** The start time of the range to exclude. The format is yyyy-MM-dd'T'HH:mm:ss. For example, 2019-07-01T23:59:59. */
                StartTime: string;
            }[];
            /**
             * The time zone to use for the metric. This is useful to enable the model to automatically
             * account for daylight savings time changes if the metric is sensitive to such time changes.
             */
            MetricTimeZone?: string;
        };
        Dimensions: {
            /** The name of the dimension. */
            Name: String;
            /**
             * The value of the dimension. Dimension values must contain only ASCII characters and must
             * include at least one non-whitespace character.
             */
            Value: String;
        }[];
        MetricMathAnomalyDetector: {
            MetricDataQueries: IAwsAnomalyMetricDataQuery[];
        };
        MetricName: T;
        Namespace: string;
        SingleMetricAnomalyDetector: any;
        Stat: string;
    };
}

interface IAwsCognitoIdentityProvider {
    /** The client ID for the Amazon Cognito user pool. */
    ClientId?: string;
    /**
     * The provider name for an Amazon Cognito user pool.
     *
     * For example:
     * - `cognito-idp.us-east-2.amazonaws.com/us-east-2_123456789.`
     */
    ProviderName?: string;
    /**
     * TRUE if server-side token validation is enabled for the identity provider’s token.
     *
     * After you set the ServerSideTokenCheck to TRUE for an identity pool, that identity
     * pool checks with the integrated user pools to make sure the user has not been globally
     * signed out or deleted before the identity pool provides an OIDC token or AWS
     * credentials for the user.
     */
    ServerSideTokenCheck?: boolean;
}
/** Creates an Amazon Cognito identity pool. */
interface IAwsCognitoIdentityPool<T extends string = string> {
    Type: AwsResourceType.cognitoIdentityPool;
    Properties: {
        AllowClassFlow?: boolean;
        AllowUnauthenticatedIdentities: boolean;
        CognitoEvents?: JSON;
        /** represents the Amazon Cognito user pool(s) and their client ID */
        CognitoIdentityProviders?: IAwsCognitoIdentityPool[];
        CognitoStreams?: {
            RoleArn?: arn;
            StreamingStatus?: string;
            StreamName?: string;
        };
        /**
         * The "domain" Amazon Cognito uses when referencing your users. This name acts as a
         * placeholder that allows your backend and the Amazon Cognito service to communicate
         * about the developer provider. For the DeveloperProviderName, you can use letters
         * and periods (.), underscores (_), and dashes (-).
         */
        DeveloperProviderName?: string;
        /** The name of your Amazon Cognito identity pool. */
        IdentityPoolName?: T;
        OpenIdConnectProviderARNs?: arn[];
        /**
         * `PushSync` is a property of the AWS::Cognito::IdentityPool resource that defines
         * the configuration options to be applied to an Amazon Cognito identity pool.
         */
        PushSync?: {
            ApplicationArns?: arn[];
            RoleArn?: arn;
        };
        /** The Amazon Resource Names (ARNs) of the Security Assertion Markup Language (SAML) providers. */
        SamlProviderARNs?: arn[];
        SupportedLoginProviders?: JSON;
    };
}
interface IAwsCognitoRecoveryOption {
    /** Specifies the recovery method for a user. */
    Name?: "admin_only" | "verified_email" | "verified_phone_number";
    /** A positive integer specifying priority of a method with 1 being the highest priority. */
    Priority?: integer;
}
/** The configuration for `AdminCreateUser` requests. */
interface IAwsCognitoAdminCreateUser {
    /**
     * Set to True if only the administrator is allowed to create user profiles.
     * Set to False if users can sign themselves up via an app.
     */
    AllowAdminCreateUserOnly?: boolean;
    /** The message template to be used for the welcome message to new users. */
    InviteMessageTemplate?: any;
    /**
     * The user account expiration limit, in days, after which the account is no longer usable.
     * To reset the account after that time limit, you must call AdminCreateUser again, specifying
     * "RESEND" for the MessageAction parameter. The default value for this parameter is 7.
     */
    UnusedAccountValidityDays?: integer;
}
declare type CognitoAliasAttributes = "phone_number" | "email" | "preferred_username";
declare type CognitoAutoVerfiedAttributes = "phone_number" | "email";
declare type CognitoEmailSendingAccount = "COGNITO_DEFAULT" | "DEVELOPER";
declare type CognitoMfaSetting = "SMS_MFA" | "SOFTWARE_TOKEN_MFA";
interface IAwsCognitoEmailConfig {
    /**
     * The set of configuration rules that can be applied to emails sent using Amazon SES.
     * A configuration set is applied to an email by including a reference to the configuration
     * set in the headers of the email. Once applied, all of the rules in that configuration
     * set are applied to the email.
     *
     * Configuration sets can be used to apply the following types of rules to emails:
     *
     * - **Event publishing** – Amazon SES can track the number of send, delivery, open, click,
     * bounce, and complaint events for each email sent. Use event publishing to send information
     * about these events to other AWS services such as SNS and CloudWatch.
     * - **IP pool management** - When leasing dedicated IP addresses with Amazon SES, you can
     * create groups of IP addresses, called dedicated IP pools. You can then associate the
     * dedicated IP pools with configuration sets.
     */
    ConfigurationSet?: string;
    /**
     * Specifies whether Amazon Cognito emails your users by using its built-in email functionality
     * or your Amazon SES email configuration.
     */
    EmailSendingAccount?: CognitoEmailSendingAccount;
    /**
     * Identifies either the sender's email address or the sender's name with their email address.
     *
     * Examples:
     * - testuser@example.com
     * - Test User &lt;testuser@example.com&gt;
     */
    From?: string;
    /** The destination to which the receiver of the email should reply to. */
    ReplyToEmailAddress?: string;
    /**
     * The Amazon Resource Name (ARN) of a verified email address in Amazon SES. This email address
     * is used in one of the following ways, depending on the value that you specify for the EmailSendingAccount parameter:
     *
     * - If you specify COGNITO_DEFAULT, Amazon Cognito uses this address as the custom FROM address when it emails your users by using its built-in email account.
     * - If you specify DEVELOPER, Amazon Cognito emails your users with this address by calling Amazon SES on your behalf.
     */
    SourceArn: arn;
}
/** Specifies the configuration for AWS Lambda triggers. */
interface IAwsCognitoLambdaConfig {
    /** Creates an authentication challenge. */
    CreateAuthChallenge?: string;
    /** Not currently supported by AWS CloudFormation. */
    CustomEmailSender?: {
        /** Not currently supported by AWS CloudFormation. */
        LambdaArn?: arn;
        /** Not currently supported by AWS CloudFormation. */
        LambdaVersion?: never;
    };
    /** A custom Message AWS Lambda trigger. */
    CustomMessage?: arn;
    /** Not currently supported by AWS CloudFormation. */
    CustomSMSSender?: {
        /** Not currently supported by AWS CloudFormation. */
        LambdaArn?: arn;
        /** Not currently supported by AWS CloudFormation. */
        LambdaVersion?: never;
    };
    /** Defines the authentication challenge. */
    DefineAuthChallenge?: string;
    /** Not currently supported by AWS CloudFormation. */
    KMSKeyID?: string;
    /** A post-authentication AWS Lambda trigger. */
    PostAuthentication?: arn;
    /** A post-confirmation AWS Lambda trigger. */
    PostConfirmation?: arn;
    /** A pre-authentication AWS Lambda trigger. */
    PreAuthentication?: arn;
    /** A pre-registration AWS Lambda trigger. */
    PreSignUp?: arn;
    /** A Lambda trigger that is invoked before token generation. */
    PreTokenGeneration?: arn;
    /** The user migration Lambda config type. */
    UserMigration?: arn;
    /** Verifies the authentication challenge response. */
    VerifyAuthChallengeRespose?: arn;
}
/** The password policy type. */
interface IAwsCognitoPasswordPolicy {
    MinimumLength?: integer;
    RequireLowercase?: boolean;
    RequireNumbers?: boolean;
    RequireSymbols?: boolean;
    RequireUppercase?: boolean;
    TemporaryPasswordValidityDays?: integer;
}
/** Contains information about the schema attribute. */
interface IAwsCognitoUserPoolSchemaAttribute {
    /**  */
    AttributeDataType?: "Boolean" | "DateTime" | "Number" | "String";
    /**
     * Specifies whether the attribute type is developer only. This attribute can only be
     * modified by an administrator. Users will not be able to modify this attribute
     * using their access token.
     */
    DeveloperOnlyAttribute?: boolean;
    /**
     * Specifies whether the value of the attribute can be changed.
     */
    Mutable?: boolean;
    /** A schema attribute of the name type. */
    Name?: string;
    /**Specifies the constraints for an attribute of the number type. */
    NumberAttributeConstraints?: {
        MaxValue?: string;
        MinValue?: string;
    };
    /**
     * Specifies whether a user pool attribute is required. If the attribute is required
     * and the user does not provide a value, registration or sign-in will fail.
     */
    Required?: boolean;
    StringAttributeConstraints?: {
        MaxValue?: string;
        MinValue?: string;
    };
}
/**
 * The `AWS::Cognito::UserPool` resource creates an Amazon Cognito user pool.
 * For more information on working with Amazon Cognito user pools,
 * see [Amazon Cognito User Pools](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools.html)
 * and [CreateUserPool](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_CreateUserPool.html).
 */
interface IAwsCognitoUserPool<T extends string = string> {
    Type: AwsResourceType.cognitoUserPool;
    Properties: {
        AccountRecoverySetting: {
            RecoverMechanims?: IAwsCognitoRecoveryOption[];
        };
        AdminCreateUserConfig?: IAwsCognitoAdminCreateUser;
        /** Attributes supported as an alias for this user pool. */
        AliasAttributes?: CognitoAliasAttributes[];
        /** The attributes to be auto-verified.  */
        AutoVerifiedAttributes?: CognitoAutoVerfiedAttributes[];
        /** The device configuration. */
        DeviceConfiguration?: {
            /** Indicates whether a challenge is required on a new device. Only applicable to a new device. */
            ChallengeRequiredOnNewDevice?: boolean;
            /** If true, a device is only remembered on user prompt. */
            DeviceOnlyRememberedOnUserPrompt?: boolean;
        };
        EmailConfiguration?: IAwsCognitoEmailConfig;
        /**
         * A string representing the email verification message.
         * EmailVerificationMessage is allowed only if EmailSendingAccount is DEVELOPER.
         */
        EmailVerificationMessage?: string;
        /**
         * A string representing the email verification subject.
         * EmailVerificationSubject is allowed only if EmailSendingAccount is DEVELOPER.
         */
        EmailVerificationSubject?: string;
        /**
         * Enables MFA on a specified user pool. To disable all MFAs after it has been enabled, set MfaConfiguration to “OFF”
         * and remove EnabledMfas. MFAs can only be all disabled if MfaConfiguration is OFF. Once SMS_MFA is enabled, SMS_MFA
         * can only be disabled by setting MfaConfiguration to “OFF”.
         *
         * Values can be:
         *
         * - **SMS_MFA** -  Enables SMS MFA for the user pool. SMS_MFA can only be enabled if SMS configuration is provided.
         * - **SOFTWARE_TOKEN_MFA** - Enables software token MFA for the user pool.
         */
        EnabledMfas?: CognitoMfaSetting[];
        /**
         * The Lambda trigger configuration information for the new user pool.
         */
        LambdaConfig?: IAwsCognitoLambdaConfig;
        MfaConfiguration?: "ON" | "OFF" | "OPTIONAL";
        /** The policy associated with a user pool. */
        Policiies?: {
            PasswordPolicy?: IAwsCognitoPasswordPolicy;
        };
        /**
         * The schema attributes for the new user pool. These attributes can be standard or custom attributes.
         *
         * Note: _during a user pool update, you can add new schema attributes but you cannot modify or delete an
         * existing schema attribute._
         */
        Schema: IAwsCognitoUserPoolSchemaAttribute[];
        SmsAuthenticationMessage: string;
        SmsConfiguration: any;
        SmsVerificationMessage: string;
        UsernameAttributes: string[];
        UsernameConfiguration: {
            CaseSensitive?: boolean;
        };
        UserPoolAddOns: {
            AdvancedSecurityMode?: "AUDIT" | "ENFORCED" | "OFF";
            [key: string]: any;
        };
        UserPoolName: T;
        UserPoolTags: JSON;
        VerificationMessageTemplate: {
            DefaultEmailOption?: "CONFIRM_WITH_CODE" | "CONFIRM_WITH_LINK";
            /**
             * The email message template. EmailMessage is allowed only if EmailSendingAccount is DEVELOPER.
             */
            EmailMessage?: string;
            /**
             * The email message template for sending a confirmation link to the user. EmailMessageByLink is
             * allowed only if EmailSendingAccount is DEVELOPER.
             */
            EmailMessageByLink?: string;
            /**
             * The subject line for the email message template. EmailSubject is allowed only if
             * EmailSendingAccount is DEVELOPER.
             */
            EmailSubject?: string;
            /**
             * The subject line for the email message template for sending a confirmation link to the user.
             * EmailSubjectByLink is allowed only EmailSendingAccount is DEVELOPER.
             */
            EmailSubjectByLink?: string;
            /** The SMS message template. */
            SmsMessage?: string;
        };
    };
}

declare type DynamoDbAttributeType = "S" | "N" | "BOOL" | 0 | 1 | "B" | "SS" | "NS" | "BS";
interface DynamoTableProjection {
    NonKeyAtttributes: string[];
    ProjectionType?: "KEYS_ONLY" | " INCLUDE" | "ALL";
}
/**
 * A tuple with the hash/pk and then the range key/sk
 */
declare type DynamoKeySchema = [hash: string, range: string];
interface DynamoLSI {
    IndexName: string;
    KeySchema: DynamoKeySchema;
    Projection: DynamoTableProjection;
}
/**
 * Throughput for the specified table, which consists of values for ReadCapacityUnits and WriteCapacityUnits.
 * For more information about the contents of a provisioned throughput structure, see
 * [Amazon DynamoDB Table ProvisionedThroughput](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-dynamodb-provisionedthroughput.html).
 *
 * If you set BillingMode as PROVISIONED, you must specify this property. If you set BillingMode as PAY_PER_REQUEST,
 * you cannot specify this property.
 */
interface IDynamoProvisionedThroughput {
    ReadCapacityUnits: number;
    WriteCapacityUnits: number;
}
interface DynamoGSI {
    ContributorInsightsSpecification?: {
        Enabled: boolean;
    };
    IndexName: string;
    KeySchema: DynamoKeySchema;
    Projection: DynamoTableProjection;
    /**
     * Throughput for the specified table, which consists of values for ReadCapacityUnits and WriteCapacityUnits.
     * For more information about the contents of a provisioned throughput structure, see
     * [Amazon DynamoDB Table ProvisionedThroughput](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-dynamodb-provisionedthroughput.html).
     *
     * If you set BillingMode as PROVISIONED, you must specify this property. If you set BillingMode as PAY_PER_REQUEST,
     * you cannot specify this property.
     */
    ProvisionedThroughput?: IDynamoProvisionedThroughput;
}
declare type DynamoBillingMode = "PROVISIONED" | "PAY_PER_REQUEST";
/**
 * a DynamoDB **Table** resource definition
 *
 * - [Cloudformation Docs](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-dynamodb-table.html)
 */
interface IDynamoDbTableResource<T extends string = string> {
    Type: "AWS::DynamoDB::Table";
    Properties: {
        /**
         * The name of the table.
         *
         * This typically would consist of a common name `T` and then some additional
         * text at the end to
         */
        TableName: `${T}${string}`;
        TableClass?: "STANDARD" | "STANDARD_INFREQUENT_ACCESS";
        AttributeDefinitions: Array<{
            AttributeName: string;
            AttributeType: DynamoDbAttributeType;
        }>;
        /**
         * Specifies the attributes that make up the primary key for the table.
         *
         * The attributes in the KeySchema property must also be defined in the
         * `AttributeDefinitions` property.
         */
        KeySchema: Array<{
            AttributeName: string;
            KeyType: "HASH" | "RANGE";
        }>;
        ProvisionedThroughput?: IDynamoProvisionedThroughput;
        /**
         * Specify how you are charged for read and write throughput and how you manage capacity.
         *
         * [ [docs](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-dynamodb-table.html#cfn-dynamodb-table-billingmode) ]
         */
        BillingMode?: DynamoBillingMode;
        /**
         * Global secondary indexes to be created on the table. You can create up to
         * 20 global secondary indexes.
         */
        GlobalSecondaryIndexes?: DynamoGSI[];
        LocalSecondaryIndexes?: DynamoLSI[];
        Tags?: IAwsResourceTag[];
        /**
         * Represents the DynamoDB Streams configuration for a table in DynamoDB.
         *
         * [ [docs](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-dynamodb-streamspecification.html) ]
         */
        StreamSpecification?: "KEYS_ONLY" | "NEW_IMAGE" | "OLD_IMAGE" | "NEW_AND_OLD_IMAGES";
        /** The settings used to enable or disable CloudWatch Contributor Insights. */
        ContributorInsightsSpecification?: {
            Enabled: boolean;
        };
        /** The Kinesis Data Streams configuration for the specified table. */
        KinesisStreamSpecification?: arn;
        PointInTimeRecoverySpecification?: {
            PointInTimeRecoveryEnabled: boolean;
        };
        SSESpecification?: {
            KMSMasterKeyId?: string;
            SSEEnabled: boolean;
            SSEType?: "KMS";
        };
        /** Represents the settings used to enable or disable Time to Live (TTL) for the specified table. */
        TimeToLiveSpecification?: {
            AttributeName: string;
            Enabled: boolean;
        };
    };
}

/** The custom parameters to be used when the target is an AWS Batch job. */
interface IAwsEventBatchParameters {
    ArrayProperties?: any;
    JobDefinition: string;
    JobName: string;
    RetryStrategy?: any;
}
interface IAwsEventDeadLetterConfig {
    /** The ARN of the SQS queue specified as the target for the dead-letter queue. */
    Arn: SqsArn;
}
/**
 * These are custom parameter to be used when the target is an API Gateway REST APIs
 * or EventBridge ApiDestinations. In the latter case, these are merged with any
 * InvocationParameters specified on the Connection, with any values from the
 * Connection taking precedence.
 */
interface IAwsEventHttpParameters {
    HeaderParameters?: Record<string, any>;
    PathParameterValues?: Record<string, any>;
    QueryStringParameters?: Record<string, any>;
}
/**
 * Contains the parameters needed for you to provide custom input to a target based on
 * one or more pieces of data extracted from the event.
 */
interface IAwsEventInputTransformer {
    /**
     * Map of JSON paths to be extracted from the event. You can then insert these in
     * the template in InputTemplate to produce the output you want to be sent to the target.
     *
     * `InputPathsMap` is an array of key-value pairs, where each value is a valid JSON path.
     * You can have as many as 100 key-value pairs. You must use JSON dot notation, not bracket
     * notation.
     *
     * The keys cannot start with "AWS."
     *
     * Example:
     * ```json
     * {
     *   "InputPathsMap": {"instance": "$.detail.instance","status": "$.detail.status"}
     * }
     * ```
     */
    InputPathsMap?: Record<string, any>;
    /**
     * Input template where you specify placeholders that will be filled with the values of
     * the keys from `InputPathsMap` to customize the data sent to the target. Enclose each
     * `InputPathsMaps` value in brackets: <value> The InputTemplate must be valid JSON.
     *
     * Example:
     * ```json
     * {
     *  "InputTemplate": "<instance> is in state <status>"
     * }
     * ```
     */
    InputTemplate: string;
}
interface IAwsEventRuleTarget {
    Arn: arn;
    BatchParameters?: IAwsEventBatchParameters;
    DeadLetterConfig?: IAwsEventDeadLetterConfig;
    /** The custom parameters to be used when the target is an Amazon ECS task. */
    EcsParameters?: any;
    /**
     * These are custom parameter to be used when the target is an API Gateway REST APIs
     * or EventBridge ApiDestinations. In the latter case, these are merged with any
     * InvocationParameters specified on the Connection, with any values from the
     * Connection taking precedence.
     */
    HttpParameters?: IAwsEventHttpParameters;
    Id: string;
    Input?: string;
    InputPath?: string;
    /**
     * Contains the parameters needed for you to provide custom input to a target based on
     * one or more pieces of data extracted from the event.
     */
    InputTransformer?: IAwsEventInputTransformer;
    KinesisParameters?: any;
    RedshiftDataParameters?: any;
    /**
     * A `RetryPolicy` object that includes information about the retry policy settings.
     */
    RetryPolicy?: {
        /** The maximum amount of time, in seconds, to continue to make retry attempts. */
        MaximumEventAgeInSeconds: seconds;
        /**
         * The maximum number of retry attempts to make before the request fails. Retry
         * attempts continue until either the maximum number of attempts is made or until
         * the duration of the MaximumEventAgeInSeconds is met.
         */
        MaximumRetryAttempts: integer;
    };
    /**
     * The Amazon Resource Name (ARN) of the IAM role to be used for this target when the
     * rule is triggered. If one rule triggers multiple targets, you can use a different
     * IAM role for each target.
     */
    RoleArn?: arn;
    RunCommandParameters?: {
        /**
         * Currently, we support including only one RunCommandTarget block, which specifies
         * either an array of InstanceIds or a tag.
         */
        RunCommandTargets: {
            Key: string;
            Values: string[];
        }[];
    };
    /**
     * Contains the message group ID to use when the target is a FIFO queue.
     * If you specify an SQS FIFO queue as a target, the queue must have content-based
     * deduplication enabled.
     */
    SqsParameters?: {
        /** The FIFO message group ID to use as the target. */
        MessageGroupId: string;
    };
}
interface IAwsEventBus<T extends string = string> {
    Type: AwsResourceType.eventBridgeEventBus;
    Properties: {
        /**
         * The name of the new event bus.
         *
         * Note: _event bus names cannot contain the / character. You can't use the
         * name default for a custom event bus, as this name is already used for your account's default event bus._
         */
        Name: T;
        /**
         * If you are creating a partner event bus, this specifies the partner event source
         * that the new event bus will be matched with.
         */
        EventSourceName?: string;
    };
}
interface IAwsEventRule<T extends string = string> {
    Type: AwsResourceType.eventBridgeRule;
    Properties: {
        /** The description of the rule */
        Description?: string;
        /** The name or ARN of the event bus associated with the rule. If you omit this, the default event bus is used. */
        EventBusName?: string;
        /**
         * The event pattern of the rule. For more information, see
         * [Events and Event Patterns](https://docs.aws.amazon.com/eventbridge/latest/userguide/eventbridge-and-event-patterns.html)
         * in the Amazon EventBridge User Guide.
         */
        EventPattern: any;
        /** The name of the rule */
        Name: T;
        /**
         * The Amazon Resource Name (ARN) of the role that is used for target invocation.
         *
         * If you're setting an event bus in another account as the target and that account
         * granted permission to your account through an organization instead of directly by
         * the account ID, you must specify a RoleArn with proper permissions in the Target
         * structure, instead of here in this parameter.
         */
        RoleArn?: arn;
        /**
         * The scheduling expression.
         *
         * Examples:
         * - "cron(0 20 * * ? *)"
         * - "rate(5 minutes)"
         *
         * For more information, see [Creating an Amazon EventBridge rule that runs on a schedule](https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-create-rule-schedule.html).
         */
        ScheduleExpression?: string;
        /** The state of the rule. */
        State?: string;
        /**
         * Adds the specified targets to the specified rule, or updates the targets if they are already
         * associated with the rule. Targets are the resources that are invoked when a rule is triggered.
         *
         * To be able to make API calls against the resources that you own, Amazon EventBridge needs
         * the appropriate permissions. For AWS Lambda and Amazon SNS resources, EventBridge relies on
         * resource-based policies. For EC2 instances, Kinesis Data Streams, AWS Step Functions state
         * machines and API Gateway REST APIs, EventBridge relies on IAM roles that you specify in the
         * RoleARN argument in PutTargets. For more information, see
         * [Authentication and Access Control in the Amazon EventBridge User Guide](https://docs.aws.amazon.com/eventbridge/latest/userguide/auth-and-access-control-eventbridge.html).
         */
        Targets?: IAwsEventRuleTarget[];
    };
}
/**
 * Use the AWS::EventSchemas::Schema resource to specify an event schema.
 *
 * [docs](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-eventschemas-schema.html)
 */
interface IAwsEventSchema<T extends string = string> {
    Type: AwsResourceType.eventBridgeSchema;
    Properties: {
        Content: string;
        Description?: string;
        RegistryName: string;
        SchemaName?: T;
        Tags?: IAwsResourceTag[];
        Type: string;
    };
}

interface IAwsIamRole<T extends string = string> {
    Type: AwsResourceType.iamRole;
    Properties: {
        /**
         * The trust policy that is associated with this role. Trust policies define which entities can assume the
         * role. You can associate only one trust policy with a role. For an example of a policy that can be used
         * to assume a role, see [Template Examples](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html#aws-resource-iam-role--examples).
         * For more information about the elements that you can use in an IAM policy, see
         * [IAM Policy Elements Reference](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements.html) in the IAM User Guide.
         */
        AssumeRolePolicyDocument: JSON;
        /** A description of the role that you provide. */
        Description?: string;
        /**
         * A list of Amazon Resource Names (ARNs) of the IAM managed policies that you want to attach to the role.
         */
        ManagedPolicyArns?: arn[];
        /**
         * The maximum session duration (in seconds) that you want to set for the specified role. If you do not
         * specify a value for this setting, the default maximum of one hour is applied. This setting can have
         * a value from 1 hour to 12 hours.
         */
        MaxSessionDuration?: seconds;
        /**
         * The path to the role. For more information about paths, see
         * [IAM Identifiers](https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html) in the
         * IAM User Guide.
         *
         * This parameter is optional. If it is not included, it defaults to a slash (/).
         *
         * This parameter allows (through its regex pattern) a string of characters consisting of either a
         * forward slash (/) by itself or a string that must begin and end with forward slashes. In addition,
         * it can contain any ASCII character from the ! (\u0021) through the DEL character (\u007F), including
         * most punctuation characters, digits, and upper and lowercased letters.
         */
        Path?: string;
        /**
         * The ARN of the policy used to set the permissions boundary for the role.
         *
         * For more information about permissions boundaries,
         * see [Permissions boundaries for IAM identities](https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html)
         * in the IAM User Guide.
         */
        PermissionsBoundary?: arn;
        /**
         * Adds or updates an inline policy document that is embedded in the specified IAM role.
         */
        Policies?: any;
        /**
         * A name for the IAM role, up to 64 characters in length. For valid values, see the
         * `RoleName` parameter for the [CreateRole](https://docs.aws.amazon.com/IAM/latest/APIReference/API_CreateRole.html)
         * action in the IAM User Guide.
         *
         * - If you don't specify a name, AWS CloudFormation generates a unique physical ID and uses that ID for the role name.
         * - If you specify a name, you must specify the CAPABILITY_NAMED_IAM value to acknowledge your template's capabilities.
         */
        RoleName?: T;
        /** A list of tags that are attached to the role.  */
        Tags?: IAwsResourceTag[];
    };
}

interface IAwsS3BucketDestination {
    /**
     * The account ID that owns the destination S3 bucket. If no account ID is provided,
     * the owner is not validated before exporting data. It is strongly recommended that
     * this be set.
     */
    BucketAccountId?: string;
    /** The Amazon Resource Name (ARN) of the bucket to which data is exported. */
    BucketArn: arn;
    /** Specifies the file format used when exporting data to Amazon S3. */
    Format: "CSV" | "ORC" | "Parquet";
    /** The prefix to use when exporting data. The prefix is prepended to all results. */
    Prefix?: string;
}
/** Specifies a cross-origin access rule for an Amazon S3 bucket. */
interface IAwsS3CorsRule {
    AllowedHeaders?: string[];
    AllowedMethods: string[];
    AllowedOrigins: string[];
    ExposedHeaders?: string[];
    Id?: string;
    MaxAge?: seconds;
}
interface IAwsS3IntelligentTiering {
    /** The ID used to identify the S3 Intelligent-Tiering configuration. */
    Id: string;
    /** An object key name prefix that identifies the subset of objects to which the rule applies. */
    Prefix: string;
    /** Specifies the status of the configuration. */
    Status: "Disabled" | "Enabled";
    TagFilters: IAwsResourceTag[];
    /**
     * Specifies a list of S3 Intelligent-Tiering storage class tiers in the configuration. At least
     * one tier must be defined in the list. At most, you can specify two tiers in the list, one for
     * each available AccessTier: ARCHIVE_ACCESS and DEEP_ARCHIVE_ACCESS.
     */
    Tierings: {
        /** S3 Intelligent-Tiering access tier. */
        AccessTier: "ARCHIVE_ACCESS" | "DEEP_ARCHIVE_ACCESS";
        /**
         * The number of consecutive days of no access after which an object will be eligible to be
         * transitioned to the corresponding tier. The minimum number of days specified for Archive
         * Access tier must be at least 90 days and Deep Archive Access tier must be at least
         * 180 days. The maximum can be up to 2 years (730 days).
         */
        Days: integer;
    }[];
}
declare type AwsS3OptionalInventoryFields = "Size" | "LastModifiedDate" | "StorageClass" | "ETag" | "IsMultipartUploaded" | "ReplicationStatus" | "EncryptionStatus" | "ObjectLockRetainUntilDate" | "ObjectLockMode" | "ObjectLockLegalHoldStatus" | "IntelligentTieringAccessTier" | "BucketKeyStatus";
/**
 * Specifies the inventory configuration for an Amazon S3 bucket. For more information, see
 * [GET Bucket inventory](https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketGETInventoryConfig.html)
 * in the Amazon S3 API Reference.
 */
interface IAwsS3InventoryConfig {
    /** Contains information about where to publish the inventory results */
    Destination: IAwsS3BucketDestination;
    /**
     * Specifies whether the inventory is enabled or disabled. If set to True, an inventory list is
     * generated. If set to False, no inventory list is generated.
     */
    Enabled: boolean;
    /** The ID used to identify the inventory configuration. */
    Id: string;
    /**
     * Object versions to include in the inventory list. If set to All, the list includes all the
     * object versions, which adds the version-related fields VersionId, IsLatest, and DeleteMarker
     * to the list. If set to Current, the list does not contain these version-related fields.
     */
    IncludedObjectVersions: "All" | "Current";
    /** Contains the optional fields that are included in the inventory results. */
    OptionalFields?: AwsS3OptionalInventoryFields[];
    /** Specifies the inventory filter prefix. */
    Prefix?: string;
    /** Specifies the schedule for generating inventory results. */
    ScheduleFrequency: "Daily" | "Weekly";
}
interface IAwsS3BucketRule {
    AbortIncompleteMultipartUpload: any;
    ExpirationDate: string;
    ExpirationInDays: integer;
    ExpiredObjectDeleteMarker?: boolean;
    Id?: string;
    NoncurrentVersionExpiration?: any;
    /**
     * For buckets with versioning enabled (or suspended), specifies the time, in days, between when
     * a new version of the object is uploaded to the bucket and when old versions of the object expire.
     * When object versions expire, Amazon S3 permanently deletes them. If you specify a transition and
     * expiration time, the expiration time must be later than the transition time.
     *
     * @deprecated
     */
    NoncurrentVersionExpirationInDays?: integer;
    /**
     * For buckets with versioning enabled (or suspended), specifies when non-current objects transition
     * to a specified storage class. If you specify a transition and expiration time, the expiration time
     * must be later than the transition time. If you specify this property, don't specify the
     * NoncurrentVersionTransitions property.
     *
     * @deprecated
     */
    NoncurrentVersionTransition?: any;
    /**
     * For buckets with versioning enabled (or suspended), one or more transition rules that specify when
     * non-current objects transition to a specified storage class. If you specify a transition and
     * expiration time, the expiration time must be later than the transition time. If you specify this
     * property, don't specify the NoncurrentVersionTransition property.
     *
     * You must specify at least one of the following properties: AbortIncompleteMultipartUpload, ExpirationDate,
     * ExpirationInDays, NoncurrentVersionExpirationInDays, NoncurrentVersionTransition, NoncurrentVersionTransitions,
     * Transition, or Transitions.
     */
    NoncurrentVersionTransitions: any[];
    /** Specifies the minimum object size in bytes for this rule to apply to. */
    ObjectSizeGreaterThan?: integer;
    /** Specifies the maximum object size in bytes for this rule to apply to. */
    ObjectSizeLessThan?: integer;
    /**
     * Object key prefix that identifies one or more objects to which this rule applies.
     *
     * Note: Replacement must be made for object keys containing special characters (such as carriage returns)
     * when using XML requests.
     */
    Prefix?: string;
    /** If Enabled, the rule is currently being applied. If Disabled, the rule is not currently being applied. */
    Status?: "Disabled" | "Enabled";
    /** Tags to use to identify a subset of objects to which the lifecycle rule applies. */
    TagFilters: IAwsResourceTag[];
    /** @deprecated */
    Transition?: any;
    /**
     * One or more transition rules that specify when an object transitions to a specified storage class.
     * If you specify an expiration and transition time, you must use the same time unit for both properties
     * (either in days or by date). The expiration time must also be later than the transition time. If you
     * specify this property, don't specify the Transition property.
     *
     * You must specify at least one of the following properties: AbortIncompleteMultipartUpload, ExpirationDate,
     * ExpirationInDays, NoncurrentVersionExpirationInDays, NoncurrentVersionTransition, NoncurrentVersionTransitions,
     * Transition, or Transitions.
     */
    Transitions: {
        /** The storage class to which you want the object to transition. */
        StorgeClass: "DEEP_ARCHIVE" | "GLACIER" | "GLACIER_IR" | "INTELLIGENT_TIERING" | "ONEZONE_IA" | "STANDARD_IA";
        /**
         * Indicates when objects are transitioned to the specified storage class. The date value must be in
         * ISO 8601 format. The time is always midnight UTC.
         */
        TransitionDate?: Iso8601DateTime;
        /**
         * Indicates the number of days after creation when objects are transitioned to the specified storage class.
         * The value must be a positive integer.
         */
        TransitionInDays?: integer;
    }[];
}
/**
 * The `AWS::S3::Bucket` resource creates an Amazon S3 bucket in the same AWS Region where you
 * create the AWS CloudFormation stack. To control how AWS CloudFormation handles the bucket
 * when the stack is deleted, you can set a deletion policy for your bucket. You can choose
 * to retain the bucket or to delete the bucket. For more information, see
 * [DeletionPolicy Attribute](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html).
 *
 * [CloudFormation docs](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-s3-bucket.html)
 */
interface IAwsS3Bucket<T extends string = string> {
    Type: AwsResourceType.s3Bucket;
    DeletionPolicy?: "Retain" | "Delete";
    Properties: {
        /** Configures the transfer acceleration state for an Amazon S3 bucket. */
        AccelerateConfiguration?: {
            AccelerationStatus: "Enabled" | "Suspended";
        };
        /**
         * A canned access control list (ACL) that grants predefined permissions to the bucket.
         *
         * Be aware that the syntax for this property differs from the information provided in
         * the Amazon S3 User Guide. The AccessControl property is case-sensitive and must be
         * one of the following values: Private, PublicRead, PublicReadWrite, AuthenticatedRead,
         * LogDeliveryWrite, BucketOwnerRead, BucketOwnerFullControl, or AwsExecRead.
         */
        AccessControl?: "Private" | "PublicRead" | "PublicReadWrite" | "AuthenticatedRead" | "LogDeliveryWrite" | "BucketOwnerRead" | "BucketOwnerFullControl" | "AwsExecRead";
        /** Specifies the configuration and any analyses for the analytics filter of an Amazon S3 bucket. */
        AnalyticsConfigurations?: {
            Id: string;
            Prefix?: string;
            StorageClassAnalysis: {
                /** Specifies how data related to the storage class analysis for an Amazon S3 bucket should be exported. */
                DataExport?: {
                    Destination: IAwsS3BucketDestination;
                    OutputSchemaVersion: string;
                };
            };
            /**
             * The tags to use when evaluating an analytics filter. The analytics only includes objects that meet
             * the filter's criteria. If no filter is specified, all of the contents of the bucket are included
             * in the analysis.
             */
            TagFilters?: IAwsResourceTag[];
        };
        /**
         * Specifies default encryption for a bucket using server-side encryption with Amazon S3-managed keys (SSE-S3)
         * or AWS KMS-managed keys (SSE-KMS) bucket. For information about the Amazon S3 default encryption feature,
         * see [Amazon S3 Default Encryption for S3 Buckets](https://docs.aws.amazon.com/AmazonS3/latest/dev/bucket-encryption.html)
         * in the Amazon S3 User Guide.
         */
        BucketEncryption?: {
            /** Specifies the default server-side-encryption configuration. */
            ServerSideEncryptionConfiguration: any[];
        };
        /**
         * A name for the bucket. If you don't specify a name, AWS CloudFormation generates a unique ID and uses
         * that ID for the bucket name. The bucket name must contain only lowercase letters, numbers, periods (.),
         * and dashes (-) and must follow Amazon S3 bucket restrictions and limitations. For more information,
         * see [Rules for naming Amazon S3 buckets](https://docs.aws.amazon.com/AmazonS3/latest/dev/BucketRestrictions.html)
         * in the Amazon S3 User Guide.
         *
         * Note: If you specify a name, you can't perform updates that require replacement of this resource.
         * You can perform updates that require no or some interruption. If you need to replace the resource,
         * specify a new name.
         */
        BucketName?: `${T}${string}`;
        /**
         * Describes the cross-origin access configuration for objects in an Amazon S3 bucket.
         * For more information, see
         * [Enabling Cross-Origin Resource Sharing](https://docs.aws.amazon.com/AmazonS3/latest/dev/cors.html)
         * in the Amazon S3 User Guide.
         */
        CorsConfiguration?: {
            CorsRules: IAwsS3CorsRule[];
        };
        /**
         * Defines how Amazon S3 handles Intelligent-Tiering storage.
         */
        IntelligentTieringConfigurations?: IAwsS3IntelligentTiering[];
        /**
         * Specifies the inventory configuration for an Amazon S3 bucket. For more information,
         * see [GET Bucket inventory](https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketGETInventoryConfig.html)
         * in the Amazon S3 API Reference.
         */
        InventoryConfigurations?: IAwsS3InventoryConfig[];
        /**
         * Specifies the lifecycle configuration for objects in an Amazon S3 bucket. For more information,
         * see [Object Lifecycle Management](https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lifecycle-mgmt.html)
         * in the Amazon S3 User Guide.
         */
        LifecycleConfiguration?: {
            /** A lifecycle rule for individual objects in an Amazon S3 bucket. */
            Rules: IAwsS3BucketRule[];
        };
        /**
         * Settings that define where logs are stored. [docs](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket-loggingconfiguration.html)
         */
        LoggingConfiguration?: {
            /**
             * The name of the bucket where Amazon S3 should store server access log files. You can store log files
             * in any bucket that you own. By default, logs are stored in the bucket where the LoggingConfiguration
             * property is defined.
             */
            DestinationBucketName?: string;
            /**
             * A prefix for all log object keys. If you store log files from multiple Amazon S3 buckets in a single bucket,
             * you can use a prefix to distinguish which log files came from which bucket.
             */
            LogFilePrefix?: string;
        };
        /**
         * Specifies a metrics configuration for the CloudWatch request metrics (specified by the metrics
         * configuration ID) from an Amazon S3 bucket. If you're updating an existing metrics configuration,
         * note that this is a full replacement of the existing metrics configuration. If you don't include
         * the elements you want to keep, they are erased. For more information,
         * see [PutBucketMetricsConfiguration](https://docs.aws.amazon.com/AmazonS3/latest/API/RESTBucketPUTMetricConfiguration.html).
         */
        MetricsConfigurations?: {
            Id: string;
            Prefix?: string;
            TagFilters?: IAwsResourceTag[];
        }[];
        /** Configuration that defines how Amazon S3 handles bucket notifications. */
        NotificationConfiguration?: {
            /** Describes the AWS Lambda functions to invoke and the events for which to invoke them. */
            LambdaConfigurations?: {
                Event: string;
                Filter?: any;
                Function: arn;
            }[];
            /** The Amazon Simple Queue Service queues to publish messages to and the events for which to publish messages. */
            QueueConfigurations?: {
                Event: string;
                Filter?: any;
                Queue: arn;
            }[];
            /** The topic to which notifications are sent and the events for which notifications are generated. */
            TopicConfigurations?: {
                /** The Amazon S3 bucket event about which to send notifications.  */
                Event: string;
                /**
                 * The filtering rules that determine for which objects to send notifications. For example, you can
                 * create a filter so that Amazon S3 sends notifications only when image files with a .jpg extension
                 * are added to the bucket.
                 */
                Filter?: any;
                /**
                 * The Amazon Resource Name (ARN) of the Amazon SNS topic to which Amazon S3 publishes a message when
                 * it detects events of the specified type.
                 */
                Topic: arn;
            }[];
        };
        /**
         * Places an Object Lock configuration on the specified bucket. The rule specified in the Object Lock
         * configuration will be applied by default to every new object placed in the specified bucket. For more
         * information, see [Locking Objects](Locking Objects).
         */
        ObjectLockConfiguration?: {
            /**
             * Indicates whether this bucket has an Object Lock configuration enabled. Enable ObjectLockEnabled
             * when you apply ObjectLockConfiguration to a bucket.
             */
            ObjectLockEnabled?: "Enabled";
            Rule?: {
                DefaultRetention: {
                    Days?: integer;
                    Mode?: "COMPLIANCE" | "GOVERNANCE";
                    Years?: integer;
                };
            };
        };
        /**
         * Indicates whether this bucket has an Object Lock configuration enabled. Enable ObjectLockEnabled
         * when you apply ObjectLockConfiguration to a bucket.
         */
        ObjectLockEnabled?: boolean;
        /**
         * Configuration that defines how Amazon S3 handles Object Ownership rules.
         */
        OwnershipControls?: {
            /** Specifies the container element for Object Ownership rules. */
            Rules: {
                ObjectOwnership?: "BucketOwnerEnforced" | "ObjectWriter" | "BucketOwnerPreferred";
            }[];
        };
        /**
         * Configuration that defines how Amazon S3 handles public access.
         */
        PublicAccessBlockConfiguration?: {
            /**
             * Specifies whether Amazon S3 should block public access control lists (ACLs) for this bucket
             * and objects in this bucket.
             */
            BlockPublicAcls?: boolean;
            /**
             * Specifies whether Amazon S3 should block public bucket policies for this bucket. Setting this element
             * to TRUE causes Amazon S3 to reject calls to PUT Bucket policy if the specified bucket policy allows
             * public access.
             *
             * Setting this element to TRUE causes the following behavior:
             * - PUT Bucket acl and PUT Object acl calls fail if the specified ACL is public.
             * - PUT Object calls fail if the request includes a public ACL.
             * - PUT Bucket calls fail if the request includes a public ACL.
             */
            BlockPublicPolicy?: boolean;
            /**
             * Specifies whether Amazon S3 should ignore public ACLs for this bucket and objects in this bucket.
             * Setting this element to TRUE causes Amazon S3 to ignore all public ACLs on this bucket and objects
             * in this bucket.
             *
             * Enabling this setting doesn't affect the persistence of any existing ACLs and doesn't prevent
             * new public ACLs from being set.
             */
            IgnorePublicAcls?: boolean;
            /**
             * Specifies whether Amazon S3 should restrict public bucket policies for this bucket. Setting this
             * element to TRUE restricts access to this bucket to only AWS service principals and authorized
             * users within this account if the bucket has a public policy.
             *
             * Enabling this setting doesn't affect previously stored bucket policies, except that public and
             * cross-account access within any public bucket policy, including non-public delegation to specific
             * accounts, is blocked.
             */
            RestrictPublicBuckets?: boolean;
        };
        /**
         * Configuration for replicating objects in an S3 bucket. To enable replication, you must also enable
         * versioning by using the VersioningConfiguration property.
         *
         * Amazon S3 can store replicated objects in a single destination bucket or multiple destination buckets.
         * The destination bucket or buckets must already exist.
         */
        ReplicationConfiguration?: {
            /**
             * The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that Amazon S3
             * assumes when replicating objects.
             */
            Role: arn;
            /**
             * A container for one or more replication rules. A replication configuration must have at least one rule
             * and can contain a maximum of 1,000 rules.
             */
            Rules: any[];
        };
        Tags?: IAwsResourceTag[];
        /**
         * Enables multiple versions of all objects in this bucket. You might enable versioning to prevent objects
         * from being deleted or overwritten by mistake or to archive objects so that you can retrieve previous
         * versions of them.
         */
        VersioningConfiguration?: {
            Status: "Enabled" | "Suspended";
        };
        /**
         * Information used to configure the bucket as a static website. For more information, see
         * [Hosting Websites on Amazon S3](https://docs.aws.amazon.com/AmazonS3/latest/dev/WebsiteHosting.html).
         */
        WebsiteConfiguration?: any;
    };
}

/**
 * CloudFormation resource types
 */
declare enum AwsResourceType {
    /**
     * The `AWS::ApiGatewayV2::Model` resource updates data model for a WebSocket API. For more information,
     * see [Model Selection Expressions](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-model-selection-expressions)
     * in the API Gateway Developer Guide.
     *
     * [docs](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigatewayv2-model.html)
     */
    apiGatewayV2Model = "AWS::ApiGatewayV2::Model",
    /**
     * The `AWS::ApiGatewayV2::Api` resource creates an API. WebSocket APIs and HTTP APIs are supported. For more
     * information about WebSocket APIs, see About [WebSocket APIs in API Gateway ](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-overview.html)
     * in the API Gateway Developer Guide.
     * For more information about HTTP APIs, see [HTTP APIs](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api.html)
     * in the API Gateway Developer Guide.
     *
     * [docs](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigatewayv2-api.html)
     */
    apiGatewayV2Api = "AWS::ApiGatewayV2::Api",
    /**
     * [docs](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigatewayv2-route.html)
     */
    apiGatewayV2Route = "AWS::ApiGatewayV2::Route",
    /**
     * [docs](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigatewayv2-authorizer.html)
     */
    apiGatewayV2Authorizer = "AWS::ApiGatewayV2::Authorizer",
    /**
     * [docs](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigatewayv2-integration.html)
     */
    apiGatewayV2Integration = "AWS::ApiGatewayV2::Integration",
    /**
     * [docs](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigatewayv2-integrationresponse.html)
     */
    apiGatewayV2IntegrationResponse = "AWS::ApiGatewayV2::IntegrationResponse",
    /**
     * [docs](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-athena-datacatalog.html)
     */
    athenaDataCatalog = "AWS::Athena::DataCatalog",
    /**
     * [docs](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-athena-namedquery.html)
     */
    athenaNamedQuery = "AWS::Athena::NamedQuery",
    /**
     * [docs](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-athena-preparedstatement.html)
     */
    athenaPreparedStatement = "AWS::Athena::PreparedStatement",
    /**
     * Creates an Amazon Cognito identity pool.
     *
     * To avoid deleting the resource accidentally from AWS CloudFormation, use
     * [DeletionPolicy Attribute](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html)
     * and the [UpdateReplacePolicy Attribute](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-updatereplacepolicy.html)
     * to retain the resource on deletion or replacement.
     *
     * [docs](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cognito-identitypool.html)
     */
    cognitoIdentityPool = "AWS::Cognito::IdentityPool",
    /**
     * The `AWS::Cognito::UserPool` resource creates an Amazon Cognito user pool. For more information on working with
     * Amazon Cognito user pools, see
     * [Amazon Cognito User Pools](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools.html)
     * and [CreateUserPool](https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_CreateUserPool.html).
     *
     * [CloudFormation Docs](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cognito-userpool.html)
     */
    cognitoUserPool = "AWS::Cognito::UserPool",
    /**
     * [docs](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudfront-distribution.html)
     */
    cloudfrontDistribution = "AWS::Cloudfront::Distribution",
    /**
     * [docs](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudfront-function.html)
     */
    cloudfrontFunction = "AWS::Cloudfront::Function",
    /**
     * The `AWS::CloudWatch::Alarm` type specifies an alarm and associates it with the specified metric
     * or metric math expression.
     *
     * [docs](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cw-alarm.html)
     */
    cloudwatchAlarm = "AWS::CloudWatch::Alarm",
    /**
     * [docs](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudwatch-dashboard.html)
     */
    cloudwatchDashboard = "AWS::CloudWatch::Dashboard",
    /**
     * The `AWS::CloudWatch::AnomalyDetector` type specifies an anomaly detection band for a certain metric and statistic.
     * The band represents the expected "normal" range for the metric values. Anomaly detection bands can be used for
     * visualization of a metric's expected values, and for alarms.
     *
     * [docs](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudwatch-anomalydetector.html)
     */
    cloudwatchAnomalyDetector = "AWS::CloudWatch::AnomalyDetector",
    /**
     * [docs](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudwatch-insightrule.html)
     */
    cloudwatchInsightRule = "AWS::CloudWatch::InsightRule",
    /**
     * The `AWS::Logs::LogGroup` resource specifies a log group. A log group defines common properties for log streams,
     * such as their retention and access control rules. Each log stream must belong to one log group.
     *
     * [docs](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-loggroup.html)
     */
    cloudwatchLogGroup = "AWS::CloudWatch::LogGroup",
    /**
     * The AWS::Logs::LogStream resource specifies an Amazon CloudWatch Logs log stream in a specific log group.
     * A log stream represents the sequence of events coming from an application instance or resource that you are monitoring.
     *
     * [docs](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-logstream.html)
     */
    cloudwatchLogStream = "AWS::CloudWatch::LogStream",
    /**
     * The `AWS::Logs::MetricFilter` resource specifies a metric filter that describes how CloudWatch Logs extracts
     * information from logs and transforms it into Amazon CloudWatch metrics. If you have multiple metric filters
     * that are associated with a log group, all the filters are applied to the log streams in that group.
     *
     * [docs](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-metricfilter.html)
     */
    cloudwatchMetricFilter = "AWS::CloudWatch::MetricFilter",
    /**
     * Creates or updates a resource policy that allows other AWS services to put log events to this account.
     * An account can have up to 10 resource policies per AWS Region.
     *
     * [docs](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-resourcepolicy.html)
     */
    cloudwatchResourcePolicy = "AWS::CloudWatch::ResourcePolicy",
    /**
     * Creates a trail that specifies the settings for delivery of log data to an Amazon S3 bucket.
     *
     * [docs](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudtrail-trail.html)
     */
    cloudTrail = "AWS::CloudTrail::Trail",
    /**
     * [docs](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html)
     */
    iamRole = "AWS::IAM::Role",
    /**
     * [docs](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-policy.html)
     */
    iamPolicy = "AWS::IAM::Policy",
    /**
     * [docs](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-user.html)
     */
    iamUser = "AWS::IAM::User",
    /**
     * [docs](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iam-group.html)
     */
    iamGroup = "AWS::IAM::Group",
    /**
     * [docs](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-dynamodb-table.html)
     */
    dynamoTable = "AWS::DynamoDB::Table",
    /**
     * [docs](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-dynamodb-globaltable.html)
     */
    dynamoGlobalTable = "AWS::DynamoDB::GlobalTable",
    /**
     * Creates a new event bus within your account. This can be a custom event bus which you can use to receive
     * events from your custom applications and services, or it can be a partner event bus which can be matched
     * to a partner event source.
     *
     * [docs](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-events-eventbus.html)
     */
    eventBridgeEventBus = "AWS::EVENTS::EventBus",
    /**
     * Creates or updates the specified rule. Rules are enabled by default, or based on value of the state.
     * You can disable a rule using [DisableRule](https://docs.aws.amazon.com/eventbridge/latest/APIReference/API_DisableRule.html).
     *
     * A single rule watches for events from a single event bus. Events generated by AWS services go to your
     * account's default event bus. Events generated by SaaS partner services or applications go to the matching
     * partner event bus. If you have custom applications or services, you can specify whether their events go
     * to your default event bus or a custom event bus that you have created. For more information, see
     * [CreateEventBus](https://docs.aws.amazon.com/eventbridge/latest/APIReference/API_CreateEventBus.html).
     *
     * [docs](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-events-rule.html)
     */
    eventBridgeRule = "AWS::EVENTS::Rule",
    /**
     * [docs](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-events-apidestination.html)
     */
    eventBridgeApiDestination = "AWS::EVENTS::ApiDestination",
    /**
     * Creates a connection. A connection defines the authorization type and credentials to use for authorization
     * with an API destination HTTP endpoint.
     *
     * [docs](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-events-connection.html)
     */
    eventBridgeConnection = "AWS::EVENTS::Connection",
    /**
     * Used to specify an event schema.
     *
     * [docs](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-eventschemas-schema.html)
     */
    eventBridgeSchema = "AWS::EventSchemas::Schema",
    /**
     * [docs](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-fms-policy.html)
     */
    firewallPolicy = "AWS::FMS::Policy",
    /**
     * [docs](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-permission.html)
     */
    lambdaPermission = "AWS::Lambda::Permission",
    /**
     * [docs](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-function.html)
     */
    lambdaFunction = "AWS::Lambda::Function",
    /**
     * [docs](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-alias.html)
     */
    lambdaAlias = "AWS::Lambda::Alias",
    /**
     * The `AWS::S3::Bucket` resource creates an Amazon S3 bucket in the same AWS Region where you
     * create the AWS CloudFormation stack. To control how AWS CloudFormation handles the bucket
     * when the stack is deleted, you can set a deletion policy for your bucket. You can choose
     * to retain the bucket or to delete the bucket. For more information, see
     * [DeletionPolicy Attribute](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html).
     *
     * [CloudFormation docs](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-s3-bucket.html)
     */
    s3Bucket = "AWS::S3::Bucket",
    /**
     * [docs](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-s3-accesspoint.html)
     */
    s3AccessPoint = "AWS::S3::AccessPoint",
    /**
     * [docs](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sns-subscription.html) */
    snsSubscription = "AWS::SNS::Subscription",
    /**
     * [docs](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sns-topic.html)
     */
    snsTopic = "AWS::SNS::Topic",
    sesTemplate = "AWS::SES::Template",
    sesContactList = "AWS::SES::ContactList",
    sesReceiptRule = "AWS::SES::ReceiptRule",
    sesReceiptFilter = "AWS::SES::ReceiptFilter",
    sesReceiptRuleSet = "AWS::SES::ReceiptRuleSet",
    /**
     * Creates a new secret. A secret is a set of credentials, such as a user name and password, that you
     * store in an encrypted form in Secrets Manager. The secret also includes the connection information
     * to access a database or other service, which Secrets Manager doesn't encrypt. A secret in Secrets
     * Manager consists of both the protected secret data and the important information needed to manage
     * the secret.
     *
     * [docs](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-secretsmanager-secret.html)
     */
    secretsManagerSecret = "AWS::SecretsManager::Secret",
    /**
     * [docs](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ssm-parameter.html)
     */
    ssmParameter = "AWS::SSM:Parameter",
    /**
     * [docs](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sns-policy.html)
     */
    snsTopicPolicy = "AWS::SNS::TopicPolicy",
    /**
     * [docs](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sqs-queues.html)
     */
    sqsQueue = "AWS::SQS::Queue",
    /**
     * [docs](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sqs-queuepolicy.html)
     */
    sqsQueuePolicy = "AWS::SQS::QueuePolicy",
    /**
     * [docs](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-stepfunctions-activity.html)
     */
    stepFunctionsActivity = "AWS::StepFunctions::Activity",
    /**
     * [docs](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-stepfunctions-statemachine.html)
     */
    stepFunctionsStateMachine = "AWS::StepFunctions::StateMachine",
    /**
     * [docs](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-wafv2-rulegroup.html)
     */
    waf2RuleGroup = "AWS::WAFv2::RuleGroup",
    /**
     * [docs](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-wafv2-webacl.html)
     */
    waf2WebAcl = "AWS::WAFv2::WebACL"
}

/**
 * **IAwsResourceTag**
 *
 * - [CloudFormation docs](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html)
 */
interface IAwsResourceTag {
    Key: string;
    Value: string;
}

/**
 * An AWS _stage_ is identified typically by a development stage
 * (e.g., "dev", "prod", etc.) but we offer two exceptions
 * for valid typing:
 *
 * 1. **Developer Sandboxes** - if you prefix with `sb-[developer]` it
 * will allow a developer to push their changes to AWS as a "stage name".
 * 2. **Feature Branches** - if you want to push feature branch to AWS
 * you will be allowed to create a stage name called `feature_[branch]`
 * _developer sandbox_ as the stage name where the convention is
 * that the name is a "sb_[name]".
 *
 * Note: development stages are defined as `dev`, `prod`, `test`, and `stage`.
 * We recommend sticking to this but if you wish you use a different set we
 * provide a generic you can add your own type alias to replace this.
 */
declare type AwsStage<T = DevelopmentStage> = T | `sb_${string}` | `feature_${string}`;

/**
 * Distinguishes between a V1 and V2 Proxy Integration Request
 */
declare function isProxyRequestContextV2(ctx: IAwsLambdaProxyIntegrationRequest): ctx is IAwsLambdaProxyIntegrationRequestV2;
/**
 * Provides a strong type guard for ARN's of Lambda _functions_ specifically.
 *
 * Note: this type-guard is often the best choice but because `AwsArn` can't
 * provide typing down to the _resource_ level, the resulting type will not
 * fit into broader `AwsArn` type. Use the more general `isLambdaArn()` if you
 * want this.
 */
declare function isLambdaFunctionArn(arn: string): arn is AwsArnLambda<"function">;
/**
 * A type-guard to detect a Lambda based ARN and return a constrained version of
 * the `AwsArn` type.
 *
 * Note: if you want to constrain all the way down to a Lambda function you can
 * use the `isLambdaFunctionArn()` type guard but while it is more constrained,
 * it is no longer a subset of `AwsArn`.
 */
declare function isLambdaArn(arn: string): arn is AwsArn<string, AwsArnPartition, "lambda">;
/**
 * Type guard to ensure that a given value is a `AwsRegion`
 */
declare function isAwsRegion(region: unknown): region is AwsRegion;
/**
 * Type guard to ensure that a given value is a valid `AwsStage`
 */
declare function isAwsStage(stage: unknown): stage is AwsStage;
/**
 * Type guard to ensure a ARN string is EventBridge event
 */
declare function isEventBridgeArn(arn: string): arn is AwsArnEventBridge;
/**
 * Type guard to ensure that an ARN string is a Step Function definition.
 *
 * Note: this narrows to both the Service and Resource level and therefore
 * is more detailed than the `AwsArn` type. For a slightly less strongly
 * typed guard you can opt for `isStatesArn()` and while not as strong
 * it will _roll up_ to `AwsArn`.
 */
declare function isStepFunctionArn<T extends string = string>(arn: string): arn is AwsArnStepFunction<T>;
/**
 * A reasonable strong type guard to validate that a string is in fact
 * a fully qualified ARN.
 */
declare function isArn(arn: string): arn is arn;
/**
 * A type guard that tests whether a string is a valid AWS _partition_ (from the standpoint of a ARN)
 */
declare function isArnPartition(partition: unknown): partition is AwsArnPartition;
/**
 * A type guard that tests whether a string is a valid AWS _resource_ (from the standpoint of a ARN)
 */
declare function isArnResource(resource: string): resource is AwsArnResource;
/**
 * A type guard that tests whether a string is a valid AWS _service_ (from the standpoint of a ARN)
 */
declare function isArnService(service: string): service is AwsArnService;
/**
 * validates that the provided input could be a valid
 * `AwsAccountId`
 */
declare function isAwsAccountId(accountId: unknown): accountId is AwsAccountId;

/**
 * Identifies the most common properties included
 * in HTTP _**request**_ headers while leaving the structure the
 * flexibility to add more name/value pairs
 */
declare type IHttpRequestHeaders<T extends IDictionary<scalar | undefined> = IDictionary<scalar | undefined>> = T & {
    /**
     * The `Accept` _request_ HTTP header advertises which content types, expressed as
     * MIME types, the client is able to understand. Using content negotiation, the
     * server then selects one of the proposals, uses it and informs the client of
     * its choice with the `Content-Type` response header. Browsers set adequate
     * values for this header depending on the context where the request is done:
     * when fetching a CSS stylesheet a different value is set for the request
     * than when fetching an image, video or a script.
     *
     * [...more](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept)
     */
    Accept?: string;
    /**
     * The `Accept-Encoding` request advertises which content encoding,
     * usually a compression algorithm, the client is able to understand. Using
     * content negotiation, the server selects one of the proposals, uses it and
     * informs the client of its choice with the Content-Encoding response header.
     *
     * > [More info](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Encoding)
     */
    ["Accept-Encoding"]?: string;
    /**
     * The HTTP Authorization _request_ header contains the credentials to authenticate
     * a user agent with a server, usually after the server has responded with
     * a `401 Unauthorized` status and the `WWW-Authenticate` header.
     */
    Authorization?: string;
    /**
     * The body of the message. This is always a _string_ but is often
     * a stringified JSON object which can be parsed back to a structured
     * object.
     */
    body?: string;
    /**
     * The Cookie HTTP _request_ header contains stored HTTP cookies previously
     * sent by the server with the Set-Cookie header.
     */
    cookie?: string;
    /**
     * an identifying property that an application has placed on
     * a set of of message to _group_ them into a logical grouping.
     */
    "X-Correlation-Id"?: string;
};
/**
 * Identifies the most common properties in the
 * HTTP _**Response**_ headers while leaving
 * the flexiblility to add more name/value pairs
 */
declare type IHttpResponseHeaders<T extends IDictionary<scalar | undefined> = IDictionary<scalar | undefined>> = T & {
    /**
     * The `Allow` header lists the set of methods supported by a resource.
     *
     * [...more](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Allow)
     */
    Allow?: string;
    /**
     * The `If-Match` HTTP _request_ header makes the request conditional. For **GET** and
     * **HEAD** methods, the server will send back the requested resource only if it
     * matches one of the listed ETags. For **PUT** and other non-safe methods, it
     * will only upload the resource in this case.
     */
    ["If-Match"]?: string;
    /**
     * The `Expires` header contains the date/time after which the _response_ is considered
     * stale.
     *
     * > Example: `Expires: Wed, 21 Oct 2015 07:28:00 GMT`
     *
     * [...more](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Expires)
     */
    Expires?: string;
    /**
     * A comma-separated list of parameters, each consisting of an identifier
     * and a value separated by the equal sign ('='); of the format:
     * `timeout=5, max=1000`
     */
    ["Keep-Alive"]?: string;
    /**
     * The Last-Modified response HTTP header contains the date and time at which the
     * origin server believes the resource was last modified. It is used as a validator
     * to determine if a resource received or stored is the same. Less accurate than
     * an ETag header, it is a fallback mechanism. Conditional requests containing
     * `If-Modified-Since` or `If-Unmodified-Since` headers make use of this field.
     *
     * > example: `Last-Modified: Wed, 21 Oct 2015 07:28:00 GMT`
     */
    ["Last-Modified"]?: string;
    /**
     * The `Access-Control-Allow-Origin` response header indicates whether the response
     * can be shared with requesting code from the given origin.
     *
     * Examples:
     *   - `Access-Control-Allow-Origin: *`
     *   - `Access-Control-Allow-Origin: https://developer.mozilla.org`
     *
     * For requests without credentials, the literal value `*` can be specified, as
     * a wildcard; the value tells browsers to allow requesting code from any origin
     * to access the resource. Attempting to use the wildcard with credentials will
     * result in an error.
     *
     * [...more](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Origin)
     */
    "Access-Control-Allow-Origin"?: string;
    /**
     * The `Access-Control-Allow-Credentials` _response_ header tells browsers whether
     * to expose the response to frontend JavaScript code when the request's
     * credentials mode (Request.credentials) is "include".
     */
    "Access-Control-Allow-Credentials"?: boolean;
    /**
     * The HTTP `Cross-Origin-Resource-Policy` _response_ header conveys a desire
     * that the browser blocks no-cors cross-origin/cross-site requests to
     * the given resource.
     *
     * > Example: `Cross-Origin-Resource-Policy: same-site | same-origin | cross-site`
     *
     * [...more](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cross-Origin-Resource-Policy)
     */
    ["Cross-Origin-Resource-Policy"]?: string;
    /**
     * The `Content-Type` entity header is used to indicate the media type of
     * the resource.
     *
     * In responses, a `Content-Type` header tells the client what the content
     * type of the returned content actually is. Browsers will do MIME sniffing
     * in some cases and will not necessarily follow the value of this header;
     * to prevent this behavior, the header `X-Content-Type-Options` can be set
     * to **nosniff**.
     */
    "Content-Type"?: string;
    /**
     * an identifying property that an application has placed on
     * a set of of message to _group_ them into a logical grouping.
     */
    "X-Correlation-Id"?: string;
    /**
     * The ETag HTTP response header is an identifier for a specific version of
     * a resource. It lets caches be more efficient and save bandwidth, as a web
     * server does not need to resend a full response if the content has not
     * changed. Additionally, etags help prevent simultaneous updates of a
     * resource from overwriting each other ("mid-air collisions").
     *
     * [...more](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag)
     */
    etag?: string;
    /**
     * The body of the message. This is always a _string_ but is often
     * a stringified JSON object which can be parsed back to a structured
     * object.
     */
    body?: string;
    /**
     * The HTTP `WWW-Authenticate` _response_ header defines the authentication method
     * that should be used to gain access to a resource.
     *
     * [...more](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/WWW-Authenticate)
     */
    ["WWW-Authenticate"]?: string;
};
declare type IHttpHeaders<T extends IDictionary<scalar | undefined> = IDictionary<scalar | undefined>> = IHttpRequestHeaders<T> | IHttpResponseHeaders<T>;
declare enum HttpStatusCodes {
    /**
     * The client SHOULD continue with its request. This interim response is used to inform
     * the client that the initial part of the request has been received and has not yet
     * been rejected by the server. The client SHOULD continue by sending the remainder
     * of the request or, if the request has already been completed, ignore this response.
     * The server MUST send a final response after the request has been completed.
     */
    Continue = 100,
    /** The request has succeeded. */
    Success = 200,
    /**
     * The request has been fulfilled and resulted in a new resource being created. The newly
     * created resource can be referenced by the URI(s) returned in the entity of the response,
     * with the most specific URI for the resource given by a Location header field. The response
     * SHOULD include an entity containing a list of resource characteristics and location(s) from
     * which the user or user agent can choose the one most appropriate. The entity format is
     * specified by the media type given in the Content-Type header field. The origin server MUST
     * create the resource before returning the `201` status code. If the action cannot be carried
     * out immediately, the server SHOULD respond with `202` (Accepted) response instead.
     *
     * A `201` response MAY contain an ETag response header field indicating the current value of
     * the entity tag for the requested variant just created.
  
     */
    Created = 201,
    /**
     * The request has been accepted for processing, but the processing has not been completed.
     * The request might or might not eventually be acted upon, as it might be disallowed when
     * processing actually takes place. There is no facility for re-sending a status code from an
     * asynchronous operation such as this.
     *
     * The 202 response is intentionally non-committal. Its purpose is to allow a server to accept
     * a request for some other process (perhaps a batch-oriented process that is only run once
     * per day) without requiring that the user agent's connection to the server persist until the
     * process is completed. The entity returned with this response SHOULD include an indication
     * of the request's current status and either a pointer to a status monitor or some estimate
     * of when the user can expect the request to be fulfilled.
     */
    Accepted = 202,
    /**
     * The server has fulfilled the request but does not need to return an entity-body, and might
     * want to return updated meta-information. The response MAY include new or updated
     * meta-information in the form of entity-headers, which if present SHOULD be associated with
     * the requested variant.
     *
     * If the client is a _user agent_, it **SHOULD NOT** change its document view from that which
     * caused the request to be sent. This response is primarily intended to allow input for
     * actions to take place without causing a change to the user agent's active document view,
     * although any new or updated metainformation **SHOULD** be applied to the document
     * currently in the user agent's active view.
     *
     * The `204` response **MUST NOT** include a `message-body`, and thus is always terminated
     * by the first empty line after the header fields.
     */
    NoContent = 204,
    MovedPermenantly = 301,
    TemporaryRedirect = 307,
    /**
     * If the client has performed a conditional GET request and access is allowed, but the
     * document has not been modified, the server SHOULD respond with this status code. The
     * `304` response MUST NOT contain a _message-body_, and thus is always terminated by the
     * first empty line after the header fields.
     */
    NotModified = 304,
    /**
     * The request could not be understood by the server due to malformed syntax.
     * The client SHOULD NOT repeat the request without modifications.
     */
    BadRequest = 400,
    /**
     * The request requires user authentication. The response MUST include a WWW-Authenticate
     * header field containing a challenge applicable to the requested resource.
     * The client MAY repeat the request with a suitable Authorization header field. If the
     * request already included Authorization credentials, then the `401`
     * response indicates that authorization has been refused for those credentials. If the `401`
     * response contains the same challenge as the prior response, and the user agent has already
     * attempted authentication at least once, then the user SHOULD be presented the entity that
     * was given in the response, since that entity might include relevant diagnostic information.
     */
    Unauthorized = 401,
    PaymentRequired = 402,
    /**
     * The request could not be understood by the server due to malformed syntax. The client
     * SHOULD NOT repeat the request without modifications.
     */
    Forbidden = 403,
    /**
     * The server has not found anything matching the Request-URI. No indication is given of
     * whether the condition is temporary or permanent. The `410` (Gone) status code SHOULD be
     * used if the server knows, through some internally configurable mechanism, that an old
     * resource is permanently unavailable and has no forwarding address.
     *
     * This status code is commonly used when the server does not wish to reveal exactly
     * why the request has been refused, or when no other response is applicable.
     */
    NotFound = 404,
    /**
     * The method specified in the Request-Line is not allowed for the resource identified
     * by the Request-URI. The response MUST include an Allow header containing a list of
     * valid methods for the requested resource.
     */
    MethodNotAllowed = 405,
    /**
     * The client did not produce a request within the time that the server was
     * prepared to wait. The client MAY repeat the request without modifications
     * at any later time.
     */
    RequestTimeout = 408,
    /**
     * The request could not be completed due to a conflict with the current state of the
     * resource. This code is only allowed in situations where it is expected that the
     * user might be able to resolve the conflict and resubmit the request. The response
     * body SHOULD include enough information for the user to recognize the source of the
     * conflict. Ideally, the response entity would include enough information for the
     * user or user agent to fix the problem; however, that might not be possible and
     * is not required.
     *
     * Conflicts are most likely to occur in response to a PUT request. For example,
     * if versioning were being used and the entity being PUT included changes to a resource
     * which conflict with those made by an earlier (third-party) request, the server might
     * use the 409 response to indicate that it can't complete the request. In this case,
     * the response entity would likely contain a list of the differences between the
     * two versions in a format defined by the response Content-Type.
     */
    Conflict = 409,
    /**
     * The requested resource is no longer available at the server and no forwarding address
     * is known. This condition is expected to be considered permanent. Clients with link
     * editing capabilities SHOULD delete references to the Request-URI after user approval.
     * If the server does not know, or has no facility to determine, whether or not the
     * condition is permanent, the status code 404 (Not Found) SHOULD be used instead.
     * This response is cacheable unless indicated otherwise.
     *
     * The 410 response is primarily intended to assist the task of web maintenance by
     * notifying the recipient that the resource is intentionally unavailable and that
     * the server owners desire that remote links to that resource be removed. Such an
     * event is common for limited-time, promotional services and for resources belonging
     * to individuals no longer working at the server's site. It is not necessary to mark
     * all permanently unavailable resources as "gone" or to keep the mark for any length
     * of time -- that is left to the discretion of the server owner.
     */
    Gone = 410,
    /**
     * Indicates that the server refuses to brew coffee because it is, permanently, a teapot.
     * A combined coffee/tea pot that is temporarily out of coffee should instead return 503.
     * This error is a reference to Hyper Text Coffee Pot Control Protocol defined in April
     * Fools' jokes in 1998 and 2014.
     */
    IAmATeapot = 418,
    UnprocessableEntity = 422,
    /**
     * The 429 status code indicates that the user has sent too many requests in a given
     * amount of time ("rate limiting").
     */
    TooManyRequests = 429,
    /**
     * The server encountered an unexpected condition which prevented it from fulfilling
     * the request.
     */
    InternalServerError = 500,
    /**
     * The server does not support the functionality required to fulfill the request. This
     * is the appropriate response when the server does not recognize the request method
     * and is not capable of supporting it for any resource.
     */
    NotImplemented = 501,
    /**
     * The server, while acting as a gateway or proxy, received an invalid response from
     * the upstream server it accessed in attempting to fulfill the request.
     */
    BadGateway = 502,
    /**
     * Indicates that the server is not ready to handle the request.
     *
     * Common causes are a server that is down for maintenance or that is overloaded.
     * This response should be used for temporary conditions and the `Retry-After` HTTP
     * header should, if possible, contain the estimated time for the recovery of the
     * service.
     */
    ServiceUnavailable = 503,
    GatewayTimeout = 504,
    /**
     * The 511 status code indicates that the client needs to authenticate to gain
     * network access.
     *
     * The response representation SHOULD contain a link to a resource that allows
     * the user to submit credentials (e.g. with a HTML form).
     *
     * Note that the 511 response SHOULD NOT contain a challenge or the login interface
     * itself, because browsers would show the login interface as being associated with
     * the originally requested URL, which may cause confusion.
     */
    AuthenticationRequired = 511
}

/**
 * **IAwsHandlerFunction**
 *
 * A type definition for any AWS Lambda "Handler Function". It does require a type
 * definition for the expected "payload" being sent in as the `event` but it allows
 * for this payload to come in directly (as would be the case when a Lambda calls
 * another Lambda) or if API Gateway calls this function (where the payload is a
 * _stringified_ version of the payload in the "body" parameter).
 *
 * Also as "best practice" the _Response_ that this handler function will be
 * returning to the caller -- via Lambda's provided callback (`cb`) -- should be
 * stated as the `<R>` generic type. If not stated explicitly it will default to
 * a simple dictionary/hash (aka, `IDictionary`).
 *
 * Finally, the third generic type that you may _optionally_ provide is the typing
 * for the errors your function _may_ return. Defining this will make your function
 * even more clear and descriptive but if left off it will just default to a
 * standard Javascript `Error` typing.
 */
declare type IAwsHandlerFunction<T, R = IDictionary, E = Error> = (event: IAwsLambdaEvent<T>, context: IAwsLambdaContext, 
/**
 * callbacks are no longer required and it is preferred that you simply return
 * the results
 */
cb?: IAwsLambdaCallback<R, E>) => Promise<void> | Promise<R> | Promise<IAwsApiGatewayResponse>;
/**
 * **IAwsLambdaEvent**
 *
 * Provides a simple way to state that the event will either be a raw payload of
 * type `T` or that it may be wrapped in a
 * [AWS Proxy Request](https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-lambda-proxy-integrations.html).
 */
declare type IAwsLambdaEvent<T> = T | IAwsLambdaProxyIntegrationRequest;
/**
 * A hash/dictionary structure that will convey the aspects of an error
 * to AWS's **API Gateway**.
 */
interface IAwsApiGatewayErrorResponse<T extends number = number> {
    headers?: IDictionary;
    /** the HTTP style error code number for this reponse */
    errorCode?: T;
    errorMessage?: string;
    errorType: "Error" | string;
    /**
     * You may optionally list out all of the errors which occurred. This
     * is of type _string_ but would typically be a `JSON.stringify()` string
     * of an array of Errors.
     */
    errors?: string;
    stackTrace?: string;
}
/**
 * **IAwsLambdaCallback**
 *
 * Provides the typing for the basic structure of a Lambda callback
 * (aka, `(err, response) => void` but also requires that you state
 * the stucture of a successful response). Optionally you may state
 * the Error Responses that this function may return too but that is
 * optional and will be expressed simply as the type of `Error` if
 * left off.
 */
declare type IAwsLambdaCallback<T, E = any> = IAwsLambdaSuccessCallback<T> & IAwsLambdaFailureCallback<E>;
/** A Lambda function called to indicate the SUCCESSFUL end-state of a lambda function */
interface IAwsLambdaSuccessCallback<T = IDictionary> {
    (error: null, response: T): void;
}
/** A Lambda function called to indicate a FAILED end-state of a lambda function */
interface IAwsLambdaFailureCallback<E = any> {
    (error: E | Error, response?: null): void;
}
/**
 * **IAwsApiGatewayResponse**
 *
 * A Lambda function called that is returning to an API Gateway endpoint
 */
interface IAwsApiGatewayResponse {
    isBase64Encoded?: boolean;
    statusCode: number;
    headers?: IDictionary<string | boolean | number>;
    body?: string;
    error?: string;
}
declare type RestMethod = "GET" | "POST" | "PUT" | "DELETE";
/**
 * Provides a _type guard_ which identifies if the passed in event
 * is a LambdaProxy request or not. This is useful when you have
 * both an HTTP event and a Lambda-to-Lambda or Step-Function-to-Lambda
 * interaction.
 *
 * @param message the body of the request (which is either of type T or a LambdaProxy event)
 */
declare function isLambdaProxyRequest<T>(message: T | IAwsLambdaProxyIntegrationRequest): message is IAwsLambdaProxyIntegrationRequest;
interface IAwsLambdaProxyRequestContext extends IDictionary {
    requestTime: string;
    path: string;
    accountId: string;
    protocol: string;
    resourceId: string;
    stage: string;
    requestTimeEpoch: number;
    requestId: string;
    identity: {
        cognitoIdentityPoolId?: string;
        accountId?: string;
        cognitoIdentityId: string;
        caller: string;
        sourceIp: string;
        accessKey: string;
        cognitoAuthenticationType: string;
        cognitoAuthenticationProvider: string;
        userArn: string;
        userAgent: string;
        user: string;
    };
    resourcePath: string;
    httpMethod: RestMethod;
    apiId: string;
}
interface IAwsLambdaProxyJwtAuthorizer {
    claims?: IDictionary;
    scopes?: string[];
}
interface IAwsLambdaProxyClientCert {
    clientCertPem: string;
    subjectDN: string;
    issuerDN: string;
    serialNumber: string;
    validity: {
        /** time format: "May 28 12:30:02 2019 GMT" */
        notBefore: string;
        /** time format: "May 28 12:30:02 2019 GMT" */
        notAfter: string;
    };
}
interface IAwsLambdaProxyRequestContextV2 extends IDictionary {
    accountId: string;
    apiId: string;
    authentication?: Record<"clientCert", IAwsLambdaProxyClientCert> & IDictionary;
    authorizer: Record<"jwt", IAwsLambdaProxyJwtAuthorizer> & IDictionary;
    domainName: string;
    domainPrefix: string;
    http: {
        method: RestMethod;
        path: string;
        protocol: "HTTP/1.1" | string;
        sourceIp: string;
        userAgent: string;
    };
    requestId: string;
    routeKey: "$default" | string;
    stage: "$default" | string;
    /**
     * time format: "12/Mar/2020:19:03:58 +0000"
     */
    time: string;
    timeEpoch: number;
}
/**
 * **IAWSLambdaProxyIntegrationRequestV2**
 *
 */
interface IAwsLambdaProxyIntegrationRequestV2 {
    version: "2.0";
    routeKey: "$default" | string;
    rawPath: string;
    /**
     * e.g. parameter1=value1&parameter1=value2&parameter2=value
     */
    rawQueryString: string;
    cookies: string[];
    /**
     * multiValue headers now are in the same string separated by comma
     */
    headers: IAwsLambdaProxyIntegrationRequestHeaders;
    /**
     * multiValue queryString parameters now are in the same string separated by comma
     */
    queryStringParameters?: Record<string, string | number | boolean>;
    requestContext: IAwsLambdaProxyRequestContextV2;
    body: string;
    pathParameters?: Record<string, string | number | boolean>;
    isBase64Encoded: boolean;
    stageVariables: IDictionary;
}
declare type IAwsLambdaProxyIntegrationRequest = IAwsLambdaProxyIntegrationRequestV1 | IAwsLambdaProxyIntegrationRequestV2;
/**
 * **IAWSLambdaProxyIntegrationRequest**
 *
 * When a Lambda function is executed by API Gateway, the default option is
 * to turn on "Lambda Proxy Integration" which provides a lot of meta data
 * regarding the request. When this is on, the message payload will be found
 * in the "body" attribute as a JSON string.
 */
interface IAwsLambdaProxyIntegrationRequestV1 {
    version: "1.0";
    resource: string;
    path: string;
    httpMethod: RestMethod;
    headers: IAwsLambdaProxyIntegrationRequestHeaders;
    /**
     * All modern versions of AWS Lambda functions now return a dictionary of
     * name/value pairs; no longer need to parse this yourself.
     *
     * **Note:** this _might_ be always passed these days rather than being
     * optional. This _does_ appear to be the case with Netlify's functions.
     */
    queryStringParameters?: Record<string, string | number | boolean>;
    pathParameters?: Record<string, string | number | boolean>;
    requestContext: IAwsLambdaProxyRequestContext;
    /** The payload that the client has sent to you; if the content was originally in JSON/object format you will need to parse it */
    body: string;
    isBase64Encoded: boolean;
}
/** The header values of an AWS _proxy integration_ event/request */
interface IAwsLambdaProxyIntegrationRequestHeaders extends IHttpResponseHeaders {
    Accept: string;
    Authorization?: string;
    /** CORs scoping  */
    ["Access-Control-Allow-Origin"]?: string;
    /** CORs parameter */
    ["Access-Control-Allow-Credentials"]?: boolean;
    ["Accept-Encoding"]: string;
    ["cache-control"]: string;
    ["CloudFront-Forwarded-Proto"]: BooleanAsString;
    ["CloudFront-Is-Desktop-Viewer"]: BooleanAsString;
    ["CloudFront-Is-Mobile-Viewer"]: BooleanAsString;
    ["CloudFront-Is-SmartTV-Viewer"]: BooleanAsString;
    ["CloudFront-Is-Tablet-Viewer"]: BooleanAsString;
    ["CloudFront-Viewer-Country"]: string;
    ["Content-Type"]: string;
    ["Host"]: string;
    ["User-Agent"]: string;
    ["Via"]: string;
    ["X-Amz-Cf-Id"]: string;
    ["X-Amzn-Trace-Id"]: string;
    ["X-Forwarded-For"]: string;
    ["X-Forwarded-Proto"]: string;
    ["X-Correlation-Id"]?: string;
    ["Cookie"]?: string;
}
interface IAwsLambdaContext {
    /** The default value is true. This property is useful only to modify the default behavior of the callback. By default, the callback will wait until the Node.js runtime event loop is empty before freezing the process and returning the results to the caller. You can set this property to false to request AWS Lambda to freeze the process soon after the callback is called, even if there are events in the event loop. AWS Lambda will freeze the process, any state data and the events in the Node.js event loop (any remaining events in the event loop processed when the Lambda function is called next and if AWS Lambda chooses to use the frozen process). For more information about callback, see Using the Callback Parameter. */
    callbackWaitsForEmptyEventLoop?: boolean;
    /** Name of the Lambda function that is executing. */
    functionName: string;
    /** The Lambda function version that is executing. If an alias is used to invoke the function, then function_version will be the version the alias points to. */
    functionVersion: string;
    /** The ARN used to invoke this function. It can be a function ARN or an alias ARN. An unqualified ARN executes the $LATEST version and aliases execute the function version it is pointing to. */
    invokedFunctionArn: string;
    /** Memory limit, in MB, you configured for the Lambda function. You set the memory limit at the time you create a Lambda function and you can change it later. */
    memoryLimitInMB: string;
    /** AWS request ID associated with the request. This is the ID returned to the client that called the invoke method. Note: if AWS Lambda retries the invocation (for example, in a situation where the Lambda function that is processing Kinesis records throws an exception), the request ID remains the same.*/
    awsRequestId: string;
    /** The name of the CloudWatch log group where you can find logs written by your Lambda function */
    logGroupName: string;
    /** The name of the CloudWatch log group where you can find logs written by your Lambda function. The log stream may or may not change for each invocation of the Lambda function.  The value is null if your Lambda function is unable to create a log stream, which can happen if the execution role that grants necessary permissions to the Lambda function does not include permissions for the CloudWatch actions. */
    logStreamName: string;
    /** Information about the Amazon Cognito identity provider when invoked through the AWS Mobile SDK. It can be null. */
    identity?: string;
    /** Information about the client application and device when invoked through the AWS Mobile SDK */
    clientContext?: {
        client: {
            installation_id: string;
            app_title: string;
            app_version_name: string;
            app_version_code: string;
            app_package_name: string;
        };
        Custom: IDictionary;
        env: {
            platform: string;
            platform_version: string;
            make: string;
            model: string;
            locale: string;
        };
    };
}
interface IAwsGatewayRequest {
    done?: () => void;
    succeed?: () => void;
    fail?: () => void;
    logGroupName?: string;
    logStreamName?: string;
    memoryLimitInMB?: string;
    functionVersion?: string;
    getRemainingTimeInMillis?: string;
    invokeid?: string;
    awsRequestId?: string;
    invokedFunctionArn?: string;
    stage?: "dev" | "stage" | "prod";
    parentRequestId?: string;
}
/** A decorator signature for a class property */
declare type PropertyDecorator = (target: any, key: string | symbol) => void;
/** A decorator signature for a class */
declare type ClassDecorator = <TFunction extends Function>(target: TFunction) => TFunction | void;
interface ReflectionProperty<T> {
    get: () => T;
    set: (value?: any) => void;
    enumerable: boolean;
    configurable: boolean;
}
interface ICloudWatchEvent_Old {
    messageType: string | "DATA_MESSAGE";
    owner: string;
    logGroup: string;
    logStream: string;
    subscriptionFilters: string[];
    logEvents: IAwsCloudWatchLogEvent[];
}
interface IAwsCloudWatchLogEvent {
    id: string;
    timestamp: epoch;
    message: string;
    extractedFields?: IDictionary[];
}

interface IServerlessEventHttpWithDocumentation extends IServerlessEventHttp {
    documentation?: IServerlessOpenApiDocumentation;
}
interface IServerlessOpenApiDocumentationSchema {
    type: string;
    pattern?: string;
    enum?: "standard" | "premium";
}
interface IServerlessOpenApiDocumentationParams {
    name: string;
    description: string;
    required?: boolean;
    schema: IServerlessOpenApiDocumentationSchema;
}
interface IServerlessOpenApiDocumentationMethodResponses {
    statusCode: number;
    responseBody?: {
        description: string;
    };
    responseModels?: {
        "application/json": string;
    };
}
interface IServerlessOpenApiDocumentation {
    summary: string;
    description: string;
    requestBody?: {
        description: string;
        schema?: IServerlessOpenApiDocumentationSchema;
    };
    requestModels?: {
        "application/json": string;
    };
    pathParams?: IServerlessOpenApiDocumentationParams;
    queryParams?: IServerlessOpenApiDocumentationParams;
    cookieParams?: IServerlessOpenApiDocumentationParams;
    methodResponses?: IServerlessOpenApiDocumentationMethodResponses[];
}
interface IServerlessOpenApiDocumentationModelSchema {
    $schema: string;
    properties: {};
}
interface IServerlessOpenApiDocumentationModel {
    name: string;
    description: string;
    contentType: "application/json" | "application/xml" | string;
    schema: IServerlessOpenApiDocumentationModelSchema | string;
}
interface IServerlessOpenApiDocumentationConfiguration {
    version?: string;
    title: string;
    description: string;
    models: IServerlessOpenApiDocumentationModel[];
}

declare type IServerlessAuthorizer = {
    /**
     * If set to 'allow' this allows the request to be forwarded to the target when user is
     * not authenticated. When omitted it defaults 'deny' which makes a HTTP 401 Unauthorized
     * error be returned. Alternatively configure to 'authenticate' to redirect request to IdP
     * authorization endpoint.
     */
    onUnauthenticatedRequest: "deny" | "allow";
    /**
     * The query parameters (up to 10) to include in the redirect request to the authorization
     * endpoint.
     */
    requestExtraParams?: Record<string, scalar>;
} & (IServerlessCognito | IServerlessOidc);
interface IServerlessCognito {
    type: "cognito";
    userPoolArn: string;
    userPoolClientId: string;
    userPoolDomain: string;
    /**
     * Can be a combination of any system-reserved scopes or custom scopes associated with the client.
     * The default is `openid`.
     */
    scope?: string;
    /**
     * The name of the cookie used to maintain session information. The default is `AWSELBAuthSessionCookie`.
     */
    sessionCookieName?: string;
    /**
     * The maximum duration of the authentication session, in seconds. The default is 604800 seconds (7 days).
     */
    sessionTimeout?: seconds;
}
interface IServerlessOidc {
    type: "oidc";
    authorizationEndpoint: string;
    clientId: string;
    /**
     * if creating a rule this is required. If modifying a rule, this can be omitted
     * if you set useExistingClientSecret to true (as below)
     */
    clientSecret?: string;
    /** only required if clientSecret is omitted */
    useExistingClientSecret: boolean;
    /**
     * The OIDC issuer identifier of the IdP. This must be a full URL, including the HTTPS protocol,
     * the domain, and the path.
     */
    issuer: url;
    tokenEndpoint: url;
    userInfoEndpoint: url;
}
interface IServerlessJwtAuthorizer {
    /** for instance: `$request.header.Authorization` */
    identitySource: string;
    /** for instance: `https://cognito-idp.us-east-1.amazonaws.com/us-east-1_xxxxx` */
    issuerUrl: url;
    audience?: string[];
}

declare const AWS_REGIONS: string[];

interface IServerlessTracing {
    apiGateway?: boolean;
    lambda?: boolean;
}

/** A typing for the serverless framework's "serverless.yml" file */
declare type IServerlessStage = DevelopmentStage;
declare type IServerlessVariable = string;
interface IServerlessAccountInfo {
    name: string;
    accountId: string;
    region: string;
    profile: string;
    /**
     * Add X-RAY tracing to API Gateway and Lambda. Using the boolean flags
     * you are setting both but if you only want one you can state which one
     * as the value.
     */
    tracing?: IServerlessTracing | boolean;
    /**
     * if you want to forward logs to another lambda you can state the **ARN** here
     */
    logForwarding?: arn;
    /**
     * a list of serverless plugins installed
     */
    pluginsInstalled: string[];
    /**
     * a list of all Development Dependencies
     */
    devDependencies: string[];
}
declare type AWSRuntime = "nodejs6.10" | "nodejs8.10" | "nodejs10.x" | "nodejs12.x" | "nodejs14.x" | "node4" | "java8" | "python2.7" | "python3.6" | "go1.x";
interface IServerlessConfigCustom extends IDictionary {
    stage?: string;
    region?: string;
    accountId?: string;
    webpack?: IDictionary;
    logForwarding?: {
        /** a fully qualified ARN to the function who will act as the "shipper" */
        destinationARN: arn;
    };
}
interface ILayerDefinition {
    [layerName: string]: {
        /**
         * This indicates the path in the layer repos file system where
         * content will be picked up. So if you're adding a layer with
         * NPM modules -- for instance -- you'd move into the specified
         * directory and then do your yarn/npm adds to this directory
         */
        path: string;
        /** what is says on the tin ... a description of your layer */
        description: string;
    };
}
declare type ServerlessFunctionMemorySize = 128 | 192 | 256 | 320 | 384 | 448 | 512 | 576 | 640 | 704 | 768 | 832 | 896 | 960 | 1024 | 1088 | 1152 | 1216 | 1280 | 1344 | 1408 | 1472 | 1536 | 1600 | 1664 | 1728 | 1792 | 1856 | 1920 | 1984 | 2048 | 2112 | 2176 | 2240 | 2304 | 2368 | 2432 | 2496 | 2560 | 2624 | 2688 | 2752 | 2816 | 2880 | 2944 | 3008;
interface IServerlessStatusCode {
    pattern: string;
    template?: string | IDictionary;
    headers: IDictionary;
}
interface IServerlessRequest<T = unknown> {
    template?: IDictionary;
    parameters?: {
        querystrings?: IDictionary;
        headers?: IDictionary;
        paths?: IDictionary;
    };
    schema: T;
    passThrough?: "NEVER" | "WHEN_NO_MATCH" | "WHEN_NO_TEMPLATES";
}
interface IServerlessHttpAuthorizer {
    arn: string;
    claims?: string[];
    resultTtlInSeconds?: number;
    identitySource?: string | string[];
    identityValidationExpression?: string;
    type?: string;
}

/**
 * meant to be used with the
 * [serverless-aws-alias](https://github.com/HyperBrain/serverless-aws-alias)
 * serverless plugin
 */
interface IApiGatewayAliasConfig {
    /** Log full request/response bodies */
    dataTraceEnabled?: boolean;
    loggingLevel?: "INFO" | "ERROR" | "OFF";
    metricsEnabled?: boolean;
    cacheDataEncrypted?: boolean;
    cacheTtlInSeconds?: number;
    cachingEnabled?: boolean;
}

interface IServerlessBindDeploymentIdPlugin {
    resources: {
        Resources: {
            PathMapping: {
                Type: string;
                DependsOn: string;
                Properties: {
                    BasePath?: string;
                    /**
                     * e.g., `${self:provider.stage}`
                     */
                    DomainName?: string;
                    RestApiId: {
                        /** default: `ApiGatewayRestApi` */
                        Ref: string;
                    };
                    /** default: `${self:provider.stage}` */
                    Stage: string;
                };
            };
            __deployment__: {
                Properties: {
                    Description: string;
                };
            };
            ApiGatewayStage: IApiGatewayStage;
            ApiGatewayStage2?: IApiGatewayStage;
            ApiGatewayStage3?: IApiGatewayStage;
            ApiGatewayStage4?: IApiGatewayStage;
            ApiGatewayStage5?: IApiGatewayStage;
        };
    };
}
interface IApiGatewayMethodSetting {
    DataTraceEnabled: boolean;
    HttpMethod?: string;
    LoggingLevel: "INFO" | "DEBUG" | "WARN" | "ERROR" | "OFF";
    ResourcePath?: string;
    MetricsEnabled?: boolean;
}
/**
 * **IApiGatewayStage**
 *
 * The AWS::ApiGateway::Stage resource creates a stage for
 * an Amazon API Gateway (API Gateway) deployment.
 */
interface IApiGatewayStage {
    /** example: `AWS::ApiGateway::Stage` */
    Type: string;
    Properties: {
        DeploymentId: {
            /** default: `__deployment__` */
            Ref: string;
        };
        RestApiId: {
            /** default: `ApiGatewayRestApi` */
            Ref: string;
        };
        /** default: `${self:provider.stage}` */
        StageName: string;
        MethodSettings?: IApiGatewayMethodSetting[];
    };
}
interface IServerlessApiGatewayLoggingConfig {
    /** the service name */
    service: string;
    stage: IServerlessStage;
    /** custom domain name */
    domainName?: string;
}
/**
 * @deprecated createBindDeploymentConfig() is deprecated; the `common-types` library
 * aims almost exclusively to provide _types_ and this does not fit this
 * ambition.
 */
declare function createBindDeploymentConfig(config: IServerlessApiGatewayLoggingConfig, methodSettings?: IApiGatewayMethodSetting[]): {
    /** the service name */
    service: string;
    stage: IServerlessStage;
    /** custom domain name */
    domainName?: string | undefined;
    resources: {
        Resources: {
            PathMapping: {
                Type: string;
                DependsOn: string;
                Properties: {
                    BasePath?: string | undefined;
                    /**
                     * e.g., `${self:provider.stage}`
                     */
                    DomainName?: string | undefined;
                    RestApiId: {
                        /** default: `ApiGatewayRestApi` */
                        Ref: string;
                    };
                    /** default: `${self:provider.stage}` */
                    Stage: string;
                };
            };
            __deployment__: {
                Properties: {
                    Description: string;
                };
            };
            ApiGatewayStage: IApiGatewayStage;
            ApiGatewayStage2?: IApiGatewayStage | undefined;
            ApiGatewayStage3?: IApiGatewayStage | undefined;
            ApiGatewayStage4?: IApiGatewayStage | undefined;
            ApiGatewayStage5?: IApiGatewayStage | undefined;
        };
    };
};

interface IServerlessVpcConfig {
    securityGroupIds: string[];
    subnetIds: string[];
}

/**
 * The configuration for your serverless function.
 * The only required property is a "handler" property
 * pointing to the function definition itself and the
 * function to call within the file.
 */
declare type IServerlessFunction = IServerlessFunctionHandler | IServerlessFunctionImage;
interface IServerlessFunctionHandler extends IServerlessFunctionConfig {
    /**
     * the handler function in the form of "/path/to/file.HANDLER_FN" where
     * HANDLER_FN is typically "handler".
     *
     * Note: Cannot be used when `image` is defined.
     */
    handler: string;
}
interface IServerlessFunctionImage extends IServerlessFunctionConfig {
    /**
     * Image to be used by function, cannot be used when `handler` is defined.
     * It can be configured as concrete uri of Docker image in ECR or as a
     * reference to image defined in `provider.ecr.images`
     */
    image: string;
}
/**
 * A type guard to ensure the passed in serverless configuration defines a "handler"
 * rather than an "image".
 *
 * @param config a serverless configuration
 */
declare function isServerlessFunctionHandler(config: IServerlessFunction): config is IServerlessFunctionHandler;
/**
 * A type guard to ensure the passed in serverless configuration points to an
 * "image" rather than a "handler"
 *
 * @param config a serverless configuration
 */
declare function isServerlessFunctionImage(config: IServerlessFunction): config is IServerlessFunctionImage;
interface IServerlessFunctionConfig {
    /** optional, deployed Lambda name */
    name?: string;
    /** The description of your function. */
    description?: string;
    /**
     * the allocated "memory" of the virtual machine that will
     * run this function ... in reality is not only a proxy for
     * memory availability but also computational capability
     */
    memorySize?: ServerlessFunctionMemorySize;
    /**
     * Reserved concurrency limit for this function. By default, AWS uses account concurrency limit
     */
    reservedConcurrency?: number;
    /**
     * Count of provisioned lambda instances
     */
    provisionedConcurrency?: number;
    /**
     * Runtime for this specific function. Overrides the default which is set on the provider level.
     */
    runtime?: AWSRuntime;
    /** how many seconds before the function times out; overrides default set at provider level */
    timeout?: seconds;
    /** IAM role which will be used for this function */
    role?: string;
    /**
     * Optional SNS topic or SQS arn (Ref, Fn::GetAtt and Fn::ImportValue are supported as well)
     * which will be used for the DeadLetterConfig
     */
    onError?: arn;
    /**
     * Optional KMS key arn which will be used for encryption (overwrites the one defined on
     * the provider level)
     */
    kmsKeyArn?: arn;
    /**
     * Disables creation of CloudWatch Log Group
     */
    disableLogs?: boolean;
    /** Function level environment variables in key/value dictionary */
    environment?: Record<string, string>;
    /** Function level tags */
    tags?: Record<string, string>;
    /**
     * Optional VPC. But if you use VPC then both subproperties (securityGroupIds and subnetIds) are required
     */
    vpc?: IServerlessVpcConfig;
    /**
     * A functions X-Ray tracing configuration.
     *
     * **Pass Through:**
     * This is the default setting for all Lambda functions if you have added tracing permissions to your
     * function's execution role. This approach means the Lambda function is only traced if X-Ray has been
     * enabled on an upstream service, such as AWS Elastic Beanstalk.
     *
     * **Active:**
     * When a Lambda function has this setting, Lambda automatically samples invocation requests, based
     * on the sampling algorithm specified by X-Ray.
     */
    tracing?: "Active" | "Passthrough";
    package?: {
        artifact?: string;
        exclude?: string[];
        include?: string[];
    };
    /**
     * **aliasStage**
     *
     * If using the the [serverless-aws-alias](https://github.com/HyperBrain/serverless-aws-alias)
     * plugin then you can configure settings here.
     */
    aliasStage?: IApiGatewayAliasConfig;
    /**
     * Add AWS Layers to your function. You can refer to it either as
     * an ARN or a via [Cloudformation Reference](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-ref.html). A cloudformation reference
     * might look something like `{Ref:MyLambdaLayer}` whereas an ARN reference
     * is just a standard ARN string.
     *
     * **Note:** the layer will be accessible at `/opt/*`. If the layer you are using is in
     * `node_modules` then it is advisable to add the following to your function definition:
  ```typescript
  const fn: IServerlessFunction = {
    environment: {
      NODE_PATH: "/var/runtime/node_modules:/opt/node_modules"
    }
  }
  ```
     * as this will ensure that your layer's NPM modules are included in your path
     */
    layers?: IArnStringReference[] | ICloudformationReference[] | ILayerDefinition;
    /** add 'Condition' clause */
    condition?: any;
    /**
     * appends these additional resources to the 'DependsOn' list
     */
    dependsOn?: string[];
    /** destinations for async invocations */
    destinations?: {
        /**
         * function name or ARN of a target (externally managed lambda, EventBridge event bus,
         * SQS queue or SNS topic)
         */
        onSuccess?: arn;
        /**
         * function name or ARN of a target (externally managed lambda, EventBridge event bus,
         * SQS queue or SNS topic)
         */
        onFailure?: arn;
    };
    /** allows configuration of an EFS mount point */
    fileSystemConfig?: {
        /** ARN of EFS Access Point */
        arn: arn;
        /** path under which EFS will be mounted and accessible by Lambda function */
        localMountPath: string;
    };
    /**
     * The Events that trigger this Function
     */
    events?: IServerlessEvent[];
}
interface ICloudformationReference {
    Ref: string;
}
declare type IArnStringReference = string;

interface IServerlessLogging {
    /**
     * Optional configuration which specifies if API Gateway logs are used.
     * This can either be set to `true` to use defaults, or configured via subproperties.
     */
    restApi?: IRestApiLogging;
    /**
     * Optional configuration which specifies if Websocket logs are used.
     * This can either be set to `true` to use defaults, or configured
     * via subproperties
     */
    websocket?: IWebsocketLogging;
    httpApi?: IHttpApiLogging;
}
declare type IRestApiLogging = true | {
    /** Optional configuration which enables or disables access logging. Defaults to true */
    accessLogging?: boolean;
    /** Optional configuration which specifies the log format to use for access logging */
    format?: string;
    /** Optional configuration which enables or disables execution logging. Defaults to true. */
    executionLogging?: boolean;
    /**
     * Optional configuration which specifies the log level to use for execution logging.
     * May be set to either INFO or ERROR.
     */
    level?: "INFO" | "ERROR";
    /**
     * Optional configuration which specifies whether or not to log full requests/responses
     * for execution logging. Defaults to true.
     */
    fullExecutionData?: boolean;
    /**
     * Existing IAM role for ApiGateway to use when managing CloudWatch Logs. If 'role' is not
     * configured, a new role is automatically created.
     */
    role?: string;
    /**
     * Specifies whether the ApiGateway CloudWatch Logs role setting is not managed by Serverless.
     * Defaults to false.
     */
    roleManagedExternally?: boolean;
};
declare type IHttpApiLogging = true | {
    /**
     * Change the format of the logs being written to Cloudwatch. As an example, the
     * default format (which you get when setting to `true`) is:
     *
     * ```json
     * {
     *  "requestId":"$context.requestId",
     *  "ip": "$context.identity.sourceIp",
     *  "requestTime":"$context.requestTime",
     *  "httpMethod":"$context.httpMethod",
     *  "routeKey":"$context.routeKey",
     *  "status":"$context.status",
     *  "protocol":"$context.protocol",
     *  "responseLength":"$context.responseLength"
     * }
     * ```
     */
    format: JSONstring;
};
declare type IWebsocketLogging = true | {
    level: "INFO" | "ERROR";
};

interface IServerlessPackage {
    browser?: boolean;
    /** Specify the directories and files which should be included in the deployment package */
    include?: string[];
    /** Specify the directories and files which should be excluded in the deployment package */
    exclude?: string[];
    /**
     * Config if Serverless should automatically exclude dev dependencies in the deployment package.
     * Defaults to true
     */
    excludeDevDependencies?: boolean;
    /**
     * If you want to bundle the files yourself -- in the form of a ZIP file -- you can do so and then point
     * this configuration option to the file
     */
    artifact?: string | string[];
    /**
     * Enables individual packaging for each function. If true you must provide package for each
     * function. Defaults to _false_.
     */
    individually?: boolean;
}

/**
 * Allows overwriting the default IAM role or configuring a logical role
 */
declare type IServerlessIAMRole = 
/** Overwrite the default IAM role which is used for all functions */
string
/** allows configure a logical role */
 | {
    /** IAM Managed Policies, which allows to include the policies into IAM Role */
    managedPolicies?: string;
    /** ARN of an Permissions Boundary for the role. */
    permissionsBoundary?: string;
    /** IAM role statements so that services can be accessed in the AWS account */
    statements: IServerlessIamRolePolicy[];
};
declare type IServerlessIamRolePolicy = {
    Effect: "Allow" | "Deny";
    /** A list of scopes (such as "s3:ListBucket" or "states:ListStateMachines") which are being allowed/denied */
    Action: string[];
    /** A list of resources (aka, arn's) which are to receive this role grant */
    Resource: string[] | any;
};

interface IServerlessProvider {
    /** The name of your service. This name will be the prefix for all your functions  */
    name: string;
    runtime?: AWSRuntime;
    /** this refers to the AWS profile in your ~/aws/credentials file */
    profile?: string;
    /** Service wide environment variables */
    environment?: Record<string, scalar> | string;
    /** Set the default stage used. Default is "dev". */
    stage?: "dev" | "test" | "prod" | string;
    /** Set the default region. Default is "us-east-1". */
    region?: string;
    /** Set the default RetentionInDays for a CloudWatch LogGroup. */
    logRetentionInDays?: number;
    /** Set the default memory size; default is 1024 */
    memorySize?: ServerlessFunctionMemorySize;
    /** KMS key arn which will be used for encryption for all functions */
    kmsKeyArn?: string;
    deploymentBucket?: IServerlessDeploymentBucket;
    deploymentPrefix?: "serverless" | string;
    lambdaHashingVersion?: "20201221" | string;
    ecr?: {
        images: Record<string, IServerlessEcr>;
    };
    /** optionally add a dictionary of cloudfront cache policies */
    cloudFront?: Record<string, IServerlessCloudfrontCachePolicy>;
    /** Optional function versioning */
    versionFunctions?: boolean;
    usagePlan?: IServerlessUsagePlan;
    /** default is EDGE */
    endpointType?: "REGIONAL" | "EDGE";
    /** Optional API Gateway global config */
    apiGateway?: any;
    alb?: {
        targetGroupPrefix?: string;
        authorizers?: Record<string, IServerlessAuthorizer>;
    };
    httpApi?: {
        id?: string;
        name?: string;
        payload?: "1.0" | "2.0";
        cors?: boolean | IHttpApiCors;
        authorizers?: Record<string, IServerlessJwtAuthorizer>;
    };
    /** Optional CF stack tags */
    stackTags?: Record<string, string>;
    iam?: {
        /** Allows overwriting the default IAM role or configuring a logical role */
        role?: IServerlessIAMRole;
        /** ARN of an IAM role for CloudFormation service. If specified, CloudFormation uses the role's credentials */
        deploymentRole?: string;
    };
    /**
     * Optional CF stack policy. The example below allows updates to all resources except
     * deleting/replacing EC2 instances (use with caution!)
     */
    stackPolicy?: Array<{
        Effect: "Allow" | "Deny";
        Principle: string;
        Action: string | string[];
        Resource: string | string[];
        Condition?: any;
    }>;
    /** if you use VPC then both subproperties (securityGroupIds and subnetIds) are required */
    vpc?: IServerlessVpcConfig;
    /**
     * List of existing Amazon SNS topics in the same region where notifications about stack events
     * are sent.
     */
    notificationArns?: string[];
    /**
     * optional Key/Value dictionary of stack parameters
     */
    stackParameters?: Record<string, string>;
    rollbackConfiguration?: {
        MonitoringTimeInMinutes: minutes;
        RollbackTriggers: Array<{
            Arn: arn;
            Type: "AWS::CloudWatch::Alarm" | string;
        }>;
    };
    /** Optional service wide function tags */
    tags?: Record<string, string>;
    tracing?: boolean | {
        /** Optional, can be true (true equals 'Active'), 'Active' or 'PassThrough' */
        lambda?: boolean;
        apiGateway?: boolean;
    };
    iamRoleStatements?: any[];
    logs?: {
        restApi?: IRestApiLogging;
        websocket?: IWebsocketLogging;
        httpApi?: IHttpApiLogging;
        /** Optional, whether to write CloudWatch logs for custom resource lambdas as added by the framework */
        frameworkLambda?: boolean;
    };
}
interface IServerlessDeploymentBucket {
    blockPublicAccess?: boolean;
    skipPolicyStep?: boolean;
    name?: string;
    maxPreviousDeploymentArtifacts?: number;
    serverSideEncryption?: "AES256" | string;
    sseKMSKeyId?: string;
    sseCustomerKeyMD5?: "md5sum" | string;
    tags?: string[];
}
interface IServerlessCloudfrontCachePolicy {
    DefaultTTL?: number;
    MinTTL?: number;
    MaxTTL?: number;
    Comment?: string;
    ParametersInCacheKeyAndForwardedToOrigin?: {
        CookiesConfig?: {
            CookiesBehavior: "whitelist" | "allExcept" | "all" | "none";
            Coookies: string[];
        };
        EnableAcceptEncodingBrotli?: boolean;
        EnableAcceptEncodingGzip?: boolean;
        HeadersConfig?: {
            HeadersBehavior: "none" | "whitelist";
            Headers: string[];
        };
        QueryStringsConfig?: {
            QueryStringBehavior: "allExcept" | "whitelist" | "all" | "none";
            QueryStrings: string[];
        };
    };
}
declare type IServerlessEcr = {
    /** Image uri of existing Docker image in ECR */
    uri: string;
} | {
    /** Path to Docker context that will be used when building that image locally */
    path: string;
    /** Name of Dockerfile that should be used when building image locally. Equal to 'Dockerfile' by default */
    file: string;
};
interface IServerlessUsagePlan {
    quota?: {
        limit: number;
        offset?: number;
        period: "MONTH" | "WEEK" | "DAY";
    };
    throttle?: {
        burstLimit?: number;
        rateLimit?: number;
    };
}

interface IServerlessResources {
    Resources: IDynamoDbTableResource | Record<string, IServerlessResource>;
    extensions?: any;
    Outputs?: Record<string, IServerlessOutput>;
}
/**
 * A generic representation of a _resource_ for CloudFormation
 */
interface IServerlessResource {
    Type: string;
    Properties: Record<string, any>;
}
interface IServerlessOutput {
    Description?: string;
    /**
     * Example:
     *
     * ```yaml
     * Value:
     *  'Fn::GetAtt': [userTable, Arn]
     * ```
     */
    Value: any;
    Export: {
        /**
         *  see Fn::ImportValue to use in other services and
         * [https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/outputs-section-structure.html](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/outputs-section-structure.html)
         * for documentation on use.
         */
        Name: string;
    };
}

interface IServerlessStepFunctions {
    stateMachines: Record<string, IStateMachine>;
}
/** of the format of arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-FUNCTION */
declare type AwsFunctionArn = string;
declare type StepFunctionBuiltinStates = "States.Timeout" | "States.ALL" | "States.TaskFailed" | "States.Permissions";
interface IStateMachine {
    /** To declare an express workflow, specify type as _EXPRESS_ */
    type?: "STANDARD" | "EXPRESS";
    /**
     * There are some practical cases when you would like to prevent state machine from
     * deletion on stack delete or update. This can be achieved by adding retain property
     * to the state machine section.
     */
    retain?: boolean;
    /**
     * Disables the generation of outputs in the CloudFormation Outputs section. If you
     * define many state machines in serverless.yml you may reach the CloudFormation limit
     * of 60 outputs. If you define noOutput: true then this plugin will not generate outputs
     * automatically.
     */
    noOutput?: boolean;
    /**
     * To implement a blue-green deployment with Step Functions you need to reference the
     * exact versions of the functions. To do this, you can specify `useExactVersion: true`
     * in the state machine.
     */
    useExactVersion?: boolean;
    /**
     * By default, your state machine definition will be validated during deployment by StepFunctions.
     * This can be cumbersome when developing because you have to upload your service for every typo
     * in your definition. In order to go faster, you can enable pre-deployment validation using
     * asl-validator which should detect most of the issues (like a missing state property).
     */
    validate?: boolean;
    /** the name of the function; can include variables like ${opt:stage} */
    name?: string;
    /** Schedule or HTTP events which trigger the step function */
    events?: IServerlessEvent[];
    /** optionally override the default role used to execute this step-function */
    role?: string;
    /** The definition of the State Machine */
    definition: IStepFunction;
    /** Defines what execution history events are logged and where they are logged. */
    loggingConfig?: StepFunctionLoggingConfig;
    alarms?: {
        topics: IStepFunctionAlarmTopics;
        metrics: StepFunctionMetric[];
        treatMissingData?: StepFunctionMissingDataTreatment;
    };
    /**
     * You can monitor the execution state of your state machines via CloudWatch Events. It allows
     * you to be alerted when the status of your state machine changes to ABORTED, FAILED, RUNNING,
     * SUCCEEDED or TIMED_OUT.
     *
     * You can configure different notification targets for each type of status change.
     */
    notifications?: {
        ABORTED?: arn[];
        FAILED?: arn[];
        RUNNING?: arn[];
        SUCCEEDED?: arn[];
        TIMED_OUT?: arn[];
    };
    /**
     * You can enable X-Ray for your state machine, by specifing tracingConfig as shown below.
     */
    tracingConfig?: {
        enabled: boolean;
    };
}
/** Defines what execution history events are logged and where they are logged. */
interface StepFunctionLoggingConfig {
    /** Defines which category of execution history events are logged. */
    level?: "ALL" | "ERROR" | "INFO";
    /** Determines whether execution data is included in your log. When set to `FALSE`, data is excluded.  */
    includeExecutionData?: boolean;
    /** An array of objects that describes where your execution history events will be logged. Limited to size 1. Required, if your log level is not set to `OFF`. */
    destinations: string[];
}
/**
 * Ways in which missing data can be treated.
 *
 * [Official Docs](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/AlarmThatSendsEmail.html#alarms-and-missing-data)
 */
declare enum StepFunctionMissingDataTreatment {
    /** The alarm does not consider missing data points when evaluating whether to change state. */
    missing = "missing",
    /** The current alarm state is maintained. */
    ignore = "ignore",
    /** Missing data points are treated as breaching the threshold. */
    breaching = "breaching",
    /** Missing data points are treated as being within the threshold. */
    notBreaching = "notBreaching"
}
interface IStepFunctionAlarmTopics {
    ok?: arn;
    alarm?: arn;
    insufficientData?: arn;
}
/**
 * Metrics
 */
declare type StepFunctionMetric = "executionsTimedOut" | "executionsFailed" | "executionsAborted" | "executionThrottled" | "executionsSucceeded";
interface IStepFunction {
    /** Prose description of what this Step is about */
    Comment?: string;
    /** A pointer to one of the defined states in the States block which will be the starting point for execution */
    StartAt: string;
    /** The available states to this state machine */
    States: IDictionary<IStepFunctionStep>;
}
/** A generic type that allows for any of the various types of state to be applied */
declare type IStepFunctionStep<T = IDictionary> = IStepFunctionTask<T> | IStepFunctionChoice<T> | IStepFunctionWait<T> | IStepFunctionParallel<T> | IStepFunctionMap<T> | IStepFunctionPass<T> | IStepFunctionFail | IStepFunctionSucceed;
declare type IStepFunctionType = "Task" | "Wait" | "Parallel" | "Map" | "Choice" | "Succeed" | "Fail" | "Pass";
interface IStepFunctionBaseState {
    Type: IStepFunctionType;
    /** A human readable description of the state */
    Comment?: string;
}
interface IStepFunctionBaseWithPathMapping extends IStepFunctionBaseState {
    /** A path that selects a portion of the state's input to be passed to the state's task for processing. If omitted, it has the value $ which designates the entire input. For more information, see Input and Output Processing). */
    InputPath?: string;
    /** A path that selects a portion of the state's input to be passed to the state's output. If omitted, it has the value $ which designates the entire input. For more information, see Input and Output Processing. */
    OutputPath?: string;
}
interface IStepFunctionTask<T = IDictionary> extends IStepFunctionBaseWithPathMapping {
    Type: "Task";
    /** string of the format arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-FUNCTION_NAME */
    Resource: AwsFunctionArn;
    /** A string that must exactly match one of the state machine's state names. */
    Next?: keyof T;
    /** A path which determines what is sent as input to the state specified by the Next field. */
    ResultPath?: string;
    Parameters?: IDictionary;
    End?: true;
    Retry?: IStepFunctionRetrier[];
    Catch?: IStepFunctionCatcher[];
    /** If the task runs longer than the specified seconds, then this state fails with a States.Timeout Error Name. Must be a positive, non-zero integer. If not provided, the default value is 99999999. */
    TimeoutSeconds?: number;
    /** If more time than the specified seconds elapses between heartbeats from the task, then this state fails with an States.Timeout Error Name. Must be a positive, non-zero integer less than the number of seconds specified in the TimeoutSeconds field. If not provided, the default value is 99999999. */
    HeartbeatSeconds?: number;
}
interface IStepFunctionChoice<T = IDictionary> extends IStepFunctionBaseState {
    Type: "Choice";
    Choices: IStepFunctionChoiceItem<T>[];
    /** The name of the state to transition to if none of the transitions in Choices is taken. */
    Default?: keyof T;
}
declare type IStepFunctionChoiceItem<T> = Partial<IStepFunctionOperand> & IStepFunctionComplexChoiceItem<T>;
interface IStepFunctionComplexChoiceItem<T> extends IStepFunctionBaseChoice<T> {
    And?: IStepFunctionOperand[];
    Or?: IStepFunctionOperand[];
    Not?: IStepFunctionOperand;
    /** the next state to move to when completed with this one */
    Next?: keyof T;
    /** the step-function should stop at this step */
    End?: boolean;
}
declare type IStepFunctionOperand = IStepFunctionOperand_StringEquals | IStepFunctionOperand_BooleanEquals | IStepFunctionOperand_StringGreaterThan | IStepFunctionOperand_StringGreaterThanEquals | IStepFunctionOperand_StringLessThan | IStepFunctionOperand_StringLessThanEquals | IStepFunctionOperand_NumericEquals | IStepFunctionOperand_NumericGreaterThan | IStepFunctionOperand_NumericGreaterThanEquals | IStepFunctionOperand_NumericLessThan | IStepFunctionOperand_NumericLessThanEquals;
interface IStepFunctionOperand_BooleanEquals extends IStepFunctionBaseLogicalOperand {
    /** compare the value passed in -- and scoped by "Variable" -- to be equal to a stated string */
    BooleanEquals?: boolean;
}
interface IStepFunctionOperand_StringEquals extends IStepFunctionBaseLogicalOperand {
    /** compare the value passed in -- and scoped by "Variable" -- to be equal to a stated string */
    StringEquals?: string;
}
interface IStepFunctionOperand_StringGreaterThan extends IStepFunctionBaseLogicalOperand {
    /** compare the value passed in -- and scoped by "Variable" -- to be equal to a stated string */
    StringGreaterThan?: string;
}
interface IStepFunctionOperand_StringGreaterThanEquals extends IStepFunctionBaseLogicalOperand {
    /** compare the value passed in -- and scoped by "Variable" -- to be equal to a stated string */
    StringGreaterThanEquals?: string;
}
interface IStepFunctionOperand_StringLessThan extends IStepFunctionBaseLogicalOperand {
    /** compare the value passed in -- and scoped by "Variable" -- to be equal to a stated string */
    StringLessThan?: string;
}
interface IStepFunctionOperand_StringLessThanEquals extends IStepFunctionBaseLogicalOperand {
    /** compare the value passed in -- and scoped by "Variable" -- to be equal to a stated string */
    StringLessThanEquals?: string;
}
interface IStepFunctionOperand_NumericEquals extends IStepFunctionBaseLogicalOperand {
    /** compare the value passed in -- and scoped by "Variable" -- to be numerically equal to a stated number */
    NumericEquals?: number;
}
interface IStepFunctionOperand_NumericGreaterThan extends IStepFunctionBaseLogicalOperand {
    /** compare the value passed in -- and scoped by "Variable" -- to be numerically equal to a stated number */
    NumericGreaterThan?: number;
}
interface IStepFunctionOperand_NumericGreaterThanEquals extends IStepFunctionBaseLogicalOperand {
    /** compare the value passed in -- and scoped by "Variable" -- to be numerically equal to a stated number */
    NumericGreaterThanEquals?: number;
}
interface IStepFunctionOperand_NumericLessThan extends IStepFunctionBaseLogicalOperand {
    /** compare the value passed in -- and scoped by "Variable" -- to be numerically equal to a stated number */
    NumericLessThan?: number;
}
interface IStepFunctionOperand_NumericLessThanEquals extends IStepFunctionBaseLogicalOperand {
    /** compare the value passed in -- and scoped by "Variable" -- to be numerically equal to a stated number */
    NumericLessThanEquals?: number;
}
interface IStepFunctionBaseLogicalOperand {
    /** points to the specific area of context which is being evaluated in the choice */
    Variable: string;
}
interface IStepFunctionBaseChoice<T> {
    /** the next state to move to when completed with this one */
    Next?: keyof T;
    /** the step-function should stop at this step */
    End?: boolean;
}
interface IStepFunctionWait<T = IDictionary> extends IStepFunctionBaseState {
    Type: "Wait";
    /** A time, in seconds, to wait before beginning the state specified in the Next field. */
    Seconds?: number;
    /** An absolute time to wait until before beginning the state specified in the Next field. Timestamps must conform to the RFC3339 profile of ISO 8601, with the further restrictions that an uppercase T must separate the date and time portions, and an uppercase Z must denote that a numeric time zone offset is not present, for example, 2016-08-18T17:33:00Z.*/
    Timestamp?: datetime;
    /** A time, in seconds, to wait before beginning the state specified in the Next field, specified using a path from the state's input data. */
    SecondsPath?: string;
    /** An absolute time to wait until before beginning the state specified in the Next field, specified using a path from the state's input data. */
    TimestampPath?: string;
    /** The next defined "state" to execute after waiting */
    Next: keyof T;
}
interface IStepFunctionSucceed extends IStepFunctionBaseState {
    Type: "Succeed";
}
interface IStepFunctionPass<T = IDictionary> extends IStepFunctionBaseState {
    Type: "Pass";
    /** Treated as the output of a virtual task to be passed on to the next state, and filtered as prescribed by the ResultPath field (if present). */
    Result?: any;
    /** Specifies where (in the input) to place the "output" of the virtual task specified in Result. The input is further filtered as prescribed by the OutputPath field (if present) before being used as the state's output. */
    ResultPath?: string;
    Next: keyof T;
}
interface IStepFunctionFail extends IStepFunctionBaseState {
    Type: "Fail";
    Error?: string;
    Cause?: string;
}
interface IStepFunctionParallel<T = IDictionary> extends IStepFunctionBaseState {
    Type: "Parallel";
    Branches: IStepFunctionParallelBranch[];
    Next?: keyof T;
    End?: true;
    /** An array of objects, called Retriers that define a retry policy in case the state encounters runtime errors. */
    Retry?: string[];
    Catch?: IStepFunctionCatcher[];
}
interface IStepFunctionMap<T = IDictionary> extends IStepFunctionBaseWithPathMapping {
    Type: "Map";
    /**
     * The `ItemsPath` field’s value is a reference path identifying where in the effective input the array field is found.
     *
     * States within an `Iterator` field can only transition to each other, and no state outside the `ItemsPath` field can transition to a state within it.
     * If any iteration fails, entire Map state fails, and all iterations are terminated.
     */
    ItemsPath?: string;
    Parameters?: IDictionary;
    ResultPath?: string;
    /** The `Iterator` field’s value is an object that defines a state machine which will process each element of the array.  */
    Iterator: {
        StartAt: string;
        States?: IDictionary<IStepFunctionStep>;
    };
    /** The `MaxConcurrency`field’s value is an integer that provides an upper bound on how many invocations of the Iterator may run in parallel. For instance, a `MaxConcurrency` value of 10 will limit your Map state to 10 concurrent iterations running at one time. */
    MaxConcurrency?: number;
    /** A string that must exactly match one of the state machine's state names. */
    Next?: keyof T;
    /** Designates this state as a terminal state (ends the execution) if set to true. There can be any number of terminal states per state machine. Only one of Next or End can be used in a state. Some state types, such as Choice, don't support or use the End field.  */
    End?: true;
    /** An array of objects, called Retriers that define a retry policy in case the state encounters runtime errors. */
    Retry?: string[];
    Catch?: IStepFunctionCatcher[];
}
interface IStepFunctionParallelBranch {
    StartAt: string;
    States?: IDictionary<IStepFunctionStep>;
}
interface IStepFunctionCatcher<T = IDictionary> {
    /** A non-empty array of Strings that match Error Names, specified exactly as with the Retrier field of the same name. */
    ErrorEquals: string[];
    /** A string which must exactly match one of the state machine's state names. */
    Next: keyof T;
    /** A path which determines what is sent as input to the state specified by the Next field. */
    ResultPath?: string;
}
interface IStepFunctionRetrier {
    /** A non-empty array of Strings that match error names, specified exactly as they are with the retrier field of the same name. */
    ErrorEquals: string[];
    /** An integer that represents the number of seconds before the first retry attempt (default 1). */
    IntervalSeconds?: number;
    /** A number that is the multiplier by which the retry interval increases on each attempt (default 2.0). */
    BackoffRate?: number;
    /** A positive integer, representing the maximum number of retry attempts (default 3). If the error recurs more times than specified, retries cease and normal error handling resumes. A value of 0 is permitted and indicates that the error or errors should never be retried. */
    MaxAttempts?: number;
}

/**
 * The data structure of a `serverless.yml` file converted to
 * typescript.
 */
interface IServerlessYaml<T = IServerlessConfigCustom> extends IServerlessRootConfig {
    package: IServerlessPackage;
    custom?: T;
    plugins?: string[];
    provider: IServerlessProvider;
    resources?: IServerlessResources;
    functions?: Record<string, IServerlessFunction>;
    stepFunctions?: {
        stateMachines: Record<string, IStateMachine>;
        activities?: string[];
    };
    layers?: IArnStringReference[] | ICloudformationReference[] | ILayerDefinition;
    logs?: IServerlessLogging;
    tracing?: IServerlessTracing;
}
interface IServerlessRootConfig {
    service: string | {
        name: string;
    };
    /** the major version of the serverless framework being used; defaults to 2 */
    frameworkVersion?: 1 | 2;
    /**
     * Modes for config validation. `error` throws an exception, `warn` logs error to console,
     * `off` disables validation at all. The default is warn.
     */
    configValidationMode?: "error" | "warn" | "off";
    /**
     * If set to 'true', guarantees that it's a locally (for service, in its node_modules) installed
     * framework which processes the command
     */
    enableLocalInstallationFallback?: boolean;
    /**
     * If set to 'true', environment variables will be automatically loaded from .env files
     */
    useDotenv?: boolean;
    /**
     * To crash on variable resolution errors (as coming from new resolver),
     * set this value to "20210219".
     */
    variablesResolutionMode?: null | "20210219";
    /**
     * If set to 'error', references to variables that cannot be resolved will result in an error
     * being thrown (applies to legacy resolver)
     */
    unresolvedVariablesNotificationMode?: "warn" | "error";
    /** Disable deprecation logs by their codes. Default is empty. */
    disableDeprecations?: undefined | "DEP_CODE_1" | "*";
}
/**
 * This string should follow its format and it will be used to populate values read from yaml file
 */
declare type YamlExpression<T extends string = string> = `$\{${string}${T}${string}\}`;

/**
 * In it's most basic form, an HTTP API can be
 * defined simply by a string. Examples include:
 *
 * ```typescript
 * functions: {
 *   foobar: {
 *    handler: 'foobar.handler',
 *    events: {
 *      httpApi: "PATCH /foobar"
 *     }
 *   }
 * }
 *
 * For more information see the [**Serverless** docs](https://serverless.com/framework/docs/providers/aws/events/http-api/#http-api)
 * ```
 */
declare type IHttpApiSimple = string;
/**
 * Beyond the simple string based signature, an HTTP API can be defined by a more
 * complex format which might look something like:
 *
 * ```typescript
 * const fns:  = functions: {
 *   foobar: {
 *    handler: 'foobar.handler',
 *    events: {
 *      httpApi: {
 *        method: 'GET',
 *        path: '/my/endpoint/{id}',
 *        cors: true
 *      }
 *     }
 *   }
 * }
 * ```
 *
 * For more information see the [**Serverless** docs](https://serverless.com/framework/docs/providers/aws/events/http-api/#http-api)
 */
interface IHttpApiComplex {
    /** the RESTful verb or the `*` wildcard character for _catch-alls_ */
    method: RestMethod | "*";
    /**
     * the path to the endpoint; this can include use of `{` / `}` characters to represent
     * dynamic segments
     */
    path: string;
    /**
     * Setting to `true` turns on the _default_ configuration ( see
     * [docs](https://serverless.com/framework/docs/providers/aws/events/http-api#cors-setup) );
     * you can also set this manually with finer resolution, for instance:
     *
     *
     */
    cors?: boolean | IHttpApiCors;
    /** add a custom authorizer for the endpoint */
    authorizer?: IHttpApiAuthorizer;
    /**
     * Turn on access logging for a given endpoint.
     *
     * > **Note:** if you want to configure the logs then you should
     * refer to the `IHttpApiLogging` type and configure this in the
     * **provider** section.
     */
    logs?: boolean;
}
/**
 * If you want to take control over your CORs configuration
 * (versus just accepting the default config) you can use this
 * interface. For more info see the [docs](https://serverless.com/framework/docs/providers/aws/events/http-api#cors-setup)
 */
interface IHttpApiCors {
    allowedOrigins?: string[] | YamlExpression;
    allowedHeaders?: string[];
    allowedMethods?: RestMethod[];
    allowCredentials?: boolean;
    exposedResponseHeaders?: string[];
    maxAge?: seconds;
}
interface IHttpApiAuthorizer {
    name: string;
    scopes?: string[];
}

interface IServerlessEvent {
    /**
     * Sets up a time based event trigger to run the function
     */
    schedule?: IServerlessEventScheduleLongForm | IServerlessEventScheduleShortForm;
    /**
     * creates a API endpoint using API-Gateway's **REST API**
     *
     * > Note: in many cases now you should consider whether using the HTTP API is
     * a better optoin. This options can be configured off of the `httpApi` property.
     * For more on the two options see: [Comparison of REST versus HTTP API's](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-vs-rest.html)
     */
    http?: IServerlessEventHttp;
    /**
     * creates an API endpoint using API-Gateway's **HTTP API**. You may use either the simple
     * or more complex signature:
     *
     * - `IHttpApiSimple` - _a single string signature_
     * - `IHttpApiComplex` - _a structured configuration with more options_
     *
     * > Note: this the **HTTP API** is in contrast to the older REST API which is in some areas more
     * functionally complete ... but in most cases the HTTP API is the better option. See
     * [Comparison of REST versus HTTP API's](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-vs-rest.html) for more details.
     */
    httpApi?: IHttpApiSimple | IHttpApiComplex;
    /**
     * Allows subscription (and optionally the creation of) an SNS topic.
     *
     * If defined with only a string, this string represents the name of an SNS topic
     * to be subscribed to and whenever this topic is called it triggers this function.
     * Note: if your name starts with "arn:" then it doesn't create the event but expects
     * it to exist.
     *
     * If you wish to more explicitly point to an existing SNS topic then you can
     * define with a hash like { arn: "<arn-descriptor>" }
     *
     * If you want to be more verbose about the definition of a new topic you can
     * define with a hash which provides the "topicName" and "displayName" properties.
     **/
    sns?: string | IServerlessEventExistingSNS | IServerlessEventVerboseSNS;
    sqs?: IServerlessSQSEvent;
    /** Sets a S3 Event as a Lambda trigger. */
    s3?: IServerlessEventS3;
    stream?: IServerlessStreamEvent;
    /**
     * Config for Kafka events
     */
    msk?: IServerlessKafkaEvent;
    alexaSkill?: {
        appId: string;
        enabled: boolean;
    };
    alexaSmartHome?: {
        appId: string;
        enabled: boolean;
    };
    iot?: IServerlessIotEvent;
    /**
     * Allow a cloudwatch event to trigger execution of a lambda function or a step-function
     *
     * [Serverless Docs](https://www.serverless.com/plugins/serverless-step-functions#cloudwatch-event),
     * [AWS Docs]()
     */
    cloudwatchEvent?: {
        event: ICloudWatchConfigEvent;
    };
    cloudwatchLog?: {
        logGroup?: string;
        filter?: string;
    };
    cognitoUserPool?: {
        pool?: any;
        trigger?: any;
        existing?: boolean;
    };
    alb?: {
        listenerArn?: arn;
        priority?: number;
        conditions?: Record<string, string>;
        healthcheck?: boolean | {
            path?: string;
            intervalSeconds?: seconds;
            timeoutSeconds?: seconds;
            healthyThresholdCount?: number;
            unhealthyThresholdCount?: number;
            matcher?: Record<string, string>;
        };
    };
    eventBridge?: {
        /** using the default AWS event bus. Example might be "rate(10 minutes)" */
        schedule: string;
        /** creating or reusing an existing event-bus */
        eventBus: string;
        pattern: Record<"source" | "detail-type" | "detail" | string, any>;
        inputTransformer: {
            inputPathsMap: Record<string, string>;
            inputTemplate: string;
        };
        input: Record<string, any>;
        inputPath: string;
    };
    cloudFront?: {
        eventType?: string;
        includeBody?: boolean;
        pathPattern?: string;
        /** a cache policy is defined with either a `name` or `id` but not both */
        cachePolicy?: {
            /** Refers to a Cache Policy defined in provider.cloudFront.cachePolicies */
            name: string;
        } | {
            /** Refers to any external Cache Policy id */
            id: string;
        };
        origin?: {
            DomainName?: string;
            OriginPath?: string;
            CustomOrginConfig?: Record<"OriginProtocolPolicy" | string, "match-viewer" | string>;
        };
    };
}
interface IServerlessIotEvent {
    name: string;
    description?: string;
    enabled?: boolean;
    sql: sql;
    sqlVersion?: "beta" | string | number;
}
interface IServerlessKafkaEvent {
    /** ARN of MSK Cluster */
    arn?: arn;
    /** name of Kafka topic to consume from */
    topic?: string;
    /** must be in 1-10000 range */
    batchSize?: number;
    startingPosition?: "LATEST" | "TRIM_HORIZON";
    /** true by default, can be used to disable event without deleting resource */
    enabled?: boolean;
}
interface IServerlessSQSEvent {
    arn?: arn;
    batchSize?: number;
    /** minimum is 0 and the maximum is 300 (seconds) */
    maxiumBatchingWindow?: seconds;
    enabled?: boolean;
}
interface IServerlessStreamEvent {
    arn?: arn;
    maximumRecordAgeInSeconds?: number;
    startingPosition?: "LATEST" | any;
    enabled?: boolean;
}
/** used to attach a function to a pre-existing  */
interface IServerlessEventExistingSNS {
    arn: string;
}
interface IServerlessEventVerboseSNS {
    topicName: string;
    displayName?: string;
}
interface IServerlessEventScheduleShortForm {
    /** in the format of rate(10 minutes) or cron(0 12 * * ? *) */
    schedule: string;
}
interface IServerlessEventScheduleLongForm {
    /** in the format of rate(10 minutes) or cron(0 12 * * ? *) */
    rate: string;
    enabled?: boolean;
    input?: IDictionary;
    inputPath?: string;
}
interface IServerlessEventS3 {
    bucket: string;
    event: IS3EventType;
    rules?: IS3Rule[];
    existing?: boolean;
}
interface IS3Rule {
    prefix?: string;
    suffix?: string;
}
declare type IS3EventType = "s3:ObjectCreated:*" | "s3:ObjectCreated:Put" | "s3:ObjectCreated:Post" | "s3:ObjectCreated:Copy" | "s3:ObjectCreated:CompleteMultipartUpload" | "s3:ObjectRemoved:*" | "s3:ObjectRemoved:Delete" | "s3:ObjectRemoved:DeleteMarkerCreated" | "s3:ObjectRestore:Post" | "s3:ObjectRestore:Completed" | "s3:ReducedRedundancyLostObject";
interface IServerlessEventHttp {
    /** HTTP method for this endpoint */
    method: "get" | "put" | "post" | "delete";
    /** Path for this endpoint */
    path: string;
    /** Turn on CORS for this endpoint, but don't forget to return the right header in your response */
    cors?: boolean;
    /**
     * Requires clients to add API keys values in the `x-api-key` header of their request
     */
    private?: boolean;
    /** An AWS API Gateway custom authorizer function */
    authorizer?: IServerlessHttpAuthorizer | IServerlessVariable;
    /** configure method request and integration request settings */
    request?: IServerlessRequest;
    /** not sure what other values can be set here */
    integration?: "lambda";
    statusCodes?: {
        [key: number]: IServerlessStatusCode;
    };
}

/**
 * @deprecated prefer `IServerlessYaml` over this
 */
declare type IServerlessConfig = IServerlessYaml;
/**
 * @deprecated the `common-types` repo is moving toward a zero implementation target
 * and this class does not fit the goals for this repo. Expect this to be removed in
 * the next release.
 *
 * **LambdaEventParser**
 *
 * Ensures that the _typed_ `request` is separated from a possible Proxy Integration
 * Request that would have originated from API Gateway; also returns the `apiGateway`
 * payload with the "body" removed (as it would be redundant to the request).
 *
 * Typical usage is:
 *
```typescript
const { request, apiGateway } = LambdaEventParser.parse(event);
```
 *
 * this signature is intended to mimic the `LambdaSequence.from(event)` API but
 * without the parsing of a `sequence` property being extracted.
 *
 */
declare class LambdaEventParser {
    /**
     * **parse**
     *
     * A static method which returns an object with both `request` and `apiGateway`
     * properties. The `request` is typed to **T** and the `apiGateway` will be a
     * `IAWSLambdaProxyIntegrationRequest` object with the "body" removed _if_
     * the event came from **API Gateway** otherwise it will be undefined.
     *
     * @deprecated `common-types` should not have run-time code out of a the exception
     * case of **enum** values and _type guards_.
     */
    static parse<T extends IDictionary = IDictionary>(event: T | IAwsLambdaProxyIntegrationRequest): T | {
        request: T;
        apiGateway: Omit$1<IAwsLambdaProxyIntegrationRequest, "body">;
    };
}
/**
 * @deprecated this incorrect spelling will be removed in favor of the
 * correct spelling and consistent use of caps. Going forward prefer `IAwsLambdaContext`.
 */
declare type IAWSLambaContext = IAwsLambdaContext;
/**
 * @deprecated use `IAwsApiGatewayResponse` instead.
 */
declare type IApiGatewayResponse = IAwsApiGatewayResponse;
/**
 * @deprecated use `IAwsLambdaProxyIntegrationRequestHeaders` instead.
 */
declare type IAWSLambdaProxyIntegrationRequestHeaders = IAwsLambdaProxyIntegrationRequestHeaders;
/**
 * @deprecated use `IAwsLambdaProxyIntegrationRequest` instead.
 */
declare type IAWSLambdaProxyIntegrationRequest = IAwsLambdaProxyIntegrationRequest;
/**
 * @deprecated use `IAwsLambdaProxyIntegrationRequest` instead.
 */
declare type IAWSLambdaProxyClientCert = IAwsLambdaProxyClientCert;
/**
 * @deprecated use `IAwsLambdaProxyJwtAuthorizer` instead.
 */
declare type IAWSLambdaProxyJwtAuthorizer = IAwsLambdaProxyJwtAuthorizer;
/**
 * @deprecated use `IAwsGatewayRequest` instead.
 */
declare type IAWSGatewayRequest = IAwsGatewayRequest;
/**
 * @deprecated use `IAwsApiGatewayErrorResponse` instead.
 */
declare type IApiGatewayErrorResponse = IAwsApiGatewayErrorResponse;
/**
 * @deprecated use `IAwsLayerVersion` instead.
 */
declare type IAWSLayerVersion = IAwsLayerVersion;
/**
 * @deprecated use `IAwsCloudWatchLogEvent` instead.
 */
declare type ICloudWatchLogEvent = IAwsCloudWatchLogEvent;
/** @deprecated this symbol should NOT be used; it was
 * included in the past when this package mistakenly
 * tried to take on error handling in a way that had
 * implementation details included.*/
interface IStackFrame {
    fn: string;
    line: number;
    col: number;
    filePath?: string;
    shortPath?: string;
    file: string;
}
/** @deprecated */
interface IParseStackOptions {
    /**
     * state text to look for in the function name or file
     * name and filter out if found
     */
    ignorePatterns?: string[];
    /**
     * optionally specify the max depth of the stack
     * trace you want
     */
    limit?: number;
}
/** @deprecated */
declare function parseStack(
/** the default stack trace string */
stack: string, options?: any): IStackFrame[];
/**
 * @deprecated the `common-types` repo is moving as close to zero config as we can and this function does not
 * fit with it's focus.
 *
 * **getBodyFromPossibleLambdaProxyRequest**
 *
 * Returns the message body/payload regardless of whether Lambda was called by API Gateway's LambdaProxy
 * or from another Lambda function.
 *
 * @param input either a [Lambda Proxy Request](https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-lambda-proxy-integrations.html)
 * or type `T` as defined by consumer
 * @return type of `T`
 */
declare function getBodyFromPossibleLambdaProxyRequest<T>(input: T | IAwsLambdaProxyIntegrationRequest): T;

/**
 * The ISO 2 letter standard for [country codes](https://www.iso.org/iso-3166-country-codes.html).
 *
 * You can find a full listing here: https://www.iso.org/obp/ui/#search
 */
declare type Iso3166 = "US" | "CA" | "MX" | "GB" | "DE" | "FR" | string;
/**
 * The ISO standard for country principle subdivisions; which
 * in the US is a State but could be a _provence_, _parish_, etc.
 *
 * > **Note:** we use _snake\_case_ instead of the standard ISO convension
 * of using _dasherization_.
 */
declare type Iso3166_2 = "US_CA" | "US_MI" | "US_AZ" | "US_NV" | string;
/**
 * The ISO 3 letter standard for country codes
 */
declare type Iso3166_Alpha3 = "USA" | string;
/**
 * A US Zipcode represented as a 5 digit sequence of number
 * but stored as a string to preserve leading zeros.
 */
declare type zip5 = string;
/**
 * A US Zipcode which is represented by a leading 5 digits,
 * a dash character, and then four more digits which bring
 * the resolution of the area down to a street level.
 *
 * Note: these are used for postal shipping to aid in precision
 * in the US but more often they are left off.
 */
declare type zip5_4 = string;

interface IGithubRepo {
    id: number;
    name: string;
    full_name: string;
    owner: IGithubUser;
    private: boolean;
    html_url: string;
    description: string;
    fork: boolean;
    url: string;
    forks_url: string;
    keys_url: string;
    collaborators_url: string;
    teams_urls: string;
    hooks_urls: string;
    issue_events_url: string;
    events_url: string;
    assignees_url: string;
    branches_url: string;
    tags_url: string;
    blobs_url: string;
    git_tags_url: string;
    git_refs_url: string;
    trees_url: string;
    statuses_url: string;
    languages_url: string;
    stargazers_url: string;
    contributors_url: string;
    subscribers_url: string;
    commits_url: string;
    git_commits_url: string;
    comments_url: string;
    issue_comment_url: string;
    contents_url: string;
    compare_url: string;
    merges_url: string;
    archive_url: string;
    downloads_url: string;
    issues_url: string;
    pulls_url: string;
    milestones_url: string;
    notifications_url: string;
    labels_url: string;
    releases_url: string;
    deployments_url: string;
    created_at: datetime;
    updated_at: datetime;
    pushed_at: datetime;
    git_url: string;
    ssh_url: string;
    clone_url: string;
    svn_url: string;
    homepage: string;
    size: number;
    stargazers_count: number;
    watchers_count: number;
    forks_count: number;
    language: string;
    has_issues: boolean;
    has_projects: boolean;
    has_downloads: boolean;
    has_wiki: boolean;
    has_pages: boolean;
    archived: boolean;
    mirrored_url: string;
    open_issues_count: number;
    license: {
        key: string;
        name: string;
        spdx_id: string;
        url: string;
    };
    organization: IGithubUser;
    network_count: number;
    subscribers_count: number;
    default_branch: string;
    open_issues: number;
    watchers: number;
    forks: number;
}
interface IGithubUser {
    login: string;
    id: number;
    company: string;
    bio: string;
    blog: string;
    location: string;
    avatar_url: string;
    gravatar_url: string;
    url: string;
    html_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    starred_url: string;
    subscriptions_url: string;
    organizations_url: string;
    repos_url: string;
    events_url: string;
    received_events_url: string;
    type: "User" | "Organization";
    site_admin: boolean;
}

interface IGithubCommit {
    url: string;
    sha: string;
    node_id: string;
    html_url: string;
    comments_url: string;
    commit: {
        url: string;
        author: {
            name: string;
            email: string;
            date: string;
        };
        committer: {
            name: string;
            email: string;
            date: string;
        };
        message: string;
        tree: {
            url: string;
            sha: string;
        };
        comment_count: number;
        verification: {
            verified: false;
            reason: string;
            signature: any;
            payload: any;
        };
    };
    author: IGithubUser;
    committer: IGithubUser;
    parents: {
        url: string;
        sha: string;
    };
}

interface IGithubEvent {
    id: string;
    type: GithubEventType;
    actor: {
        id: number;
        login: string;
        display_login: string;
        gravatar_id: string;
        url: string;
        avatar_url: string;
    };
    repo: {
        id: number;
        name: string;
        url: string;
    };
    payload: {
        push_id: number;
        size: number;
        distinct_size: number;
        ref: string;
        head: string;
        before: string;
        commits: IGithubEventCommit[];
    };
    public: boolean;
    created_at: string;
}
interface IGithubEventCommit {
    sha: string;
    author: {
        email: string;
        name: string;
    };
    message: string;
    distinct: boolean;
    url: string;
}
declare type GithubEventType = "CheckRunEvent" | "CheckSuiteEvent" | "CommitCommentEvent" | "CreateEvent" | "DeleteEvent" | "DeploymentEvent" | "DeploymentStatusEvent" | "DownloadEvent" | "FollowEvent" | "ForkEvent" | "ForkApplyEvent" | "GitHubAppAuthorizationEvent" | "GistEvent" | "GollumEvent" | "InstallationEvent" | "InstallationRepositoriesEvent" | "IssueCommentEvent" | "IssuesEvent" | "LabelEvent" | "MarketplacePurchaseEvent" | "MemberEvent" | "MembershipEvent" | "MilestoneEvent" | "OrganizationEvent" | "OrgBlockEvent" | "PageBuildEvent" | "ProjectCardEvent" | "ProjectColumnEvent" | "ProjectEvent" | "PublicEvent" | "PullRequestEvent" | "PullRequestReviewEvent" | "PullRequestReviewCommentEvent" | "PushEvent" | "ReleaseEvent" | "RepositoryEvent" | "RepositoryVulnerabilityAlertEvent" | "StatusEvent" | "TeamEvent" | "TeamAddEvent" | "WatchEvent";

interface IGithubRelease {
    url: string;
    html_url: string;
    assets_url: string;
    upload_url: string;
    tarball_url: string;
    zipball_url: string;
    id: number;
    node_id: string;
    tag_name: string;
    target_commitish: string;
    name: string;
    body: string;
    draft: boolean;
    prerelease: boolean;
    created_at: datetime;
    published_at: datetime;
    author: IGithubUser;
    assets: {
        url: string;
        browser_download_url: string;
        id: number;
        node_id: string;
        name: string;
        label: string;
        state: "uploaded" | string;
        content_type: "application/zip" | string;
        size: number;
        download_count: number;
        created_at: datetime;
        updated_at: datetime;
        uploader: IGithubUser;
    };
}

interface IGitHubWebhook_PushEvent {
    /**
     * The full Git ref that was pushed. Example: refs/heads/master.
     */
    ref: string;
    /**
     * The SHA of the most recent commit on ref before the push.
     */
    before: string;
    /**
     * The SHA of the most recent commit on ref after the push.
     */
    after: string;
    created: boolean;
    deleted: boolean;
    forced: boolean;
    base_ref?: any;
    compare: url;
    /**
     * An array of commit objects describing the pushed commits.
     * (The array includes a maximum of 20 commits. If necessary,
     * you can use the Commits API to fetch additional commits.
     * This limit is applied to timeline events only and isn't
     * applied to webhook deliveries.)
     */
    commits: IGithubCommit[];
    head_commit?: any;
    repository: IGithubRepo;
    pusher: {
        name: string;
        email: string;
    };
    sender: IGithubUser;
}
/** https://developer.github.com/webhooks/#events */
declare type GithubWebhookEvent = "push" | "pull_request" | "check_run" | "check_suite" | "commit_comment" | "create" | "delete" | "deployment" | "deployment_status" | "fork" | "github_app_authorization" | "gollum" | "installation" | "installation_repositories" | "issue_comment" | "issues" | "label" | "marketplace_purchase" | "member" | "membership" | "milestone" | "organization" | "org_block" | "page_build" | "project_card" | "project_column" | "project" | "public" | "pull_request_review_comment" | "pull_request_review" | "repository" | "repository_import" | "repository_volnerability_alert" | "release" | "status" | "team" | "team_add" | "watch";
interface IGithubWebhookCreate {
    name: "web";
    active: boolean;
    events: GithubWebhookEvent[];
    config: IGithubWebhookConfig;
}
interface IGithubWebhookConfig {
    /** The URL to which the payloads will be delivered. */
    url: string;
    /**
     * The media type used to serialize the payloads.
     * Supported values include json and form. The default
     * is form.
     */
    content_type?: "json" | "form";
    /** If provided, the secret will be used as the key to generate the HMAC hex digest value in the X-Hub-Signature header. */
    secret?: string;
    insecure_ssl?: 0;
}
interface IGithubWebhookSubscribe extends IGithubWebhookSubUnsub {
    mode: "subscribe";
}
interface IGithubWebhookUnsubscribe extends IGithubWebhookSubUnsub {
    mode: "unsubscribe";
}
interface IGithubWebhookSubUnsub {
    hub: {
        mode: "subscribe" | "unsubscribe";
        /** The URI of the GitHub repository to subscribe to. The path must be in the format of /:owner/:repo/events/:event. */
        topic: string;
        /** The URI to receive the updates to the topic. */
        callback: string;
        /** A shared secret key that generates a SHA1 HMAC of the outgoing body content. You can verify a push came from GitHub by comparing the raw request body with the contents of the X-Hub-Signature header. */
        secret?: string;
    };
}
/**
 * Triggered when an issue is assigned, unassigned, labeled,
 * unlabeled, opened, edited, milestoned, demilestoned, closed,
 * or reopened.
 */
interface IGitHubWebhook_IssuesEvent {
    action: "assigned" | "unassigned" | "labeled" | "unlabeled" | "opened" | "edited" | "milestoned" | "demilestoned" | "closed" | "reopened";
    issue: {
        url: string;
        respository_url: string;
        labels_url: string;
        comments_urls: string;
        html_url: string;
        id: number;
        node_id: string;
        number: number;
        title: string;
        user: IGithubUser;
        labels: {
            id: number;
            node_id: string;
            url: string;
            name: string;
            color: string;
            default: boolean;
        };
        state: "open" | string;
        locked: boolean;
        assignee?: any;
        assignees?: any[];
        milestone?: any;
        comments: number;
        created_at: datetime;
        updated_at: datetime;
        closed_at: datetime;
        author_association: "OWNER" | string;
        body: string;
    };
    changes: any;
    repository: IGithubRepo;
    sender: IGithubUser;
}
/**
 * Triggered when a user is added or removed as a collaborator
 * to a repository, or has their permissions changed.
 */
interface IGitHubWebhook_MemberEvent {
    action: "added" | "deleted" | "edited";
    member: IGithubUser;
    changes: IDictionary;
    repository: IGithubRepo;
    sender: IGithubUser;
}
/**
 * Triggered when a release is published.
 */
interface IGitHubWebhook_ReleaseEvent {
    action: "published";
    release: {
        url: string;
        assets_url: string;
        upload_url: string;
        html_url: string;
        id: number;
        node_id: string;
        tag_name: string;
        target_commitish: string;
        name?: string;
        draft: boolean;
        author: IGithubUser;
        prerelease: boolean;
        created_at: datetime;
        published_at: datetime;
        assets: any[];
        tarball_url: string;
        zipball_url: string;
        body?: string;
    };
    repository: IGithubRepo;
    sender: IGithubUser;
}
/**
 * Triggered when a repository is created, deleted, archived,
 * unarchived, made public, or made private. Organization hooks
 * are also triggered when a repository is deleted.
 */
interface IGitHubWebhook_RepositoryEvent {
    action: "created" | "deleted" | "archived" | "unarchived" | "publicized" | "privatized";
    repository: IGithubRepo;
    sender: IGithubUser;
}

declare type ImageFormat = "avif" | "dz" | "fits" | "gif" | "heif" | "jpg" | "magick" | "pdf" | "png" | "ppm" | "raw" | "svg" | "tiff" | "webp";
declare type WebImageFormat = Omit<ImageFormat, "fits" | "magick" | "ppm" | "raw" | "tiff">;
/**
 * A way of describing an image which has been optimized via the
 * _do-devops_ image optimization flow.
 */
interface IOptimizedImage {
    name: string;
    /** the relative path to the optimized image */
    path: string;
    /** the widths which the image has been optimized for */
    widths: number[];
    /** the image formats which have been generated */
    formats: WebImageFormat[];
    /** the native aspect ratio of the source image (e.g., width/height) */
    aspectRatio: number;
}

interface INetlifyRequestHeader {
    "content-type": string;
    "user-agent": string;
    "cache-control": "no-cache" | string;
    host: string;
    "accept-encoding": string;
    /** will look something like "en-GB,en-US;q=0.9,en;q=0.8" */
    "accept-language": string;
    connection: "keep-alive" | string;
    "content-length": numberAsString;
    /**
     * The Client's IP address; appears to report `::1` when
     * runnning in the "netlify dev" mode.
     */
    "client-ip": "::1" | "x.x.x.x" | string;
    "x-country": "US" | string;
    /** will look something like: `en,en,en;q=0.8` */
    "x-language": string;
    [key: string]: string;
}
interface INetlifyRequest extends Omit<IAwsLambdaProxyIntegrationRequest, "headers"> {
    queryStringParameters: Record<string, string | number | boolean>;
    headers: INetlifyRequestHeader;
}

interface INpmInfoRepository {
    type: "git" | string;
    /** looks like "git+https://github.com/organization/repo.git" for github */
    url: string;
}
interface INpmInfo {
    name: string;
    "dist-tags": INpmInfoDistTags;
    versions: string[];
    /** The timings for creation, last modified, and all taged releases */
    time: INpmInfoTime;
    maintainers: INpmInfoPerson[];
    description: string;
    homepage: string;
    keywords: string[];
    repository: string | INpmInfoRepository;
    author: string | INpmInfoPerson;
    license: "MIT" | string;
    readmeFilename: "README.md" | string;
    /** latest version published */
    version: string;
    /** code entry point for CJS */
    main?: string;
    /** code entry point for ES modules */
    module?: string;
    /** TS typings entry point */
    typings?: string;
    /** TS typings entry point */
    types?: string;
    type?: "module" | "commonjs";
    /**
     * binary executables this package exports; values are the
     * relative path to the file
     */
    bin: IDictionary<string>;
    /**
     * The scripts which are listed in the package.json
     */
    scripts: IDictionary<string>;
    dependencies: IDictionary<string>;
    devDependencies: IDictionary<string>;
    /** the `git` HEAD at time of last publish */
    gitHead: string;
    dist: INpmInfoDist;
    directories: IDictionary;
}
interface INpmInfoDistTags extends IDictionary<string> {
    latest: string;
}
/** type guard to distinguish an NPM repository representation */
declare function isNpmInfoRepository(repository: string | INpmInfoRepository): repository is INpmInfoRepository;
/**
 * named times and a time for each version `0.1.2`, etc
 */
interface INpmInfoTime extends IDictionary<Iso8601DateTime> {
    created: Iso8601DateTime;
    modified: Iso8601DateTime;
}
interface INpmInfoPerson {
    name: string;
    email?: string;
}
interface INpmInfoDist {
    integrity: string;
    shasum: string;
    tarball: url;
    fileCount: number;
    unpackedSize: number;
    "npm-signature": string;
}

/**
 * **Nullable**
 *
 * Allows properties `P` of a dictionary defined by `T` to be both
 * T[P] but also null. If you define `P` it will be which ever properties
 * you set as _nullable_ otherwise it will be all properties.
 *
 * ```ts
 * // all props on IProduct are nullable
 * type NullableProduct = Nullable<IProduct>;
 * // the `id` prop on IProduct is nullable; others remain as before
 * type NullableId = Nullable<IProduct, 'id'>;
 * ```
 *
 * > Note: this is a minor breaking change as of version `1.17.0` but
 * effectively offers a superset of functionality old variant.
 */
declare type Nullable<T, 
/** the props to add nullable to */
P extends keyof T = keyof T, TOmitted extends keyof Omit<T, P> = keyof Omit<T, P>> = {
    [key in P]: T[P] | null;
} & {
    [key in TOmitted]: T[TOmitted];
};

interface IPackageJsonPerson {
    name: string;
    email?: string;
    url?: string;
}
interface ExportBlock {
    import?: string;
    require?: string;
}
interface IPackageJson extends IDictionary {
    name: string;
    /**
     * If true, the package is considered private and pkg mgr will refuse to publish it regardless of the circumstances.
     * Setting this flag also unlocks some features that wouldn't make sense in published packages, such as workspaces.
     */
    private?: boolean;
    version: string;
    description?: string;
    keywords?: string[];
    homepage?: url;
    bugs?: {
        url: string;
        email: string;
    };
    /**
     * points to the TypeScript type file for the modules
     */
    typings: string;
    /**
     * points to the TypeScript type file for the modules
     * > **note:** the modern alternative to "typings"
     */
    types: string;
    /**
     * Indicates the module system exported; the default is _commonjs_
     */
    type?: "module" | "commonjs";
    exports?: Record<string, ExportBlock>;
    /** the full list of SPDX license IDs (https://spdx.org/licenses/) */
    license?: string;
    author?: IPackageJsonPerson;
    contributors?: IPackageJsonPerson[];
    /**
     * The optional "files" field is an array of file patterns that describes the entries to be included when your package is installed as a dependency. If the files array is omitted, everything except automatically-excluded files will be included in your publish. If you name a folder in the array, then it will also include the files inside that folder (unless they would be ignored by another rule in this section.).
     */
    files?: string[];
    /**
     * The main field is a module ID that is the primary entry point to your program. That is, if your package is named foo, and a user installs it, and then does require("foo"), then your main module's exports object will be returned. This is typically a module transpiled to CommonJS format.
     */
    main?: string;
    /**
     * The entrypoint for ES6/ES2015/etc. module formats
     */
    module?: string;
    /**
     * The entrypoint for browsers, typically in UMD module format.
     */
    browser?: string;
    /**
     * A lot of packages have one or more executable files that they'd like to install into the PATH. npm makes this pretty easy (in fact, it uses this feature to install the "npm" executable.)
     */
    bin?: any;
    man?: string | string[];
    directories?: {
        lib: string;
        bin: string;
        man: string;
        doc: string;
        example: string;
        test: string;
    };
    /** Specify the place where your code lives */
    repository?: string;
    /** The "scripts" property is a dictionary containing script commands that are run at various times in the lifecycle of your package. The key is the lifecycle event, and the value is the command to run at that point. */
    scripts?: IDictionary<string>;
    /** A "config" object can be used to set configuration parameters used in package scripts that persist across upgrades. */
    config?: {
        name: string;
        config: IDictionary<string>;
    };
    /**
     * This field lists some extra information related to the dependencies listed in the dependencies and devDependencies fields.
     * In the context of a workspaced project most of these settings will affect all workspaces and as such must be specified at
     * the root of the project (except if noted otherwise, the dependenciesMeta field will be ignored if found within a workspace).
     */
    dependenciesMeta?: {
        fsevents: {
            /**
             * If false, the package will never be built (deny-list). This behavior is reversed when the enableScripts yarnrc setting is toggled off
             * - when that happens, only packages with built explicitly set to true will be executed (allow-list), and those with built explicitly
             * set to false will simply see their build script warnings downgraded into simple notices.
             */
            built: boolean;
            /**
             * If true, the build isn't required to succeed for the install to be considered a success, and the dependency may be skipped if its os
             * and cpu fields don't match the current system architecture. It's what the optionalDependencies field compiles down to.
             */
            optional: boolean;
            /**
             * If true, the specified package will be automatically unplugged at install time. This should only be needed for packages that contain
             * scripts in other languages than Javascript (for example nan contains C++ headers).
             */
            unplugged: boolean;
        };
        [key: string]: unknown;
    };
    dependencies?: IDictionary<string>;
    /** If someone is planning on downloading and using your module in their program, then they probably don't want or need to download and build the external test or documentation framework that you use. */
    devDependencies?: IDictionary<string>;
    /** In some cases, you want to express the compatibility of your package with a host tool or library, while not necessarily doing a require of this host. This is usually referred to as a plugin. Notably, your module may be exposing a specific interface, expected and specified by the host documentation. */
    peerDependencies?: IDictionary<string>;
    /** This field lists some extra information related to the dependencies listed in the peerDependencies field. */
    peerDepedenciesMeta?: {
        "react-dom": {
            /** If true, the selected peer dependency will be marked as optional by the package manager and the consumer omitting it won't be reported as an error. */
            optional: boolean;
        };
        [key: string]: unknown;
    };
    /** This defines an array of package names that will be bundled when publishing the package. */
    bundledDependencies?: string[];
    /** If a dependency can be used, but you would like npm to proceed if it cannot be found or fails to install, then you may put it in the optionalDependencies object. This is a map of package name to version or url, just like the dependencies object. The difference is that build failures do not cause installation to fail. */
    optionalDependencies?: IDictionary<string>;
    /** You can specify the version of node that your stuff works on */
    engines?: IDictionary<string>;
    /** You can specify which operating systems your module will run on */
    os?: string[];
    cpu?: string[];
    /**
     * **eslint** lets you configure settings in the package.json
     */
    eslintConfig?: IDictionary;
}

declare enum ExifCompression {
    Uncompressed = 1,
    CCITT = 2,
    T4Group3Fax = 3,
    T6Group3Fax = 4,
    LZW = 5,
    JpgOldStyle = 6,
    Jpg = 7,
    AdobeDeflate = 8,
    JBigBw = 9,
    JBigColor = 10,
    JpegAlt = 99,
    Kodak262 = 262,
    Next = 32766,
    SonyRawCompressed = 32767,
    PackedRaw = 32769,
    SamsungSrwCompressed = 32770,
    CCIRLEW = 32771,
    SamsungSrwCompressed2 = 32772,
    Packbits = 32773,
    Thunderscan = 32809,
    KodakKdcCompressed = 32867,
    IT8CTPAD = 32895,
    IT8LW = 32896,
    IT8MP = 32897,
    IT8BL = 32898,
    PixarFilm = 32908,
    PixarLog = 32909,
    Deflate = 32946,
    DCS = 32947,
    AperioJpeg2000YCbCr = 33003,
    AperioJpeg2000RGB = 33005,
    JBig = 34661,
    SGILog = 34676,
    SGILog24 = 34677,
    Jpeg2000 = 34712,
    NikonNEFCompressed = 34713,
    JBig2TiffFx = 34715,
    MicrosoftBinaryLevelCodec = 34718,
    MicrosoftProgressiveTransformCodec = 34719,
    MicrosoftVector = 34720,
    ESRCLerc = 34887,
    LossyJpeg = 34892,
    LZMA2 = 34925,
    Zstd = 34926,
    WepP = 34927,
    PNG = 34933,
    JpegXR = 34934,
    KodakDCRCompressed = 65000,
    PentaxPEFCompressed = 65535
}
declare enum ExifLightSource {
    Unknown = 0,
    Daylight = 1,
    Flourescent = 2,
    Tungsten = 3,
    Flash = 4,
    FineWeather = 5,
    Cloudy = 6,
    Shade = 7,
    DaylightFlourescent = 8,
    DayWhiteFlourescent = 9,
    CoolWhiteFlourescent = 10,
    WhiteFlourescent = 11,
    WarmWhiteFlourescent = 12,
    StandardLightA = 13,
    StandardLightB = 14,
    StandardLightC = 15,
    D55 = 16,
    D65 = 17,
    D75 = 18,
    D50 = 19,
    ISOStudioTungten = 20,
    Other = 255
}
declare enum ExifFlashValues {
    NoFlash = 0,
    Fired = 1,
    FiredReturnNotDetected = 5,
    FiredReturnDetected = 7,
    OnDidNotFire = 8,
    OnFired = 9,
    OnReturnNotDetected = 13,
    OnReturnDetected = 15,
    OffDidNotFire = 16,
    OffDidNotFireReturnNotDetected = 20,
    AutoDidNotFire = 24,
    AutoFired = 25,
    AutoFiredReturnNotDetected = 29,
    AutoFiredReturnDetected = 31,
    NoFlashFunction = 32,
    OffNoFlashFunction = 48,
    FiredRedEyeReduction = 65,
    FiredRedEyeReductionReturnNotDetected = 69,
    FiredRedEyeReductionReturnDetected = 71,
    OnRedEyeReduction = 73,
    OnRedEyeReductionReturnNotDetected = 77,
    OnRedEyeReductionReturnDetected = 79,
    OffRedEyeReduction = 80,
    AutoDidNotFireRedEyeReduction = 88,
    AutoFiredRedEyeReduction = 89,
    AutoFiredRedEyeReductionNotDetected = 89,
    AutoFiredRedEyeReductionDetected = 93
}
declare enum ExifPreviewColorSpace {
    Unknown = 0,
    GrayGamma22 = 1,
    sRGB = 2,
    AdobeRGB = 3,
    ProPhotoRGB = 4
}
declare enum ExifEmbedPolicy {
    AllowCopying = 0,
    EmbedIfUsed = 1,
    NeverEmbed = 2,
    NoRestrictions = 3
}
declare enum ExifSubjectDistance {
    Unknown = 0,
    Macro = 1,
    Close = 2,
    Distant = 3
}
declare enum ExifSharpness {
    Normal = 0,
    Soft = 1,
    Hard = 2
}
declare enum ExifSceneCaptureType {
    Standard = 0,
    Landscape = 1,
    Portrait = 2,
    Night = 3,
    Other = 4
}
declare enum ExifGainControl {
    None = 0,
    LowGainUp = 1,
    HighGainUp = 2,
    LowGainDown = 3,
    HighGainDown = 4
}
declare enum ExifContrast {
    Normal = 0,
    Low = 1,
    High = 2
}
declare enum ExifSaturation {
    Normal = 0,
    Low = 1,
    High = 2
}
/**
 * Extraneous info in an EXIF metadata payload. Detailed info
 * can be found on all fields here: [EXIF Tags](https://exiftool.org/TagNames/EXIF.html)
 */
declare type ExifExtraneous<T extends object = {}> = {
    /** [ `0x0001` ] */
    InteropIndex: string;
    /** called NewSubfileType by TIFF specfication.
     * [More](https://exiftool.org/TagNames/EXIF.html).
     */
    SubfileType: number;
} & T;
/**
 * Date and Time info found in EXIF payload. Detailed info
 * can be found on all fields here: [EXIF Tags](https://exiftool.org/TagNames/EXIF.html)
 */
declare type ExifDateTimeInfo<T extends object = {}> = {
    ModifyDate: string;
    OffsetTime: string;
    /** The date created; formal EXIF property is `DateTimeDigitized` */
    CreateDate: string;
    /** Formal EXIF property for created date */
    DateTimeDigitized: string;
    /**
     * 1 or 2 values:
     *
     * 1. The time zone offset of DateTimeOriginal from GMT in hours,
     * 2. If present, the time zone offset of ModifyDate
     */
    TimeZoneOffset: number | [number, number];
    OffsetTimeDigitized: string;
    /** fractional seconds for ModifyDate */
    SubSecTime: string;
    /** fractional seconds for DateTimeOriginal */
    SubSecTimeOriginal: string;
    /** fractional seconds for CreateDate */
    SubSecTimeDigitized: string;
} & T;
/**
 * Information regarding attribution found in EXIF payload. Detailed info
 * can be found on all fields here: [EXIF Tags](https://exiftool.org/TagNames/EXIF.html)
 */
declare type ExifAttributionInfo<T extends object = {}> = {
    Copyright: string;
    /** becomes a list-type tag when the MWG module is loaded */
    Artist: string;
    /** called `CameraOwnerName` by the EXIF spec */
    OwnerName: string;
    CameraOwnerName: string;
    /** called `BodySerialNumber` by the EXIF spec */
    SerialNumber: string;
    BodySerialNumber: string;
    LensSerialNumber: string;
    HostComputer: string;
} & T;
declare type ExifCameraInfo<T extends object = {}> = {
    Make: string;
    Model: string;
    UniqueCameraModel: string;
    LocalizedCameraModel: string;
    LensMake: string;
    LensModel: string;
    /**
     * 4 rational values giving focal and aperture ranges,
     * called `LensSpecification` by the EXIF spec.
     */
    LensInfo: [number, number, number, number];
    LensSpecification: [number, number, number, number];
    /** used by some obscure software */
    OriginalFileName: string;
    OriginalRawFileName: string;
    ReelName: string;
    Orientation: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8;
    ImageWidth: number;
    ExifImageWidth: number;
    ImageHeight: number;
    ExifImageHeight: number;
    BitsPerSample: number;
    /**
     * Details on compression values can be found here:
     * [Compression Values](https://exiftool.org/TagNames/EXIF.html#Compression).
     *
     * You may reference as a number or leverage the exposed `ExifCompression`
     * enumeration for more contextual info.
     */
    Compression: number;
    /**
     * - `1` - No dithering or halftoning
     * - `2` - Ordered dither or halftone
     * - `3` - Randomized dither
     */
    Thresholding: 1 | 2 | 3;
    /**
     * - `1` - Normal
     * - `2` - Reversed
     */
    FillOrder: 1 | 2;
    /**
     * - `0` - WhiteIsZero
     * - `1` - BlackIsZero
     * - `2` - RGB
     * - `3` - RGB Palettte
     * - `4` - Transparency Mask
     *
     * For full list reference [docs](https://exiftool.org/TagNames/EXIF.html)
     */
    PhotometricInterpretation: number;
    SceneCaptureType: ExifSceneCaptureType;
    GainControl: ExifGainControl;
    Contrast: ExifContrast | string;
    Saturation: ExifSaturation;
    Sharpness: ExifSharpness | string;
    /**
     * Applies to **EXIF:ISO** tag:
     *
     *   - `0` - Unknown
     *   - `1` - Standard Output Sensitivity
     *   - `2` - Recommended Exposure Index
     *   - `3` - ISO Speed
     *   - `4` - Standard Output Sensitivity and Recommended Exposure Index
     *   - `5` - Standard Output Sensitivity and ISO Speed
     *   - `6` - Recommended Exposure Index and ISO Speed
     *   - `7` - Standard Output Sensitivity, Recommended Exposure Index and ISO Speed
     */
    SensitivityType: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7;
    StandardOutputSensitivity: number;
    RecommendedExposureIndex: number;
    /**
     * called `ISOSpeedRatings` by EXIF 2.2, then `PhotographicSensitivity` by the EXIF 2.3 spec.
     */
    ISO: number;
    ISOSpeed: number;
    Exposure: string;
    ExposureIndex: number;
    Shadows: string;
    Brightness: string;
    Smoothness: string;
    MoireFilter: string;
    /**
     * - `0` - Unknown
     * - `1` - Average
     * - `2` - Center-weighted average
     * - `3` - Spot
     * - `4` - Multi-spot
     * - `5` - Multi-segment
     * - `6` - Partial
     * - `255` - Other
     */
    MeteringMode: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 255;
    /**
     * - `0` - Auto
     * - `1` - Manual
     * - `2` - Auto bracket
     */
    ExposureMode: 0 | 1 | 2;
    /**
     * Only values `0` and `1` are to the EXIF spec but Apple IOS devices use all
     *
     * - `0` - Normal
     * - `1` - Custom
     * - `2` - HDR (no original saved)
     * - `3` - HDR (original saved)
     * - `4` - Original (for HDR)
     * - `6` - Panorama
     * - `7` - Portrait HDR
     * - `8` - Portrait
     */
    CustomRendered: 0 | 1 | 2 | 3 | 4 | 6 | 7 | 8;
    LightSource: ExifLightSource;
    Flash: ExifFlashValues;
    FlashEnergy: number;
    SubjectDistance: number;
    SubjectDistanceRange: ExifSubjectDistance;
    SubjectLocation: [number, number];
    DepthNear: number;
    DepthFar: number;
    DepthMeasureType: 0 | 1 | 2;
    DigitalZoomRatio: number;
    FocalLengthIn35mmFormat: number;
    FocalLength: number;
    /**
     * - `0x1` - sRGB
     * - `0x2` - Adobe RGB
     * - `0xfffd` - Wide Gamut RGB
     * - `0xfffe` - ICC Profile
     * - `0xffff` - Uncalibrated
     *
     * Note: the value of `0x2` is not standard EXIF. Instead, an Adobe RGB image
     * is indicated by "Uncalibrated" with an InteropIndex of "R03". The values
     * 0xfffd and 0xfffe are also non-standard, and are used by some Sony cameras.
     */
    Colorspace: 0x1 | 0x2 | 0xfffd | 0xfffe | 0xffff;
    Gamma: number;
    /**
     * The actual `PixelFormat` values are 16-byte GUID's but the leading 15 bytes,
     * '6fddc324-4e03-4bfe-b1853-d77768dc9', have been removed below to avoid
     * unnecessary clutter:
     *
     * - `0x5` = Black & White
     * - `0x8` = 8-bit Gray
     * - `0x9` = 16-bit BGR555
     * - `0xa` = 16-bit BGR565
     * - `0xb` = 16-bit Gray
     * - `0xc` = 24-bit BGR
     * - `0xd` = 24-bit RGB
     * - `0xe` = 32-bit BGR
     * - `0xf` = 32-bit BGRA
     * - `0x10` = 32-bit PBGRA
     * - `0x11` = 32-bit Gray Float
     * - `0x12` = 48-bit RGB Fixed Point
     * - `0x13` = 32-bit BGR101010
     * - `0x15` = 48-bit RGB
     * - `0x16` = 64-bit RGBA
     * - `0x17` = 64-bit PRGBA
     * - `0x18` = 96-bit RGB Fixed Point
     * - `0x19` = 128-bit RGBA Float
     * - `0x1a` = 128-bit PRGBA Float
     * - `0x1b` = 128-bit RGB Float
     * - `0x1c` = 32-bit CMYK
     * - `0x1d` = 64-bit RGBA Fixed Point
     * - `0x1e` = 128-bit RGBA Fixed Point
     * - `0x1f` = 64-bit CMYK
     * - `0x20` = 24-bit 3 Channels
     * - `0x21` = 32-bit 4 Channels
     * - `0x22` = 40-bit 5 Channels
     * - `0x23` = 48-bit 6 Channels
     * - `0x24` = 56-bit 7 Channels
     * - `0x25` = 64-bit 8 Channels
     * - `0x26` = 48-bit 3 Channels
     * - `0x27` = 64-bit 4 Channels
     * - `0x28` = 80-bit 5 Channels
     * - `0x29` = 96-bit 6 Channels
     * - `0x2a` = 112-bit 7 Channels
     * - `0x2b` = 128-bit 8 Channels
     * - `0x2c` = 40-bit CMYK Alpha
     * - `0x2d` = 80-bit CMYK Alpha
     * - `0x2e` = 32-bit 3 Channels Alpha
     * - `0x2f` = 40-bit 4 Channels Alpha
     * - `0x30` = 48-bit 5 Channels Alpha
     * - `0x31` = 56-bit 6 Channels Alpha
     * - `0x32` = 64-bit 7 Channels Alpha
     * - `0x33` = 72-bit 8 Channels Alpha
     * - `0x34` = 64-bit 3 Channels Alpha
     * - `0x35` = 80-bit 4 Channels Alpha
     * - `0x36` = 96-bit 5 Channels Alpha
     * - `0x37` = 112-bit 6 Channels Alpha
     * - `0x38` = 128-bit 7 Channels Alpha
     * - `0x39` = 144-bit 8 Channels Alpha
     * - `0x3a` = 64-bit RGBA Half
     * - `0x3b` = 48-bit RGB Half
     * - `0x3d` = 32-bit RGBE
     * - `0x3e` = 16-bit Gray Half
     * - `0x3f` = 32-bit Gray Fixed Point
     *
     * > NOTE: tags 0xbc** are used in Windows HD Photo (HDP and WDP) images
     `*/
    PixelFormat: number;
    /**
     * - `0` - Horizontal (normal)
     * - `1` - Mirror vertical
     * - `2` - Mirror horizontal
     * - `3` - Rotate 180
     * - `4` - Rotate 90 CW
     * - `5` - Mirror horizontal and rotate 90 CW
     * - `6` - Mirror horizontal and rotate 270 CW
     * - `7` - Rotate 270 CW
     */
    Transformation: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7;
    Whitebalance: number;
    BrightnessValue: number;
    /** Used but EXIF standard is `ExposureBiasValue` */
    ExposureCompensation: number;
    /** EXIF standard for Exposure bias */
    ExposureBiasValue: number;
    /** displayed in seconds, but stored as an APEX value */
    ShutterSpeedValue: number;
    /** displayed as an F number, but stored as an APEX value */
    ApertureValue: number;
    /** displayed as an F number, but stored as an APEX value */
    MaxApertureValue: number;
    EnhanceParams: string;
    /**
     *
     */
    FileSource: 1 | 2 | 3 | "\x03\x00\x00\x00";
    /**
     * Ambient temperature in degrees C, called `Temperature` by the EXIF spec
     */
    AmbientTemperature: number;
    /** Ambient temperature in degress C */
    Temperature: number;
    Humidity: number;
    Pressure: number;
    WaterDepth: number;
    Acceleration: number;
    CameraElevationAngle: number;
} & T;
declare type ExifPhotoContext<T extends object = {}> = {
    ImageDescription: string;
    DocumentName: string;
    UserComment: string;
    Annotations: string;
    XPSubject: number;
    XPKeywords: number;
    XPAuthor: number;
    XPComments: number;
    Rating: number;
    RatingPercent: number;
} & T;
/**
 * Typing for GPS properties that are part of EXIF spec.
 * Details can be found: [here](https://exiftool.org/TagNames/GPS.html).
 */
declare type ExifGps = {
    GPSVersionID: number;
    GPSLatitudeRef: "N" | "S";
    GPSLatitude: number;
    GPSLongitudeRef: "E" | "W";
    GPSLongitude: number;
    /**
     * - `0` is above sea level
     * - `1` is beloow sea level
     */
    GPSAltitudeRef: 0 | 1;
    GPSAltitude: number;
    /**
     * UTC time of GPS fix. When writing, date is stripped off if present,
     * and time is adjusted to UTC if it includes a timezone
     */
    GPSTimeStamp: string;
    GPSSatellites: string;
    GPSStatus: "A" | "V";
    GPSMeasureMode: "2" | "3";
    /**
     * - `K` - km/h
     * - `M` - mph
     * - `N` = knots
     */
    GPSSpeedRef: "K" | "M" | "N";
    GPSSpeed: number;
    GPSTrack: number;
    GPSImgDirectionRef: "M" | "T";
    GPSImgDirection: number;
    GPSMapDatum: string;
    GPSDestLatitudeRef: "N" | "S";
    GPSDestLatitude: number;
    GPSDestLongitudeRef: "N" | "S";
    GPSDestLongitude: number;
    GPSDestBearingRef: "M" | "T";
    GPSDestBearing: number;
    /**
     * - `K` - Kilometers
     * - `M` - Miles
     * - `N` = Nautical Miles
     */
    GPSDestDistanceRef: "K" | "M" | "N";
    GPSDestDistance: number;
    GPSProcessingMethod: "GPS" | "CELLID" | "WLAN" | "MANUAL";
    GPSAreaInformation: string;
    /**
     * When writing, time is stripped off if present, after adjusting
     * date/time to UTC if time includes a timezone. Format is `YYYY:mm:dd`.
     */
    GPSDateStamp: `${number}:${number}:${number}`;
    /**
     * `0` - no correction
     * `1` - differential corrected
     */
    GPSDifferential: 0 | 1;
    GPSHPositioningError: number;
};
/**
 * EXIF payload fields. Detailed info can be found here:
 * [EXIF Tags](https://exiftool.org/TagNames/EXIF.html).
 */
declare type ExifMetadata<T extends object = {}> = Partial<ExifAttributionInfo & ExifCameraInfo & ExifDateTimeInfo & ExifGps & ExifExtraneous & ExifPhotoContext> & T;

declare type BearerToken = `Bearer ${string}`;
declare function isBearerToken(token: unknown): token is BearerToken;

/**
 * File structure for a Typescript `tsconfig.json` file
 */
interface ITsConfig {
    extends?: string;
    files?: string[];
    /**
     * Auto type (.d.ts) acquisition options for this project. Requires TypeScript version 2.1 or later.
     */
    typeAcquisition?: {
        enable?: boolean;
        include?: string[];
        exclude?: string[];
    };
    buildOptions?: {
        /**
         * Have recompiles in projects that use incremental and watch mode assume that
         * changes within a file will only affect files directly depending on it.
         * See more: https://www.typescriptlang.org/tsconfig#assumeChangesOnlyAffectDirectDependencies
         */
        assumeChangesOnlyAffectDirectDependencies?: boolean;
        dry?: boolean;
        /**
         * Build all projects, including those that appear to be up to date.
         * See more: https://www.typescriptlang.org/tsconfig#force
         */
        force?: boolean;
        /**
         * Save .tsbuildinfo files to allow for incremental compilation of projects.
         * See more: https://www.typescriptlang.org/tsconfig#incremental
         */
        incremental?: boolean;
        /**
         * Log paths used during the moduleResolution process.
         * See more: https://www.typescriptlang.org/tsconfig#traceResolution
         */
        traceResolution?: boolean;
        verbose?: boolean;
    };
    compileOnSave?: boolean;
    compilerOptions?: Record<string, unknown> & {
        allowJs?: boolean;
        alwaysStrict?: boolean;
        /**
         * Specify what module code is generated.
         * See more: https://www.typescriptlang.org/tsconfig#module
         */
        module?: string;
        baseUrl?: string;
        /**
         * Set the JavaScript language version for emitted JavaScript and
         * include compatible library declarations.
         * See more: https://www.typescriptlang.org/tsconfig#target
         */
        target?: string;
        lib?: string[];
        /**
         * Enable all strict type checking options.
         * See more: https://www.typescriptlang.org/tsconfig#strict
         */
        strict?: boolean;
        strictBindCallApply?: boolean;
        strictFunctionTypes?: boolean;
        /** Enable error reporting for expressions and declarations with an implied any type.. */
        noImplicitAny?: boolean;
        /** Disable erasing const enum declarations in generated code. */
        preserveConstEnums?: boolean;
        strictPropertyInitialization?: boolean;
        /**
         * Enable constraints that allow a TypeScript project to be used with project references.
         * See more: https://www.typescriptlang.org/tsconfig#composite
         */
        composite?: boolean;
        /**
         * Output compiler performance information after building.
         * See more: https://www.typescriptlang.org/tsconfig#diagnostics
         */
        diagnostics?: boolean;
        /**
         * Output compiler performance information after building.
         * See more: https://www.typescriptlang.org/tsconfig#diagnostics
         */
        extendedDiagnostics?: boolean;
        /**
         * Differentiate between undefined and not present when type checking.
         * See more: https://www.typescriptlang.org/tsconfig#exactOptionalPropertyTypes
         * Default value: "profile.cpuprofile"
         */
        generateCpuProfile?: string | "profile.cpuprofile";
        /**
         * Differentiate between undefined and not present when type checking.
         * See more: https://www.typescriptlang.org/tsconfig#exactOptionalPropertyTypes
         */
        exactOptionalPropertyTypes?: boolean;
        /**
         * Ensure that each file can be safely transpiled without relying on other imports.
         * See more: https://www.typescriptlang.org/tsconfig#isolatedModules
         */
        isolatedModules?: false;
        esModuleInterop?: boolean;
        /**
         * Disable emitting comments.
         * See more: https://www.typescriptlang.org/tsconfig#removeComments
         */
        removeComments?: boolean;
        allowSyntheticDefaultImports?: boolean;
        /**
         * Enable experimental support for TC39 stage 2 draft decorators.
         * [link](https://www.typescriptlang.org/tsconfig#experimentalDecorators).
        */
        experimentalDecorators?: boolean;
        /**
         * Emit design-type metadata for decorated declarations in source files.
         * [link](https://www.typescriptlang.org/tsconfig#emitDecoratorMetadata).
         */
        emitDecoratorMetadata?: boolean;
        /**
         * Generate .d.ts files from TypeScript and JavaScript files in your project.
         * See more: https://www.typescriptlang.org/tsconfig#declaration
         */
        declaration?: boolean;
        /**
         * Specify the output directory for generated declaration files.
         * See more: https://www.typescriptlang.org/tsconfig#declarationDir
         */
        declarationDir?: string;
        /**
         * Create sourcemaps for d.ts files.
         * See more: https://www.typescriptlang.org/tsconfig#declarationMap
         */
        declarationMap?: boolean;
        /**
         * Enable incremental compilation. Requires TypeScript version 3.4 or later.
         */
        incremental?: boolean;
        /**
         * Skip type checking all .d.ts files.
         * See more: https://www.typescriptlang.org/tsconfig#skipLibCheck
         */
        skipLibCheck?: boolean;
        /**
         * Enable error reporting when a local variables aren't read.
         * See more: https://www.typescriptlang.org/tsconfig#noUnusedLocals
         */
        noUnusedLocals?: boolean;
        /**
         * Disable generating custom helper functions like __extends in compiled output.
         * See more: https://www.typescriptlang.org/tsconfig#noEmitHelpers
         */
        noEmitHelpers?: boolean;
        /**
         * Disable truncating types in error messages.
         * See more: https://www.typescriptlang.org/tsconfig#noErrorTruncation
         */
        noErrorTruncation?: boolean;
        /**
         * Enable error reporting for fallthrough cases in switch statements.
         * See more: https://www.typescriptlang.org/tsconfig#noFallthroughCasesInSwitch
         */
        noFallthroughCasesInSwitch?: boolean;
        /**
         * Ensure overriding members in derived classes are marked with an override modifier.
         * See more: https://www.typescriptlang.org/tsconfig#noImplicitOverride
         */
        noImplicitOverride?: boolean;
        /**
         * Enable error reporting for codepaths that do not explicitly return in a function.
         * See more: https://www.typescriptlang.org/tsconfig#noImplicitReturns
         */
        noImplicitReturns?: boolean;
        /**
         * Enable error reporting when this is given the type any.
         * See more: https://www.typescriptlang.org/tsconfig#noImplicitThis
         */
        noImplicitThis?: boolean;
        /**
         * Disable strict checking of generic signatures in function types.
         * See more: https://www.typescriptlang.org/tsconfig#noStrictGenericChecks
         */
        noStrictGenericChecks?: boolean;
        /** Specify how TypeScript looks up a file from a given module specifier. */
        moduleResolution?: "node" | "classic";
        /**
         * Enable importing .json files.
         * See more: https://www.typescriptlang.org/tsconfig#resolveJsonModule
         */
        resolveJsonModule?: boolean;
        /**
         * When type checking, take into account null and undefined.
         * See more: https://www.typescriptlang.org/tsconfig#strictNullChecks
         */
        strictNullChecks?: boolean;
        forceConsistentCasingInFileNames?: boolean;
        types?: string[];
        paths?: Record<string, string>;
        plugins?: [{
            transform?: string;
            afterDeclarations?: true;
        }];
        /**
         * Ensure that each file can be safely transpiled without relying on other imports.
         * See more: https://www.typescriptlang.org/tsconfig#isolatedModules
         */
        traceResolution?: boolean;
    };
    /**
   * ts-node options.
   *
   * See also: https://github.com/TypeStrong/ts-node#configuration-options
   *
   * _`ts-node` offers TypeScript execution and REPL for node.js, with source map support._
   */
    "ts-node"?: {
        compiler?: string;
        compilerHost?: unknown;
        compilerOptions?: Record<string, unknown>;
        emit?: boolean;
        files?: boolean;
        ignore?: string[];
        ignoreDianostics?: unknown[];
        logError?: boolean;
        preferTsExts?: boolean;
        pretty?: boolean;
        require?: string[];
        skipIgnore?: boolean;
        transpileOnly?: boolean;
        typeCheck?: boolean;
    };
    /**
     * Referenced projects. Requires TypeScript version 3.0 or later.
     */
    references?: string[];
    include?: string[];
    exclude?: string[];
    /**
     * Settings for the watch mode in TypeScript.
     */
    watachOptions?: {
        /**
         * Remove a list of directories from the watch process.
         * See more: https://www.typescriptlang.org/tsconfig#excludeDirectories
         */
        excludeDirectories?: string[];
        /**
         * Remove a list of files from the watch mode's processing.
         * See more: https://www.typescriptlang.org/tsconfig#excludeFiles
         */
        excludeFiles?: string[];
        /**
         * Specify what approach the watcher should use if the system runs out
         * of native file watchers.
         * See more: https://www.typescriptlang.org/tsconfig#fallbackPolling
         */
        fallbackPolling?: string;
        force?: unknown;
        /**
         * Synchronously call callbacks and update the state of directory watchers on platforms
         * that don`t support recursive watching natively.
         * See more: https://www.typescriptlang.org/tsconfig#synchronousWatchDirectory
         */
        synchronousWatchDirectory?: string;
        watchDirectory?: string;
        /**
         * Specify how the TypeScript watch mode works.
         * See more: https://www.typescriptlang.org/tsconfig#watchFile
         */
        watchFile?: string;
    };
}

/**
 * A _type guard_ designed to test whether an input is of type `TypeSubtype`
 */
declare function isTypeSubtype(input: unknown): input is TypeSubtype;
/**
 * A type guard that checks whether an input is an "object" but also
 * _not_ `null`.
 *
 * This is useful test in its own right but can also be an important
 * building block for other type guards.
 */
declare function isNonNullObject<T extends object>(input: unknown): input is T;

export { AWSRuntime, AWS_REGIONS, Alpha, AspectRatio, AspectRatioColon, AspectRatioCss, AsyncCallback, AttributedCookie, AwsAccountId, AwsArn, AwsArnCloudwatch, AwsArnCloudwatchResource, AwsArnDynamoDb, AwsArnDynamoDbResource, AwsArnEventBridge, AwsArnEventBridgeResource, AwsArnIam, AwsArnLambda, AwsArnLambdaResource, AwsArnPartition, AwsArnResource, AwsArnService, AwsArnSnsTopic, AwsArnStepFunction, AwsFunctionArn, AwsGlobalArn, AwsIamResource, AwsIamResourceName, AwsRegion, AwsRegionName, AwsRegionPattern, AwsResourceType, AwsS3OptionalInventoryFields, AwsStage, Base64Zip, BearerToken, BooleanAsString, CIDR, Callback, CallbackOption, ClassDecorator, CognitoAliasAttributes, CognitoAutoVerfiedAttributes, CognitoEmailSendingAccount, CognitoMfaSetting, ConstructorFor, Cookie, CookieAttribute, CookieAttributes, CookieDomain, CookieExpires, CookieHttpOnly, CookieMaxAge, CookieSameSite, CookieSecure, Day, DayShort, DayShortLower, DevelopmentStage, Digit, DynamoBillingMode, DynamoDbAttributeType, DynamoGSI, DynamoKeySchema, DynamoLSI, DynamoTableProjection, EightBitBase10, ExifAttributionInfo, ExifCameraInfo, ExifCompression, ExifContrast, ExifDateTimeInfo, ExifEmbedPolicy, ExifExtraneous, ExifFlashValues, ExifGainControl, ExifGps, ExifLightSource, ExifMetadata, ExifPhotoContext, ExifPreviewColorSpace, ExifSaturation, ExifSceneCaptureType, ExifSharpness, ExifSubjectDistance, ExportBlock, FourDigit, FunctionProperties, FunctionPropertyNames, GithubEventType, GithubWebhookEvent, HexColor, Hexadecimal, HtmlHexColor, HttpStatusCodes, IAWSGatewayRequest, IAWSLambaContext, IAWSLambdaProxyClientCert, IAWSLambdaProxyIntegrationRequest, IAWSLambdaProxyIntegrationRequestHeaders, IAWSLambdaProxyJwtAuthorizer, IAWSLayerVersion, IApiGatewayAliasConfig, IApiGatewayErrorResponse, IApiGatewayMethodSetting, IApiGatewayResponse, IApiGatewayStage, IArnStringReference, IAwsAPiGatewayV2Integration, IAwsAnomalyMetricDataQuery, IAwsApiGatewayErrorResponse, IAwsApiGatewayResponse, IAwsApiGatewayV2IntegrationResponse, IAwsApiGatewayV2Model, IAwsCloudWatchLogEvent, IAwsCloudwatchAlarm, IAwsCloudwatchAnomalyDetector, IAwsCognitoAdminCreateUser, IAwsCognitoEmailConfig, IAwsCognitoIdentityPool, IAwsCognitoIdentityProvider, IAwsCognitoLambdaConfig, IAwsCognitoPasswordPolicy, IAwsCognitoRecoveryOption, IAwsCognitoUserPool, IAwsCognitoUserPoolSchemaAttribute, IAwsEventBatchParameters, IAwsEventBus, IAwsEventDeadLetterConfig, IAwsEventHttpParameters, IAwsEventInputTransformer, IAwsEventName, IAwsEventRule, IAwsEventRuleTarget, IAwsEventSchema, IAwsEventSource, IAwsEventUrls, IAwsGatewayRequest, IAwsHandlerFunction, IAwsIamRole, IAwsLambdaCallback, IAwsLambdaContext, IAwsLambdaEvent, IAwsLambdaFailureCallback, IAwsLambdaProxyClientCert, IAwsLambdaProxyIntegrationRequest, IAwsLambdaProxyIntegrationRequestHeaders, IAwsLambdaProxyIntegrationRequestV1, IAwsLambdaProxyIntegrationRequestV2, IAwsLambdaProxyJwtAuthorizer, IAwsLambdaProxyRequestContext, IAwsLambdaProxyRequestContextV2, IAwsLambdaSuccessCallback, IAwsLayerMeta, IAwsLayerVersion, IAwsMetricStat, IAwsResourceTag, IAwsS3Bucket, IAwsS3BucketDestination, IAwsS3BucketRule, IAwsS3CorsRule, IAwsS3IntelligentTiering, IAwsS3InventoryConfig, ICloudWatchConfigEvent, ICloudWatchEvent, ICloudWatchEvent_Old, ICloudWatchLogEvent, ICloudformationReference, IDictionary, IDynamoDbTableResource, IDynamoProvisionedThroughput, IGitHubWebhook_IssuesEvent, IGitHubWebhook_MemberEvent, IGitHubWebhook_PushEvent, IGitHubWebhook_ReleaseEvent, IGitHubWebhook_RepositoryEvent, IGithubCommit, IGithubEvent, IGithubEventCommit, IGithubRelease, IGithubRepo, IGithubUser, IGithubWebhookConfig, IGithubWebhookCreate, IGithubWebhookSubUnsub, IGithubWebhookSubscribe, IGithubWebhookUnsubscribe, IHttpApiAuthorizer, IHttpApiComplex, IHttpApiCors, IHttpApiLogging, IHttpApiSimple, IHttpHeaders, IHttpRequestHeaders, IHttpResponseHeaders, ILayerDefinition, INameValuePair, INameValuePairWithId, INameValuePairWithKey, INetlifyRequest, INetlifyRequestHeader, INpmInfo, INpmInfoDist, INpmInfoDistTags, INpmInfoPerson, INpmInfoRepository, INpmInfoTime, IOptimizedImage, IPackageJson, IPackageJsonPerson, IParseStackOptions, IRestApiLogging, IS3EventType, IS3Rule, IServerlessAccountInfo, IServerlessApiGatewayLoggingConfig, IServerlessAuthorizer, IServerlessBindDeploymentIdPlugin, IServerlessCloudfrontCachePolicy, IServerlessCognito, IServerlessConfig, IServerlessConfigCustom, IServerlessDeploymentBucket, IServerlessEcr, IServerlessEvent, IServerlessEventExistingSNS, IServerlessEventHttp, IServerlessEventHttpWithDocumentation, IServerlessEventS3, IServerlessEventScheduleLongForm, IServerlessEventScheduleShortForm, IServerlessEventVerboseSNS, IServerlessFunction, IServerlessFunctionConfig, IServerlessFunctionHandler, IServerlessFunctionImage, IServerlessHttpAuthorizer, IServerlessIAMRole, IServerlessIamRolePolicy, IServerlessIotEvent, IServerlessJwtAuthorizer, IServerlessKafkaEvent, IServerlessLogging, IServerlessOidc, IServerlessOpenApiDocumentation, IServerlessOpenApiDocumentationConfiguration, IServerlessOpenApiDocumentationMethodResponses, IServerlessOpenApiDocumentationModel, IServerlessOpenApiDocumentationModelSchema, IServerlessOpenApiDocumentationParams, IServerlessOpenApiDocumentationSchema, IServerlessOutput, IServerlessPackage, IServerlessProvider, IServerlessRequest, IServerlessResource, IServerlessResources, IServerlessRootConfig, IServerlessSQSEvent, IServerlessStage, IServerlessStatusCode, IServerlessStepFunctions, IServerlessStreamEvent, IServerlessTracing, IServerlessUsagePlan, IServerlessVariable, IServerlessVpcConfig, IServerlessYaml, IStackFrame, IStateMachine, IStepFunction, IStepFunctionAlarmTopics, IStepFunctionBaseChoice, IStepFunctionBaseLogicalOperand, IStepFunctionBaseState, IStepFunctionBaseWithPathMapping, IStepFunctionCatcher, IStepFunctionChoice, IStepFunctionChoiceItem, IStepFunctionComplexChoiceItem, IStepFunctionFail, IStepFunctionMap, IStepFunctionOperand, IStepFunctionOperand_BooleanEquals, IStepFunctionOperand_NumericEquals, IStepFunctionOperand_NumericGreaterThan, IStepFunctionOperand_NumericGreaterThanEquals, IStepFunctionOperand_NumericLessThan, IStepFunctionOperand_NumericLessThanEquals, IStepFunctionOperand_StringEquals, IStepFunctionOperand_StringGreaterThan, IStepFunctionOperand_StringGreaterThanEquals, IStepFunctionOperand_StringLessThan, IStepFunctionOperand_StringLessThanEquals, IStepFunctionParallel, IStepFunctionParallelBranch, IStepFunctionPass, IStepFunctionRetrier, IStepFunctionStep, IStepFunctionSucceed, IStepFunctionTask, IStepFunctionType, IStepFunctionWait, ITsConfig, IWebsocketLogging, ImageFormat, Iso3166, Iso3166_2, Iso3166_Alpha3, Iso8601DateTime, JSONstring, LambdaEventParser, LowerAlpha, Month, MonthShort, NonFunctionProperties, NonFunctionPropertyNames, Nullable, NumericCharacter, Omit$1 as Omit, OptEightBitBase10, OptFourDigit, OptSpace, OptThreeDigit, OptTwoDigit, PropertyDecorator, ReflectionProperty, RestMethod, RgbArray, RgbObject, RgbStr, RgbStrArray, STAGE, STAGE_MAP, ServerlessFunctionMemorySize, SimpleCookie, SnsArn, SortingFunction, Source, SqsArn, StepFunctionBuiltinStates, StepFunctionLoggingConfig, StepFunctionMetric, StepFunctionMissingDataTreatment, StrictCookie, ThreeDigit, TwoDigit, TypeSubtype, UpperAlpha, UtcDateString, WebImageFormat, YamlExpression, arn, binary, createBindDeploymentConfig, csv, dateAsString, datestring, datetime, email, epoch, epochWithMilliseconds, fk, float, getBodyFromPossibleLambdaProxyRequest, hours, html, int32, int64, integer, ipv4, ipv6, isArn, isArnPartition, isArnResource, isArnService, isAwsAccountId, isAwsRegion, isAwsStage, isBearerToken, isEventBridgeArn, isIso8601DateTime, isLambdaArn, isLambdaFunctionArn, isLambdaProxyRequest, isNonNullObject, isNpmInfoRepository, isProxyRequestContextV2, isServerlessFunctionHandler, isServerlessFunctionImage, isStepFunctionArn, isTypeSubtype, json, markdown, minutes, monthString, ms, numberAsString, parseStack, percentage, pk, scalar, seconds, semver, sql, subnetMask, timestring, timezone, todMinutes, todSeconds, todStructured, uri, url, uuid, uuid_unformatted, wait, year, yearAbbreviated, yearString, yearString2, zip5, zip5_4 };
