"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  AWS_REGIONS: () => AWS_REGIONS,
  AwsRegionName: () => AwsRegionName,
  AwsResourceType: () => AwsResourceType,
  ExifCompression: () => ExifCompression,
  ExifContrast: () => ExifContrast,
  ExifEmbedPolicy: () => ExifEmbedPolicy,
  ExifFlashValues: () => ExifFlashValues,
  ExifGainControl: () => ExifGainControl,
  ExifLightSource: () => ExifLightSource,
  ExifPreviewColorSpace: () => ExifPreviewColorSpace,
  ExifSaturation: () => ExifSaturation,
  ExifSceneCaptureType: () => ExifSceneCaptureType,
  ExifSharpness: () => ExifSharpness,
  ExifSubjectDistance: () => ExifSubjectDistance,
  HttpStatusCodes: () => HttpStatusCodes,
  LambdaEventParser: () => LambdaEventParser,
  StepFunctionMissingDataTreatment: () => StepFunctionMissingDataTreatment,
  createBindDeploymentConfig: () => createBindDeploymentConfig,
  getBodyFromPossibleLambdaProxyRequest: () => getBodyFromPossibleLambdaProxyRequest,
  isArn: () => isArn,
  isArnPartition: () => isArnPartition,
  isArnResource: () => isArnResource,
  isArnService: () => isArnService,
  isAwsAccountId: () => isAwsAccountId,
  isAwsRegion: () => isAwsRegion,
  isAwsStage: () => isAwsStage,
  isBearerToken: () => isBearerToken,
  isEventBridgeArn: () => isEventBridgeArn,
  isIso8601DateTime: () => isIso8601DateTime,
  isLambdaArn: () => isLambdaArn,
  isLambdaFunctionArn: () => isLambdaFunctionArn,
  isLambdaProxyRequest: () => isLambdaProxyRequest,
  isNonNullObject: () => isNonNullObject,
  isNpmInfoRepository: () => isNpmInfoRepository,
  isProxyRequestContextV2: () => isProxyRequestContextV2,
  isServerlessFunctionHandler: () => isServerlessFunctionHandler,
  isServerlessFunctionImage: () => isServerlessFunctionImage,
  isStepFunctionArn: () => isStepFunctionArn,
  isTypeSubtype: () => isTypeSubtype,
  parseStack: () => parseStack,
  wait: () => wait
});
module.exports = __toCommonJS(src_exports);

// src/async.ts
async function wait(ms) {
  return new Promise((resolve) => setTimeout(resolve, ms));
}

// src/aws/aws-regions.ts
var AwsRegionName = /* @__PURE__ */ ((AwsRegionName2) => {
  AwsRegionName2["us-east-1"] = "N. Virginia";
  AwsRegionName2["us-east-2"] = "Ohio";
  AwsRegionName2["us-west-1"] = "N. California";
  AwsRegionName2["us-west-2"] = "Oregon";
  AwsRegionName2["af-south-1"] = "Cape Town";
  AwsRegionName2["ap-east-1"] = "Hong Kong";
  AwsRegionName2["ap-south-1"] = "Mumbai";
  AwsRegionName2["ap-northeast-1"] = "Tokyo";
  AwsRegionName2["ap-northeast-2"] = "Seoul";
  AwsRegionName2["ap-northeast-3"] = "Osaka";
  AwsRegionName2["ap-southeast-1"] = "Singapore";
  AwsRegionName2["ap-southeast-2"] = "Sydney";
  AwsRegionName2["ca-central-1"] = "Canada (central)";
  AwsRegionName2["eu-central-1"] = "Frankfurt";
  AwsRegionName2["eu-west-1"] = "Ireland";
  AwsRegionName2["eu-west-2"] = "London";
  AwsRegionName2["eu-west-3"] = "Paris";
  AwsRegionName2["eu-north-1"] = "Stockholm";
  AwsRegionName2["eu-south-1"] = "Milan";
  AwsRegionName2["me-south-1"] = "Bahrain";
  AwsRegionName2["sa-east-1"] = "S\u0101o Paulo";
  return AwsRegionName2;
})(AwsRegionName || {});

// src/aws/aws-resource-types.ts
var AwsResourceType = /* @__PURE__ */ ((AwsResourceType2) => {
  AwsResourceType2["apiGatewayV2Model"] = "AWS::ApiGatewayV2::Model";
  AwsResourceType2["apiGatewayV2Api"] = "AWS::ApiGatewayV2::Api";
  AwsResourceType2["apiGatewayV2Route"] = "AWS::ApiGatewayV2::Route";
  AwsResourceType2["apiGatewayV2Authorizer"] = "AWS::ApiGatewayV2::Authorizer";
  AwsResourceType2["apiGatewayV2Integration"] = "AWS::ApiGatewayV2::Integration";
  AwsResourceType2["apiGatewayV2IntegrationResponse"] = "AWS::ApiGatewayV2::IntegrationResponse";
  AwsResourceType2["athenaDataCatalog"] = "AWS::Athena::DataCatalog";
  AwsResourceType2["athenaNamedQuery"] = "AWS::Athena::NamedQuery";
  AwsResourceType2["athenaPreparedStatement"] = "AWS::Athena::PreparedStatement";
  AwsResourceType2["cognitoIdentityPool"] = "AWS::Cognito::IdentityPool";
  AwsResourceType2["cognitoUserPool"] = "AWS::Cognito::UserPool";
  AwsResourceType2["cloudfrontDistribution"] = "AWS::Cloudfront::Distribution";
  AwsResourceType2["cloudfrontFunction"] = "AWS::Cloudfront::Function";
  AwsResourceType2["cloudwatchAlarm"] = "AWS::CloudWatch::Alarm";
  AwsResourceType2["cloudwatchDashboard"] = "AWS::CloudWatch::Dashboard";
  AwsResourceType2["cloudwatchAnomalyDetector"] = "AWS::CloudWatch::AnomalyDetector";
  AwsResourceType2["cloudwatchInsightRule"] = "AWS::CloudWatch::InsightRule";
  AwsResourceType2["cloudwatchLogGroup"] = "AWS::CloudWatch::LogGroup";
  AwsResourceType2["cloudwatchLogStream"] = "AWS::CloudWatch::LogStream";
  AwsResourceType2["cloudwatchMetricFilter"] = "AWS::CloudWatch::MetricFilter";
  AwsResourceType2["cloudwatchResourcePolicy"] = "AWS::CloudWatch::ResourcePolicy";
  AwsResourceType2["cloudTrail"] = "AWS::CloudTrail::Trail";
  AwsResourceType2["iamRole"] = "AWS::IAM::Role";
  AwsResourceType2["iamPolicy"] = "AWS::IAM::Policy";
  AwsResourceType2["iamUser"] = "AWS::IAM::User";
  AwsResourceType2["iamGroup"] = "AWS::IAM::Group";
  AwsResourceType2["dynamoTable"] = "AWS::DynamoDB::Table";
  AwsResourceType2["dynamoGlobalTable"] = "AWS::DynamoDB::GlobalTable";
  AwsResourceType2["eventBridgeEventBus"] = "AWS::EVENTS::EventBus";
  AwsResourceType2["eventBridgeRule"] = "AWS::EVENTS::Rule";
  AwsResourceType2["eventBridgeApiDestination"] = "AWS::EVENTS::ApiDestination";
  AwsResourceType2["eventBridgeConnection"] = "AWS::EVENTS::Connection";
  AwsResourceType2["eventBridgeSchema"] = "AWS::EventSchemas::Schema";
  AwsResourceType2["firewallPolicy"] = "AWS::FMS::Policy";
  AwsResourceType2["lambdaPermission"] = "AWS::Lambda::Permission";
  AwsResourceType2["lambdaFunction"] = "AWS::Lambda::Function";
  AwsResourceType2["lambdaAlias"] = "AWS::Lambda::Alias";
  AwsResourceType2["s3Bucket"] = "AWS::S3::Bucket";
  AwsResourceType2["s3AccessPoint"] = "AWS::S3::AccessPoint";
  AwsResourceType2["snsSubscription"] = "AWS::SNS::Subscription";
  AwsResourceType2["snsTopic"] = "AWS::SNS::Topic";
  AwsResourceType2["sesTemplate"] = "AWS::SES::Template";
  AwsResourceType2["sesContactList"] = "AWS::SES::ContactList";
  AwsResourceType2["sesReceiptRule"] = "AWS::SES::ReceiptRule";
  AwsResourceType2["sesReceiptFilter"] = "AWS::SES::ReceiptFilter";
  AwsResourceType2["sesReceiptRuleSet"] = "AWS::SES::ReceiptRuleSet";
  AwsResourceType2["secretsManagerSecret"] = "AWS::SecretsManager::Secret";
  AwsResourceType2["ssmParameter"] = "AWS::SSM:Parameter";
  AwsResourceType2["snsTopicPolicy"] = "AWS::SNS::TopicPolicy";
  AwsResourceType2["sqsQueue"] = "AWS::SQS::Queue";
  AwsResourceType2["sqsQueuePolicy"] = "AWS::SQS::QueuePolicy";
  AwsResourceType2["stepFunctionsActivity"] = "AWS::StepFunctions::Activity";
  AwsResourceType2["stepFunctionsStateMachine"] = "AWS::StepFunctions::StateMachine";
  AwsResourceType2["waf2RuleGroup"] = "AWS::WAFv2::RuleGroup";
  AwsResourceType2["waf2WebAcl"] = "AWS::WAFv2::WebACL";
  return AwsResourceType2;
})(AwsResourceType || {});

// src/aws/aws-type-guards.ts
function isProxyRequestContextV2(ctx) {
  return ctx.version === "2.0";
}
function isLambdaFunctionArn(arn) {
  return /arn:aws(-cn|-us-gov)*:lambda:[\w-]+:(\d+):function:.*/.test(arn);
}
function isLambdaArn(arn) {
  return /arn:aws(-cn|-us-gov)*:lambda:[\w-]+:(\d+):.*:.*/.test(arn);
}
function isAwsRegion(region) {
  return typeof region === "string" && /^(us|eu|af|ap|me|sa|ca)\-(north|south|east|west|central|northeast|southeast)\-[1-3]$/.test(
    region
  );
}
function isAwsStage(stage) {
  return typeof stage === "string" && /(dev|test|prod|stage|sb_\w+|feature_\w+)/.test(stage);
}
function isEventBridgeArn(arn) {
  return /arn:(.*?):events:/.test(arn);
}
function isStepFunctionArn(arn) {
  return /arn:(aws|aws-cn|aws-us-gov):states:.*:stateMachine/.test(arn);
}
function isArn(arn) {
  return /arn:(aws|aws-cn|aws-us-gov):(.*):/.test(arn);
}
function isArnPartition(partition) {
  return typeof partition === "string" && /(aws|aws-cn|aws-us-gov)/.test(partition);
}
function isArnResource(resource) {
  return /(function|logs|states|user|group|stateMachine|event-bus|table)/.test(resource);
}
function isArnService(service) {
  return /(lambda|iam|logs|states|sqs|sns|dynamodb|events)/.test(service);
}
function isAwsAccountId(accountId) {
  return accountId === "aws" || typeof accountId === "string" && !isNaN(Number(accountId));
}

// src/aws/aws.ts
function isLambdaProxyRequest(message) {
  return typeof message === "object" && (["1.0", "2.0"].some(
    (v) => v === message.version
  ) || message.resource && message.path && message.httpMethod) ? true : false;
}

// src/deprecated.ts
var LambdaEventParser = class {
  static parse(event) {
    const request = isLambdaProxyRequest(event) ? JSON.parse(event.body) : event;
    return isLambdaProxyRequest(event) ? {
      request: JSON.parse(event.body),
      apiGateway: event
    } : request;
  }
};
function separateFileAndFilepath(fileinfo) {
  const parts = fileinfo.split("/");
  return parts.length < 2 ? { file: fileinfo, filePath: "" } : { file: parts.pop(), filePath: parts.slice(0, parts.length - 1).join("/") };
}
function fileMapper(i) {
  const { file, filePath } = separateFileAndFilepath(i.file);
  i.file = file;
  if (filePath) {
    i.filePath = filePath;
    i.shortPath = filePath.split("/").slice(-3).join("/");
  }
  return i;
}
function parseStack(stack, options = {}) {
  const ignorePatterns = options.ignorePatterns || [];
  const limit = options.limit;
  const structured = stack.replace(/Error.*\n.*?at/, " at").replace(
    /at (\S*) \(([^\0]*?)\:([0-9]*?)\:([0-9]*)\)| at (\/.*?)\:([0-9]*?)\:([0-9]*)/g,
    '{ "fn": "$1", "line": $3$6, "col": $4$7, "file": "$2$5" },'
  );
  let parsed;
  try {
    parsed = JSON.parse(`[ ${structured.replace(/\,$/, "")} ]`).filter((i) => {
      let result = true;
      ignorePatterns.forEach((pattern) => {
        if (i.fn.includes(pattern) || i.file.includes(pattern)) {
          result = false;
        }
      });
      return result;
    }).map(fileMapper);
    if (limit) {
      parsed = parsed.slice(0, limit);
    }
  } catch (error) {
    error.message = `parsing-error: ${error.message}}`;
    throw error;
  }
  return parsed;
}
function getBodyFromPossibleLambdaProxyRequest(input) {
  return isLambdaProxyRequest(input) ? JSON.parse(input.body) : input;
}

// src/http.ts
var HttpStatusCodes = /* @__PURE__ */ ((HttpStatusCodes2) => {
  HttpStatusCodes2[HttpStatusCodes2["Continue"] = 100] = "Continue";
  HttpStatusCodes2[HttpStatusCodes2["Success"] = 200] = "Success";
  HttpStatusCodes2[HttpStatusCodes2["Created"] = 201] = "Created";
  HttpStatusCodes2[HttpStatusCodes2["Accepted"] = 202] = "Accepted";
  HttpStatusCodes2[HttpStatusCodes2["NoContent"] = 204] = "NoContent";
  HttpStatusCodes2[HttpStatusCodes2["MovedPermenantly"] = 301] = "MovedPermenantly";
  HttpStatusCodes2[HttpStatusCodes2["TemporaryRedirect"] = 307] = "TemporaryRedirect";
  HttpStatusCodes2[HttpStatusCodes2["NotModified"] = 304] = "NotModified";
  HttpStatusCodes2[HttpStatusCodes2["BadRequest"] = 400] = "BadRequest";
  HttpStatusCodes2[HttpStatusCodes2["Unauthorized"] = 401] = "Unauthorized";
  HttpStatusCodes2[HttpStatusCodes2["PaymentRequired"] = 402] = "PaymentRequired";
  HttpStatusCodes2[HttpStatusCodes2["Forbidden"] = 403] = "Forbidden";
  HttpStatusCodes2[HttpStatusCodes2["NotFound"] = 404] = "NotFound";
  HttpStatusCodes2[HttpStatusCodes2["MethodNotAllowed"] = 405] = "MethodNotAllowed";
  HttpStatusCodes2[HttpStatusCodes2["RequestTimeout"] = 408] = "RequestTimeout";
  HttpStatusCodes2[HttpStatusCodes2["Conflict"] = 409] = "Conflict";
  HttpStatusCodes2[HttpStatusCodes2["Gone"] = 410] = "Gone";
  HttpStatusCodes2[HttpStatusCodes2["IAmATeapot"] = 418] = "IAmATeapot";
  HttpStatusCodes2[HttpStatusCodes2["UnprocessableEntity"] = 422] = "UnprocessableEntity";
  HttpStatusCodes2[HttpStatusCodes2["TooManyRequests"] = 429] = "TooManyRequests";
  HttpStatusCodes2[HttpStatusCodes2["InternalServerError"] = 500] = "InternalServerError";
  HttpStatusCodes2[HttpStatusCodes2["NotImplemented"] = 501] = "NotImplemented";
  HttpStatusCodes2[HttpStatusCodes2["BadGateway"] = 502] = "BadGateway";
  HttpStatusCodes2[HttpStatusCodes2["ServiceUnavailable"] = 503] = "ServiceUnavailable";
  HttpStatusCodes2[HttpStatusCodes2["GatewayTimeout"] = 504] = "GatewayTimeout";
  HttpStatusCodes2[HttpStatusCodes2["AuthenticationRequired"] = 511] = "AuthenticationRequired";
  return HttpStatusCodes2;
})(HttpStatusCodes || {});

// src/type-guards.ts
function isTypeSubtype(input) {
  return typeof input === "string" && input.split("/").length === 2;
}
function isNonNullObject(input) {
  return typeof input === "object" && input !== null ? true : false;
}

// src/npm.ts
function isNpmInfoRepository(repository) {
  return isNonNullObject(repository) && repository.url;
}

// src/photography.ts
var ExifCompression = /* @__PURE__ */ ((ExifCompression2) => {
  ExifCompression2[ExifCompression2["Uncompressed"] = 1] = "Uncompressed";
  ExifCompression2[ExifCompression2["CCITT"] = 2] = "CCITT";
  ExifCompression2[ExifCompression2["T4Group3Fax"] = 3] = "T4Group3Fax";
  ExifCompression2[ExifCompression2["T6Group3Fax"] = 4] = "T6Group3Fax";
  ExifCompression2[ExifCompression2["LZW"] = 5] = "LZW";
  ExifCompression2[ExifCompression2["JpgOldStyle"] = 6] = "JpgOldStyle";
  ExifCompression2[ExifCompression2["Jpg"] = 7] = "Jpg";
  ExifCompression2[ExifCompression2["AdobeDeflate"] = 8] = "AdobeDeflate";
  ExifCompression2[ExifCompression2["JBigBw"] = 9] = "JBigBw";
  ExifCompression2[ExifCompression2["JBigColor"] = 10] = "JBigColor";
  ExifCompression2[ExifCompression2["JpegAlt"] = 99] = "JpegAlt";
  ExifCompression2[ExifCompression2["Kodak262"] = 262] = "Kodak262";
  ExifCompression2[ExifCompression2["Next"] = 32766] = "Next";
  ExifCompression2[ExifCompression2["SonyRawCompressed"] = 32767] = "SonyRawCompressed";
  ExifCompression2[ExifCompression2["PackedRaw"] = 32769] = "PackedRaw";
  ExifCompression2[ExifCompression2["SamsungSrwCompressed"] = 32770] = "SamsungSrwCompressed";
  ExifCompression2[ExifCompression2["CCIRLEW"] = 32771] = "CCIRLEW";
  ExifCompression2[ExifCompression2["SamsungSrwCompressed2"] = 32772] = "SamsungSrwCompressed2";
  ExifCompression2[ExifCompression2["Packbits"] = 32773] = "Packbits";
  ExifCompression2[ExifCompression2["Thunderscan"] = 32809] = "Thunderscan";
  ExifCompression2[ExifCompression2["KodakKdcCompressed"] = 32867] = "KodakKdcCompressed";
  ExifCompression2[ExifCompression2["IT8CTPAD"] = 32895] = "IT8CTPAD";
  ExifCompression2[ExifCompression2["IT8LW"] = 32896] = "IT8LW";
  ExifCompression2[ExifCompression2["IT8MP"] = 32897] = "IT8MP";
  ExifCompression2[ExifCompression2["IT8BL"] = 32898] = "IT8BL";
  ExifCompression2[ExifCompression2["PixarFilm"] = 32908] = "PixarFilm";
  ExifCompression2[ExifCompression2["PixarLog"] = 32909] = "PixarLog";
  ExifCompression2[ExifCompression2["Deflate"] = 32946] = "Deflate";
  ExifCompression2[ExifCompression2["DCS"] = 32947] = "DCS";
  ExifCompression2[ExifCompression2["AperioJpeg2000YCbCr"] = 33003] = "AperioJpeg2000YCbCr";
  ExifCompression2[ExifCompression2["AperioJpeg2000RGB"] = 33005] = "AperioJpeg2000RGB";
  ExifCompression2[ExifCompression2["JBig"] = 34661] = "JBig";
  ExifCompression2[ExifCompression2["SGILog"] = 34676] = "SGILog";
  ExifCompression2[ExifCompression2["SGILog24"] = 34677] = "SGILog24";
  ExifCompression2[ExifCompression2["Jpeg2000"] = 34712] = "Jpeg2000";
  ExifCompression2[ExifCompression2["NikonNEFCompressed"] = 34713] = "NikonNEFCompressed";
  ExifCompression2[ExifCompression2["JBig2TiffFx"] = 34715] = "JBig2TiffFx";
  ExifCompression2[ExifCompression2["MicrosoftBinaryLevelCodec"] = 34718] = "MicrosoftBinaryLevelCodec";
  ExifCompression2[ExifCompression2["MicrosoftProgressiveTransformCodec"] = 34719] = "MicrosoftProgressiveTransformCodec";
  ExifCompression2[ExifCompression2["MicrosoftVector"] = 34720] = "MicrosoftVector";
  ExifCompression2[ExifCompression2["ESRCLerc"] = 34887] = "ESRCLerc";
  ExifCompression2[ExifCompression2["LossyJpeg"] = 34892] = "LossyJpeg";
  ExifCompression2[ExifCompression2["LZMA2"] = 34925] = "LZMA2";
  ExifCompression2[ExifCompression2["Zstd"] = 34926] = "Zstd";
  ExifCompression2[ExifCompression2["WepP"] = 34927] = "WepP";
  ExifCompression2[ExifCompression2["PNG"] = 34933] = "PNG";
  ExifCompression2[ExifCompression2["JpegXR"] = 34934] = "JpegXR";
  ExifCompression2[ExifCompression2["KodakDCRCompressed"] = 65e3] = "KodakDCRCompressed";
  ExifCompression2[ExifCompression2["PentaxPEFCompressed"] = 65535] = "PentaxPEFCompressed";
  return ExifCompression2;
})(ExifCompression || {});
var ExifLightSource = /* @__PURE__ */ ((ExifLightSource2) => {
  ExifLightSource2[ExifLightSource2["Unknown"] = 0] = "Unknown";
  ExifLightSource2[ExifLightSource2["Daylight"] = 1] = "Daylight";
  ExifLightSource2[ExifLightSource2["Flourescent"] = 2] = "Flourescent";
  ExifLightSource2[ExifLightSource2["Tungsten"] = 3] = "Tungsten";
  ExifLightSource2[ExifLightSource2["Flash"] = 4] = "Flash";
  ExifLightSource2[ExifLightSource2["FineWeather"] = 5] = "FineWeather";
  ExifLightSource2[ExifLightSource2["Cloudy"] = 6] = "Cloudy";
  ExifLightSource2[ExifLightSource2["Shade"] = 7] = "Shade";
  ExifLightSource2[ExifLightSource2["DaylightFlourescent"] = 8] = "DaylightFlourescent";
  ExifLightSource2[ExifLightSource2["DayWhiteFlourescent"] = 9] = "DayWhiteFlourescent";
  ExifLightSource2[ExifLightSource2["CoolWhiteFlourescent"] = 10] = "CoolWhiteFlourescent";
  ExifLightSource2[ExifLightSource2["WhiteFlourescent"] = 11] = "WhiteFlourescent";
  ExifLightSource2[ExifLightSource2["WarmWhiteFlourescent"] = 12] = "WarmWhiteFlourescent";
  ExifLightSource2[ExifLightSource2["StandardLightA"] = 13] = "StandardLightA";
  ExifLightSource2[ExifLightSource2["StandardLightB"] = 14] = "StandardLightB";
  ExifLightSource2[ExifLightSource2["StandardLightC"] = 15] = "StandardLightC";
  ExifLightSource2[ExifLightSource2["D55"] = 16] = "D55";
  ExifLightSource2[ExifLightSource2["D65"] = 17] = "D65";
  ExifLightSource2[ExifLightSource2["D75"] = 18] = "D75";
  ExifLightSource2[ExifLightSource2["D50"] = 19] = "D50";
  ExifLightSource2[ExifLightSource2["ISOStudioTungten"] = 20] = "ISOStudioTungten";
  ExifLightSource2[ExifLightSource2["Other"] = 255] = "Other";
  return ExifLightSource2;
})(ExifLightSource || {});
var ExifFlashValues = /* @__PURE__ */ ((ExifFlashValues2) => {
  ExifFlashValues2[ExifFlashValues2["NoFlash"] = 0] = "NoFlash";
  ExifFlashValues2[ExifFlashValues2["Fired"] = 1] = "Fired";
  ExifFlashValues2[ExifFlashValues2["FiredReturnNotDetected"] = 5] = "FiredReturnNotDetected";
  ExifFlashValues2[ExifFlashValues2["FiredReturnDetected"] = 7] = "FiredReturnDetected";
  ExifFlashValues2[ExifFlashValues2["OnDidNotFire"] = 8] = "OnDidNotFire";
  ExifFlashValues2[ExifFlashValues2["OnFired"] = 9] = "OnFired";
  ExifFlashValues2[ExifFlashValues2["OnReturnNotDetected"] = 13] = "OnReturnNotDetected";
  ExifFlashValues2[ExifFlashValues2["OnReturnDetected"] = 15] = "OnReturnDetected";
  ExifFlashValues2[ExifFlashValues2["OffDidNotFire"] = 16] = "OffDidNotFire";
  ExifFlashValues2[ExifFlashValues2["OffDidNotFireReturnNotDetected"] = 20] = "OffDidNotFireReturnNotDetected";
  ExifFlashValues2[ExifFlashValues2["AutoDidNotFire"] = 24] = "AutoDidNotFire";
  ExifFlashValues2[ExifFlashValues2["AutoFired"] = 25] = "AutoFired";
  ExifFlashValues2[ExifFlashValues2["AutoFiredReturnNotDetected"] = 29] = "AutoFiredReturnNotDetected";
  ExifFlashValues2[ExifFlashValues2["AutoFiredReturnDetected"] = 31] = "AutoFiredReturnDetected";
  ExifFlashValues2[ExifFlashValues2["NoFlashFunction"] = 32] = "NoFlashFunction";
  ExifFlashValues2[ExifFlashValues2["OffNoFlashFunction"] = 48] = "OffNoFlashFunction";
  ExifFlashValues2[ExifFlashValues2["FiredRedEyeReduction"] = 65] = "FiredRedEyeReduction";
  ExifFlashValues2[ExifFlashValues2["FiredRedEyeReductionReturnNotDetected"] = 69] = "FiredRedEyeReductionReturnNotDetected";
  ExifFlashValues2[ExifFlashValues2["FiredRedEyeReductionReturnDetected"] = 71] = "FiredRedEyeReductionReturnDetected";
  ExifFlashValues2[ExifFlashValues2["OnRedEyeReduction"] = 73] = "OnRedEyeReduction";
  ExifFlashValues2[ExifFlashValues2["OnRedEyeReductionReturnNotDetected"] = 77] = "OnRedEyeReductionReturnNotDetected";
  ExifFlashValues2[ExifFlashValues2["OnRedEyeReductionReturnDetected"] = 79] = "OnRedEyeReductionReturnDetected";
  ExifFlashValues2[ExifFlashValues2["OffRedEyeReduction"] = 80] = "OffRedEyeReduction";
  ExifFlashValues2[ExifFlashValues2["AutoDidNotFireRedEyeReduction"] = 88] = "AutoDidNotFireRedEyeReduction";
  ExifFlashValues2[ExifFlashValues2["AutoFiredRedEyeReduction"] = 89] = "AutoFiredRedEyeReduction";
  ExifFlashValues2[ExifFlashValues2["AutoFiredRedEyeReductionNotDetected"] = 89] = "AutoFiredRedEyeReductionNotDetected";
  ExifFlashValues2[ExifFlashValues2["AutoFiredRedEyeReductionDetected"] = 93] = "AutoFiredRedEyeReductionDetected";
  return ExifFlashValues2;
})(ExifFlashValues || {});
var ExifPreviewColorSpace = /* @__PURE__ */ ((ExifPreviewColorSpace2) => {
  ExifPreviewColorSpace2[ExifPreviewColorSpace2["Unknown"] = 0] = "Unknown";
  ExifPreviewColorSpace2[ExifPreviewColorSpace2["GrayGamma22"] = 1] = "GrayGamma22";
  ExifPreviewColorSpace2[ExifPreviewColorSpace2["sRGB"] = 2] = "sRGB";
  ExifPreviewColorSpace2[ExifPreviewColorSpace2["AdobeRGB"] = 3] = "AdobeRGB";
  ExifPreviewColorSpace2[ExifPreviewColorSpace2["ProPhotoRGB"] = 4] = "ProPhotoRGB";
  return ExifPreviewColorSpace2;
})(ExifPreviewColorSpace || {});
var ExifEmbedPolicy = /* @__PURE__ */ ((ExifEmbedPolicy2) => {
  ExifEmbedPolicy2[ExifEmbedPolicy2["AllowCopying"] = 0] = "AllowCopying";
  ExifEmbedPolicy2[ExifEmbedPolicy2["EmbedIfUsed"] = 1] = "EmbedIfUsed";
  ExifEmbedPolicy2[ExifEmbedPolicy2["NeverEmbed"] = 2] = "NeverEmbed";
  ExifEmbedPolicy2[ExifEmbedPolicy2["NoRestrictions"] = 3] = "NoRestrictions";
  return ExifEmbedPolicy2;
})(ExifEmbedPolicy || {});
var ExifSubjectDistance = /* @__PURE__ */ ((ExifSubjectDistance2) => {
  ExifSubjectDistance2[ExifSubjectDistance2["Unknown"] = 0] = "Unknown";
  ExifSubjectDistance2[ExifSubjectDistance2["Macro"] = 1] = "Macro";
  ExifSubjectDistance2[ExifSubjectDistance2["Close"] = 2] = "Close";
  ExifSubjectDistance2[ExifSubjectDistance2["Distant"] = 3] = "Distant";
  return ExifSubjectDistance2;
})(ExifSubjectDistance || {});
var ExifSharpness = /* @__PURE__ */ ((ExifSharpness2) => {
  ExifSharpness2[ExifSharpness2["Normal"] = 0] = "Normal";
  ExifSharpness2[ExifSharpness2["Soft"] = 1] = "Soft";
  ExifSharpness2[ExifSharpness2["Hard"] = 2] = "Hard";
  return ExifSharpness2;
})(ExifSharpness || {});
var ExifSceneCaptureType = /* @__PURE__ */ ((ExifSceneCaptureType2) => {
  ExifSceneCaptureType2[ExifSceneCaptureType2["Standard"] = 0] = "Standard";
  ExifSceneCaptureType2[ExifSceneCaptureType2["Landscape"] = 1] = "Landscape";
  ExifSceneCaptureType2[ExifSceneCaptureType2["Portrait"] = 2] = "Portrait";
  ExifSceneCaptureType2[ExifSceneCaptureType2["Night"] = 3] = "Night";
  ExifSceneCaptureType2[ExifSceneCaptureType2["Other"] = 4] = "Other";
  return ExifSceneCaptureType2;
})(ExifSceneCaptureType || {});
var ExifGainControl = /* @__PURE__ */ ((ExifGainControl2) => {
  ExifGainControl2[ExifGainControl2["None"] = 0] = "None";
  ExifGainControl2[ExifGainControl2["LowGainUp"] = 1] = "LowGainUp";
  ExifGainControl2[ExifGainControl2["HighGainUp"] = 2] = "HighGainUp";
  ExifGainControl2[ExifGainControl2["LowGainDown"] = 3] = "LowGainDown";
  ExifGainControl2[ExifGainControl2["HighGainDown"] = 4] = "HighGainDown";
  return ExifGainControl2;
})(ExifGainControl || {});
var ExifContrast = /* @__PURE__ */ ((ExifContrast2) => {
  ExifContrast2[ExifContrast2["Normal"] = 0] = "Normal";
  ExifContrast2[ExifContrast2["Low"] = 1] = "Low";
  ExifContrast2[ExifContrast2["High"] = 2] = "High";
  return ExifContrast2;
})(ExifContrast || {});
var ExifSaturation = /* @__PURE__ */ ((ExifSaturation2) => {
  ExifSaturation2[ExifSaturation2["Normal"] = 0] = "Normal";
  ExifSaturation2[ExifSaturation2["Low"] = 1] = "Low";
  ExifSaturation2[ExifSaturation2["High"] = 2] = "High";
  return ExifSaturation2;
})(ExifSaturation || {});

// src/security.ts
function isBearerToken(token) {
  return typeof token === "string" && /^Bearer /.test(token);
}

// src/aliases/datetime.ts
function isIso8601DateTime(timestamp) {
  return typeof timestamp === "string" && (timestamp.length === 24 || timestamp.length === 27) && /(\d{4}|[+-]\d{6})-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3}Z/.test(timestamp);
}

// src/serverless/serverless-constants.ts
var AWS_REGIONS = [
  "us-east-1",
  "us-east-2",
  "us-west-1",
  "us-west-2",
  "eu-west-1",
  "eu-west-2",
  "eu-west-3",
  "eu-north-1",
  "eu-central-1",
  "sa-east-1",
  "ca-central-1",
  "ap-south-1",
  "ap-northeast-1",
  "ap-northeast-2",
  "ap-northeast-3",
  "ap-southeast-1",
  "ap-southeast-2"
];

// src/serverless/serverless-function.ts
function isServerlessFunctionHandler(config) {
  return config.handler ? true : false;
}
function isServerlessFunctionImage(config) {
  return config.image ? true : false;
}

// src/serverless/step-functions.ts
var StepFunctionMissingDataTreatment = /* @__PURE__ */ ((StepFunctionMissingDataTreatment2) => {
  StepFunctionMissingDataTreatment2["missing"] = "missing";
  StepFunctionMissingDataTreatment2["ignore"] = "ignore";
  StepFunctionMissingDataTreatment2["breaching"] = "breaching";
  StepFunctionMissingDataTreatment2["notBreaching"] = "notBreaching";
  return StepFunctionMissingDataTreatment2;
})(StepFunctionMissingDataTreatment || {});

// src/serverless-plugins/serverless-bind-deployment-id.ts
function createBindDeploymentConfig(config, methodSettings) {
  const defaultMethodSettings = [
    {
      DataTraceEnabled: true,
      HttpMethod: "*",
      LoggingLevel: "INFO",
      ResourcePath: "/*",
      MetricsEnabled: true
    }
  ];
  const stageName = `${config.service}-${config.stage}`;
  const defaultConfig = {
    resources: {
      Resources: {
        PathMapping: {
          Type: "AWS::ApiGateway::BasePathMapping",
          DependsOn: "ApiGatewayStage",
          Properties: {
            DomainName: config.domainName ? config.domainName : void 0,
            RestApiId: {
              Ref: "ApiGatewayRestApi"
            },
            Stage: stageName
          }
        },
        __deployment__: {
          Properties: {
            Description: "(default deployment description)"
          }
        },
        ApiGatewayStage: {
          Type: "AWS::ApiGateway::Stage",
          Properties: {
            DeploymentId: {
              Ref: "__deployment__"
            },
            RestApiId: {
              Ref: "ApiGatewayRestApi"
            },
            StageName: stageName,
            MethodSettings: methodSettings || defaultMethodSettings
          }
        }
      }
    }
  };
  return { ...defaultConfig, ...config };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  AWS_REGIONS,
  AwsRegionName,
  AwsResourceType,
  ExifCompression,
  ExifContrast,
  ExifEmbedPolicy,
  ExifFlashValues,
  ExifGainControl,
  ExifLightSource,
  ExifPreviewColorSpace,
  ExifSaturation,
  ExifSceneCaptureType,
  ExifSharpness,
  ExifSubjectDistance,
  HttpStatusCodes,
  LambdaEventParser,
  StepFunctionMissingDataTreatment,
  createBindDeploymentConfig,
  getBodyFromPossibleLambdaProxyRequest,
  isArn,
  isArnPartition,
  isArnResource,
  isArnService,
  isAwsAccountId,
  isAwsRegion,
  isAwsStage,
  isBearerToken,
  isEventBridgeArn,
  isIso8601DateTime,
  isLambdaArn,
  isLambdaFunctionArn,
  isLambdaProxyRequest,
  isNonNullObject,
  isNpmInfoRepository,
  isProxyRequestContextV2,
  isServerlessFunctionHandler,
  isServerlessFunctionImage,
  isStepFunctionArn,
  isTypeSubtype,
  parseStack,
  wait
});
