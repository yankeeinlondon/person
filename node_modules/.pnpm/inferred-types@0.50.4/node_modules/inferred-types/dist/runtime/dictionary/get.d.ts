import type { Narrowable, DotPathFor, Get, Suggest } from "src/types/index";
import { NoDefaultValue, NotDefined } from "src/constants/index";
export interface GetOptions<TDefVal extends Narrowable, TInvalid extends Narrowable> {
    /**
     * Typically when getting a valid dotpath and the value evaluates to _undefined_
     * then the value returned is _undefined_ but if you'd prefer to put something else
     * in here you may.
     */
    defaultValue?: TDefVal;
    /**
     * Typically when a dotpath is invalid for a given item then this item
     * is set as a `ErrorCondition<'invalid-dot-path'>` but if you'd like
     * to set it to something else you may.
     *
     * Note: a common replacement would be the `Never` constant from this library
     * as it "reports" as being `never` but allows for a more sophisticated
     * handling process to follow.
     */
    handleInvalidDotpath?: TInvalid;
}
/**
 * **get**(obj, dotPath, [defVal])
 *
 * Gets a value in a deeply nested object while attempting to preserve type information
 * (a default value is allowed as optional param).
 *
 * - if the dot-path is invalid then an `ErrorCondition` will be returned, unless
 * a defaultValue is provided in which case this will be returned instead
 * - this function is also VueJS _aware_ in the sense that it can also traverse
 * VueJS `ref` properties when encountered
 *
 * ```ts
 * const prop = get(obj, "foo.bar.baz", "nothing there chief!");
 * ```
 */
export declare function get<TValue extends Narrowable | readonly unknown[], TDotPath extends Suggest<DotPathFor<TValue>>, TDefVal extends Narrowable = NoDefaultValue, TInvalid extends Narrowable = NotDefined>(value: TValue, dotPath: TDotPath | null, options?: GetOptions<TDefVal, TInvalid>): Get<TValue, TDotPath>;
//# sourceMappingURL=get.d.ts.map