import { NO_DEFAULT_VALUE, NOT_DEFINED } from "src/constants/index";
import { createErrorCondition, isTruthy, hasIndexOf, isSpecificConstant, hasDefaultValue, isContainer, isRef, indexOf } from "src/runtime/index";
/** updates based on whether segment is a Ref or not */
function updatedDotPath(value, dotpath, segment) {
    return isRef(value)
        ? dotpath.replace(segment, `Ref(${segment})`)
        : dotpath;
}
/**
 * **getValue**(value, dotpath, defaultValue, handler, fullDotPath)
 */
function getValue(value, dotPath, defaultValue, handleInvalid, fullDotPath) {
    /** the remaining segments that need processing */
    const pathSegments = isTruthy(dotPath)
        ? dotPath.split(".")
        : [];
    /** current index property */
    const idx = pathSegments[0];
    /**
     * dotpath _will_ need to recurse further to
     * reach destination
     **/
    const hasMoreSegments = pathSegments.length > 1;
    /** whether or not the value is indexable or not */
    const valueIsIndexable = isContainer(value) && hasIndexOf(value, idx);
    /** has handler for invalid dotpath */
    const hasHandler = !isSpecificConstant("not-defined")(handleInvalid);
    const invalidDotPath = createErrorCondition("invalid-dot-path", `The segment "${idx}" in the dotpath "${fullDotPath}" was not indexable and no default value existed on: ${JSON.stringify(value)}`);
    const current = (hasMoreSegments
        ? isContainer(value) && idx in value
            ? getValue(indexOf(value, idx), pathSegments.join(".").replace(`${idx}.`, ""), defaultValue, handleInvalid, updatedDotPath(value, fullDotPath, idx))
            : hasHandler
                ? handleInvalid
                : invalidDotPath
        : valueIsIndexable
            ? hasDefaultValue(hasDefaultValue)
                ? (indexOf(value, idx) || defaultValue)
                : indexOf(value, idx)
            : hasHandler ? handleInvalid : invalidDotPath);
    return current;
}
/**
 * **get**(obj, dotPath, [defVal])
 *
 * Gets a value in a deeply nested object while attempting to preserve type information
 * (a default value is allowed as optional param).
 *
 * - if the dot-path is invalid then an `ErrorCondition` will be returned, unless
 * a defaultValue is provided in which case this will be returned instead
 * - this function is also VueJS _aware_ in the sense that it can also traverse
 * VueJS `ref` properties when encountered
 *
 * ```ts
 * const prop = get(obj, "foo.bar.baz", "nothing there chief!");
 * ```
 */
export function get(value, dotPath, options = {
    defaultValue: NO_DEFAULT_VALUE,
    handleInvalidDotpath: NOT_DEFINED
}) {
    const outcome = (dotPath === null || dotPath === ""
        ? value
        : getValue(value, dotPath, options?.defaultValue || NO_DEFAULT_VALUE, options?.handleInvalidDotpath || NOT_DEFINED, String(dotPath)));
    return outcome;
}
