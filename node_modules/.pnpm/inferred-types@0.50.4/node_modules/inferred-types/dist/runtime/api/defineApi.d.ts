import { Api, AsApi, AsEscapeFunction, AsOptionalParamFn, Dictionary, Narrowable, OnPass, TypedFunction } from "src/types/index";
/**
 * **asEscapeFunction**`(fn)`
 *
 * Accepts a zero-parameter function as an escape function.
 */
export declare const asEscapeFunction: <TFn extends () => Narrowable>(fn: TFn) => AsEscapeFunction<TFn>;
/**
 * **asOptionalParamFunction**`(fn)`
 *
 * Marks a function as being optionally callable with _no parameters_.
 */
export declare const asOptionalParamFunction: <TFn extends (() => any) | ((p1?: any, p2?: any, p3?: any, p4?: any) => any)>(fn: TFn) => AsOptionalParamFn<TFn>;
/**
 * **asApi**`(surface)`
 *
 * Validates an API surface as a stateless API and returns it as `Api<Surface>` if
 * it qualifies, otherwise results in an ErrorCondition.
 */
export declare const asApi: <T extends Dictionary | TypedFunction>(api: T) => OnPass<AsApi<T>, Api<T>>;
//# sourceMappingURL=defineApi.d.ts.map