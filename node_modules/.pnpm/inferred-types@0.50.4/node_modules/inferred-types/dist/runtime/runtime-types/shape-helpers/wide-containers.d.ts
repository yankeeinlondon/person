import { ArrayTypeDefn, AsArray, FromDefn, HandleDoneFn, MapKeyDefn, MapValueDefn, ObjKeyDefn, RecordValueTypeDefn, ShapeCallback, WeakMapKeyDefn, WeakMapValueDefn, WideTokenNames } from "src/types/index";
export declare const record: <TKey extends ObjKeyDefn = "string | symbol", TValue extends RecordValueTypeDefn = "unknown">(_key?: TKey, _value?: TValue) => Record<FromDefn<TKey>, FromDefn<TValue>>;
export declare const array: <T extends ArrayTypeDefn = "unknown[]">(_type?: T) => AsArray<FromDefn<T>>;
export declare const set: <T extends WideTokenNames | ShapeCallback = "unknown">(_type?: T) => T extends ShapeCallback ? Set<HandleDoneFn<ReturnType<T>>> : T extends WideTokenNames ? Set<FromDefn<T>> : Set<unknown>;
export declare const map: <TKey extends MapKeyDefn = "unknown", TValue extends MapValueDefn = "unknown">(_key?: TKey, _value?: TValue) => Map<FromDefn<TKey>, FromDefn<TValue>>;
export declare const weakMap: <TKey extends WeakMapKeyDefn = "object", TValue extends WeakMapValueDefn = "unknown">(_key?: TKey, _value?: TValue) => WeakMap<FromDefn<TKey> extends object ? FromDefn<TKey> : never, FromDefn<TValue>>;
//# sourceMappingURL=wide-containers.d.ts.map