import { FnWithProps, Narrowable, TypedFunction } from "src/types/index";
/**
 * **addFnToProps**(props, [clone]) => (fn) => FnWithProps
 *
 * A higher order function which takes
 *
 * - `props` - key/value pairs to add to the a _future_ function
 * - `clone` - optionally state whether you want to use the future function's
 * type "as is" or you want to purify it's props with a clone (default is `true`)
 *
 * This is partially applied to reveal a function which takes a
 * function as input.
 */
export declare const addFnToProps: <K extends string, N extends Narrowable, TProps extends Record<K, N>, TClone extends boolean | undefined>(props: TProps, _clone_fn?: TClone) => <TFn extends TypedFunction>(fn: TFn) => FnWithProps<TFn, TProps, TClone>;
//# sourceMappingURL=addPropsToFn.d.ts.map