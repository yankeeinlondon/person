import { getUrlPath, getUrlQueryParams, hasUrlQueryParameter, isYouTubeCreatorUrl, isYouTubeFeedUrl, isYouTubeShareUrl, isYouTubeUrl, isYouTubeVideoUrl, isYouTubeVideosInPlaylist, last } from "src/runtime/index";
import { Never } from "src/constants/Never";
/**
 * **getYouTubePageType**`(url)`
 *
 * Returns a `YouTubePageType` description based on the url passed in (assuming
 * that URL is for YouTube). Returns _never_ if not a YouTube URL.
 */
export const getYouTubePageType = (url) => {
    return (isYouTubeUrl(url)
        ? isYouTubeVideoUrl(url) && (hasUrlQueryParameter(url, "v") || isYouTubeShareUrl(url))
            ? hasUrlQueryParameter(url, "list")
                ? isYouTubeShareUrl(url)
                    ? hasUrlQueryParameter(url, "t")
                        ? `play::video::in-list::share-link::with-timestamp`
                        : `play::video::in-list::share-link`
                    : `play::video::in-list`
                : isYouTubeShareUrl(url)
                    ? hasUrlQueryParameter(url, "t")
                        ? `play::video::solo::share-link::with-timestamp`
                        : `play::video::solo::share-link`
                    : `play::video::solo`
            : isYouTubeCreatorUrl(url)
                ? getUrlPath(url).includes("/videos")
                    ? "creator::videos"
                    : getUrlPath(url).includes("/playlists")
                        ? "creator::playlists"
                        : last(getUrlPath(url).split("/")).startsWith("@") ||
                            getUrlPath(url).includes("/featured")
                            ? "creator::featured"
                            : "creator::other"
                : isYouTubeFeedUrl(url)
                    ? isYouTubeFeedUrl(url, "history")
                        ? "feed::history"
                        : isYouTubeFeedUrl(url, "playlists")
                            ? "feed::playlists"
                            : isYouTubeFeedUrl(url, "liked")
                                ? "feed::liked"
                                : isYouTubeFeedUrl(url, "subscriptions")
                                    ? "feed::subscriptions"
                                    : isYouTubeFeedUrl(url, "trending")
                                        ? "feed::trending"
                                        : "feed::other"
                    : isYouTubeVideosInPlaylist(url)
                        ? "playlist::show"
                        : "other"
        : Never);
};
/**
 * **youtubeEmbed**`(url)`
 *
 * Takes a Video URL from YouTube and converts it to a "embed" URL
 * that can be put into an iframe.
 */
export const youtubeEmbed = (url) => {
    if (hasUrlQueryParameter(url, "v")) {
        const id = getUrlQueryParams(url, "v");
        return `https://www.youtube.com/embed/${id}`;
    }
    else if (isYouTubeShareUrl(url)) {
        const id = url.split("/").pop();
        if (id) {
            return `https://www.youtube.com/embed/${id}`;
        }
        else {
            throw new Error(`Unexpected problem parsing share URL -- "${url}" -- into a YouTube embed URL`);
        }
    }
    else {
        throw new Error(`Unexpected URL structure; unable to convert "${url}" to a YouTube embed URL`);
    }
};
/**
 * **youtube**`(url)`
 *
 * Takes a YouTube URL and converts it to a meta-data object
 * that helps describe the intent of the URL.
 */
export const youtubeMeta = (url) => {
    return (isYouTubeUrl(url)
        ? {
            url,
            isYouTubeUrl: true,
            isShareUrl: isYouTubeShareUrl(url),
            pageType: getYouTubePageType(url),
        }
        : {
            url,
            isYouTubeUrl: false
        });
};
