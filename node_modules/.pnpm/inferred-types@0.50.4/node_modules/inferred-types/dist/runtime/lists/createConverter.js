import { Never } from "src/constants/index";
import { isNothing, isObject } from "src/runtime/index";
/**
 * **createConverter**(mapper)
 *
 * A runtime utility which allows for the creation of a function which
 * receives multiple wide types (string, number, boolean, object) and then transform it
 * based on the "wide type" but while retaining the potentially narrow values passed in.
 *
 * The number of wide types which the converter will accept is based on how it configured
 * as there are discrete functions which must be passed in for handling: strings, numbers,
 * booleans, and "objects" (aka, Record<string,any>).
 *
 * ```ts
 * // handles strings and numbers
 * const convert = createConverter({
 *    string: s => `the string was ${s}`,
 *    number: n => `the number was ${n}`,
 * });
 * ```
 */
export function createConverter(mapper) {
    return (input) => {
        let result;
        if (isNothing(input)) {
            result = (mapper.nothing
                ? mapper.nothing(input)
                : Never);
        }
        else if (isObject(input)) {
            result = (mapper.object
                ? mapper.object(input)
                : Never);
        }
        else {
            switch (typeof input) {
                case "string":
                    result = (mapper.string
                        ? mapper.string(input)
                        : Never);
                    break;
                case "number":
                case "bigint":
                    result = (mapper.number
                        ? mapper.number(input)
                        : Never);
                    break;
                case "boolean":
                    result = (mapper.boolean
                        ? mapper.boolean(input)
                        : Never);
                    break;
                default:
                    throw new Error(`Unhandled type: ${typeof input}`);
            }
        }
        return result;
    };
}
