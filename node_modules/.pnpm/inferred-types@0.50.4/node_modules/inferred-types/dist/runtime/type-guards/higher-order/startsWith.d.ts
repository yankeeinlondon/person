import type { Narrowable } from "src/types/index";
/**
 * **StartingWithTypeGuard**`<literal>`
 *
 * A type guard built using the `startsWith` utility.
 */
export type StartingWithTypeGuard<TStartsWith extends string> = <TValue extends Narrowable>(val: TValue) => val is TValue & `${TStartsWith}${string}`;
/**
 * **startsWith**(startingWith) => (val)
 *
 * A higher-level builder pattern which is used to create a TypeGuard
 * which checks whether a string _starts with_ another substring.
 *
 * ```ts
 * // StartingWithTypeGuard<"foo">
 * const foo = startsWith("foo");
 * // true
 * const yup = foo("foobar");
 * // false
 * const nope = foo("bar");
 * // boolean
 * const weWillSee = foo(string);
 * ```
 */
export declare const startsWith: <TStartsWith extends string>(startingWith: TStartsWith) => StartingWithTypeGuard<TStartsWith>;
//# sourceMappingURL=startsWith.d.ts.map