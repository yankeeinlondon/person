import { Extends, If, IsSingleChar, Narrowable, UpperAlphaChar, ValueCallback } from "src/types/index";
type Convert<T, IF, ELSE> = If<Extends<T, UpperAlphaChar>, IF, ELSE>;
/**
 * **ifUppercaseChar**(ch, callbackForMatch, callbackForNoMatch)
 *
 * Tests whether a passed in _character_ is an uppercase character and uses appropriate callback
 * to mutate the value.
 *
 * **Related:** `ifUppercase()`
 */
export declare function ifUppercaseChar<T extends string, IF extends Narrowable, ELSE extends Narrowable>(
/** the character to be tested */
ch: T & IsSingleChar<T> extends true ? T : never, callbackForMatch: ValueCallback<T, IF>, callbackForNoMatch: ValueCallback<T, ELSE>): Convert<T, IF, ELSE>;
export {};
//# sourceMappingURL=ifUppercase.d.ts.map