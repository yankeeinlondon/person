import { RetainAfter } from "src/types/index";
/**
 * **retainAfter**`(content, ...find)`
 *
 * Runtime utility which removes all characters in a given string _until_
 * it finds the first instance of a substring defined in **find** variable.
 *
 * ### Example
 * ```ts
 * // "world"
 * const world = retainAfter("hello world", " ");
 * ```
 *
 * **Related:** `retainAfterInclusive()`
 */
export declare function retainAfter<TContent extends string, TFind extends readonly string[]>(content: TContent, ...find: TFind): RetainAfter<TContent, TFind[number]>;
/**
 * **retainAfterInclusive**`(content, ...find)`
 *
 * Runtime utility which removes all characters in a given string _until_
 * it finds the first instance of a substring defined in **find** variable.
 *
 * ### Example
 * ```ts
 * // " world"
 * const world = retainAfter("hello world", " ");
 * ```
 *
 * **Related:** `retainAfter()`
 */
export declare function retainAfterInclusive<TContent extends string, TFind extends readonly string[]>(content: TContent, ...find: TFind): RetainAfter<TContent, TFind[number], true>;
//# sourceMappingURL=retainAfter.d.ts.map