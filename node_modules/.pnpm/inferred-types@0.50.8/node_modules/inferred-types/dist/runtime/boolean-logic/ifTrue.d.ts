import { IsFalse, IsTrue, Narrowable } from "src/types/index";
/**
 * **ifTrue**
 *
 * Strongly type-aware conditional statement which checks whether a value is
 * _true_. Valid outcomes are:
 *
 * - **IF** - returned when T is narrowly typed as `true`
 * - **ELSE** - returned when T is narrowly typed as `false`
 * - **IF | ELSE** - returned when T is a `boolean` type
 */
export declare function ifTrue<TContent extends Narrowable, TIf extends Narrowable, TElse extends Narrowable>(val: TContent, ifVal: <V extends TContent & true>(val: V) => TIf, elseVal: <V extends Exclude<TContent, true>>(val: V) => TElse): [IsTrue<TContent>] extends [true] ? TIf : [IsFalse<TContent>] extends [true] ? TElse : TIf | TElse;
//# sourceMappingURL=ifTrue.d.ts.map