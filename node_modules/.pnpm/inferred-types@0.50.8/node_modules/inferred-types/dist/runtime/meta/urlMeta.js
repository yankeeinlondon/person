import { isUrl, isIp4Address, isIp6Address, isIpAddress, stripAfter, stripBefore, ensureLeading, stripTrailing, isDomainName, takeNumericCharacters, } from "src/runtime/index";
import { NETWORK_PROTOCOL_LOOKUP } from "src/constants/NetworkConstants";
import { Never } from "src/constants/index";
const PROTOCOLS = Object.values(NETWORK_PROTOCOL_LOOKUP).flat().filter(i => i !== "");
export const getUrlProtocol = (url) => {
    const proto = PROTOCOLS.find(p => url.startsWith(`${p}://`));
    return proto;
};
export const removeUrlProtocol = (url) => {
    return stripBefore(url, "://");
};
const ensurePath = (val) => {
    const val2 = ensureLeading(val, "/");
    return val === ""
        ? ""
        : stripTrailing(val2, "/");
};
export const getUrlPath = (url) => {
    return isUrl(url)
        ? ensurePath(stripAfter(stripBefore(removeUrlProtocol(url), "/"), "?"))
        : Never;
};
/**
 * **getUrlQueryParams**`(url, [specific])`
 *
 * Get's the query parameter's part of a URL and optionally allows
 * you to focus in on a specific key in the query parameters.
 *
 * If you do specify a particular query parameter it will decode
 * the value with URIDecode.
 */
export const getUrlQueryParams = (url, specific = undefined) => {
    const qp = stripBefore(url, "?");
    if (specific) {
        return (qp.includes(`${specific}=`)
            ? decodeURIComponent(stripAfter(stripBefore(qp, (`${specific}=`)), "&").replace(/\+/g, "%20"))
            : undefined);
    }
    return (qp === ""
        ? qp
        : `?${qp}`);
};
export const getUrlPort = (url) => {
    const candidate = takeNumericCharacters(stripBefore(removeUrlProtocol(url), ":"));
    return (candidate === ""
        ? "default"
        : Number(candidate));
};
export const getUrlSource = (url) => {
    const candidate = stripAfter(stripAfter(stripAfter(removeUrlProtocol(url), "/"), "?"), ":");
    return (isIpAddress(candidate) || isDomainName(candidate)
        ? candidate
        : Never);
};
/**
 * **urlMeta**`(url)`
 *
 * Analyzes the string passed in and provides a small dictionary of
 * metadata properties about the URL.
 */
export const urlMeta = (url) => {
    return {
        url,
        isUrl: isUrl(url),
        protocol: getUrlProtocol(url),
        path: getUrlPath(url),
        queryParameters: getUrlQueryParams(url),
        port: getUrlPort(url),
        source: getUrlSource(url),
        isIpAddress: isIpAddress(getUrlSource(url)),
        isIp4Address: isIp4Address(getUrlSource(url)),
        isIp6Address: isIp6Address(getUrlSource(url)),
    };
};
