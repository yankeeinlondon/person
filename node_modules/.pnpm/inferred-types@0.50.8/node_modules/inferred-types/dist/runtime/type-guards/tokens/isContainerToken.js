import { isString } from "src/runtime/index";
export const isObjectToken = (val) => {
    return isString(val) && val.startsWith("<<obj::");
};
export const isRecordToken = (val) => {
    return isString(val) && val.startsWith("<<rec::") && val.endsWith(">>");
};
export const isTupleToken = (val) => {
    return isString(val) && val.startsWith("<<tuple::");
};
export const isArrayToken = (val) => {
    return isString(val) && val.startsWith("<<arr::");
};
export const isMapToken = (val) => {
    return isString(val) && val.startsWith("<<map::");
};
export const isSetToken = (val) => {
    return isString(val) && val.startsWith("<<set::");
};
export const isWeakMapToken = (val) => {
    return isString(val) && val.startsWith("<<weak::");
};
/**
 * **isUnionToken**`(val)`: **val** is `UnionToken`
 */
export const isUnionToken = (val) => {
    return isString(val) && val.startsWith("<<union::[ ");
};
/**
 * **isUnionSetToken**`(val)`: **val** is `UnionSetToken`
 */
export const isUnionSetToken = (val) => {
    return isString(val) && val.startsWith("<<union-set::");
};
/**
 * **isContainerToken**`(val)`: **val** is `ContainerToken`
 */
export const isContainerToken = (val) => {
    return isString(val) && (isObjectToken(val) ||
        isRecordToken(val) ||
        isTupleToken(val) ||
        isArrayToken(val) ||
        isMapToken(val) ||
        isSetToken(val) ||
        isWeakMapToken(val) ||
        isUnionSetToken(val) ||
        isUnionToken(val));
};
