import { AsObject, EnsureKeys } from "src/types/index";
/**
 * **hasKeys**(props) => (obj) => `HasKeys<O,P>`
 *
 * Higher order type guard which on first call generates
 * a type guard that can test for the existence of the
 * properties passed into this first call.
 *
 * ```ts
 * const hasFooBar = hasKeys(["foo", "bar"]); // type guard
 * const hasFooBarToo = hasKeys({foo: 1, bar: 1});
 * ```
 */
export declare const hasKeys: <P extends readonly string[] | [Record<string, unknown>]>(...props: P) => <T>(val: T) => val is T & ([EnsureKeys<AsObject<T>, ["name"]>] extends never[] ? never : EnsureKeys<AsObject<T>, P>);
//# sourceMappingURL=hasKeys.d.ts.map