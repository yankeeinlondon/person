import { KeyValue, Narrowable } from "src/types/index";
/**
 * **entries**
 *
 * Provides an _iterable_ over the passed in dictionary object where each iteration
 * provides a tuple of `[ key, value ]` which preserve type literals.
 *
 * For example:
 * ```ts
 * const obj = { foo: 1, bar: "hi" };
 * // k type is "foo" then "bar"; v type is 1 then "hi"
 * for (const [k, v] of entries(obj)) { ... }
 * ```
 */
export declare function entries<N extends Narrowable, T extends Record<PropertyKey, N>, I extends KeyValue<T, keyof T>>(obj: T): {
    [Symbol.iterator](): Generator<I, void, unknown>;
};
//# sourceMappingURL=entries.d.ts.map