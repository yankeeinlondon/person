import { Narrowable, SimpleContainerToken, SimpleScalarToken, SimpleType, SimpleUnionToken } from "src/types/index";
export declare const asSimpleToken: <T extends Narrowable>(_val: T) => string;
/**
 * **simpleScalarTokenToTypeToken**`(val)`
 *
 * Receives a `SimpleScalarToken` and converts it's runtime value to a
 * more full fledged `TypeToken` while converting the _type_ to be the
 * type that the token represents.
 *
 * **Related:** `simplContainerTokenToTypeToken`, `asTypeToken`
 */
export declare const simpleScalarTokenToTypeToken: <T extends SimpleScalarToken>(val: T) => SimpleType<T>;
/**
 * **simpleUnionTokenToTypeToken**`(val)`
 *
 * Converts a `SimpleUnionToken` to a `TypeToken` and converts the type to
 * the type _represented_ by the token.
 *
 * Note:
 * - when passing in _literals_ such as `opt(42)` it will evaluate the value
 * as being a numeric or a boolean literal and use that type if it is
 */
export declare const simpleUnionTokenToTypeToken: <T extends SimpleUnionToken>(val: T) => SimpleType<T>;
/**
 * **simpleContainerTokenToTypeToken**`(val)`
 *
 * Receives a `SimpleContainerToken` and converts it's runtime value to a
 * more full fledged `TypeToken` while converting the _type_ to be the
 * type that the token represents.
 *
 * **Related:** `simpleScalarTokenToTypeToken`, `asTypeToken`
 */
export declare const simpleContainerTokenToTypeToken: <T extends SimpleContainerToken>(_val: T) => void;
export declare const asTypeToken: <T extends Narrowable>(_val: T) => string;
//# sourceMappingURL=asToken.d.ts.map