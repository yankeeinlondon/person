import { addToken } from "./addToken";
import { regexToken } from "./regexToken";
/**
 * Generates a token and then types it appropriates for the given Singleton
 */
const addSingleton = (token, api) => (...literals) => {
    return (literals.length === 0
        ? api
            ? api
            : addToken(token)
        : literals.length === 1
            ? addToken(token, literals[0])
            : addToken("union", literals
                .map((l) => addToken(token, `${l}`))
                .join(",")));
};
const stringApi = ({
    zip: () => addToken("string-set", "Zip5"),
    zipPlus4: () => addToken("string-set", "Zip5_4"),
    zipCode: () => addToken("string-set", "ZipCode"),
    militaryTime: (resolution) => {
        return addToken("string-set", "militaryTime", resolution || "HH:MM");
    },
    civilianTime: (resolution) => {
        return addToken("string-set", "militaryTime", resolution || "HH:MM");
    },
    numericString: () => addToken("string-set", "numeric"),
    ipv4Address: () => addToken("string-set", "ipv4Address"),
    ipv6Address: () => addToken("string-set", "ipv6Address"),
    regex: (exp, ...literalRepresentation) => {
        const token = regexToken(exp, ...literalRepresentation);
        return token;
    },
    done: () => addToken("string")
});
/**
 * **string**
 *
 * The API surface for adding string tokens
 */
export const string = addSingleton("string", stringApi);
/**
 * **number**
 *
 * The API surface for adding number tokens
 */
export const number = addSingleton("number");
