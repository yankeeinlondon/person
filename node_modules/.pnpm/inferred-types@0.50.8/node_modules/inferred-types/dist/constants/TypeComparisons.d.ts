/**
 * **TYPE_COMPARISONS**
 *
 * A dictionary of all _comparison_ operations along with their `RefType`, description,
 * and `Params`.
 */
export declare const TYPE_COMPARISONS: {
    readonly Extends: [unknown, "extends the type", [(t: {
        readonly boolean: () => boolean;
        readonly string: () => string;
        readonly number: () => number;
        readonly symbol: () => symbol;
        readonly null: () => null;
        readonly function: () => (...args: unknown[]) => unknown;
        readonly tuple: () => readonly unknown[];
        readonly singularTuple: () => [readonly unknown[]];
        readonly object: () => Record<never, unknown> | Record<string | symbol, unknown>;
        readonly emptyObject: () => Record<never, unknown>;
        readonly undefined: () => undefined;
        readonly unknown: () => unknown;
        readonly nothing: () => null | undefined;
        readonly something: () => {};
    }) => unknown]];
    readonly NotExtends: [unknown, "does not extent the type", [(t: {
        readonly boolean: () => boolean;
        readonly string: () => string;
        readonly number: () => number;
        readonly symbol: () => symbol;
        readonly null: () => null;
        readonly function: () => (...args: unknown[]) => unknown;
        readonly tuple: () => readonly unknown[];
        readonly singularTuple: () => [readonly unknown[]];
        readonly object: () => Record<never, unknown> | Record<string | symbol, unknown>;
        readonly emptyObject: () => Record<never, unknown>;
        readonly undefined: () => undefined;
        readonly unknown: () => unknown;
        readonly nothing: () => null | undefined;
        readonly something: () => {};
    }) => unknown]];
    readonly Equals: [unknown, "equals the type", [(t: {
        readonly boolean: () => boolean;
        readonly string: () => string;
        readonly number: () => number;
        readonly symbol: () => symbol;
        readonly null: () => null;
        readonly function: () => (...args: unknown[]) => unknown;
        readonly tuple: () => readonly unknown[];
        readonly singularTuple: () => [readonly unknown[]];
        readonly object: () => Record<never, unknown> | Record<string | symbol, unknown>;
        readonly emptyObject: () => Record<never, unknown>;
        readonly undefined: () => undefined;
        readonly unknown: () => unknown;
        readonly nothing: () => null | undefined;
        readonly something: () => {};
    }) => unknown]];
    readonly NotEqual: [unknown, "does not equal the type", [(t: {
        readonly boolean: () => boolean;
        readonly string: () => string;
        readonly number: () => number;
        readonly symbol: () => symbol;
        readonly null: () => null;
        readonly function: () => (...args: unknown[]) => unknown;
        readonly tuple: () => readonly unknown[];
        readonly singularTuple: () => [readonly unknown[]];
        readonly object: () => Record<never, unknown> | Record<string | symbol, unknown>;
        readonly emptyObject: () => Record<never, unknown>;
        readonly undefined: () => undefined;
        readonly unknown: () => unknown;
        readonly nothing: () => null | undefined;
        readonly something: () => {};
    }) => unknown]];
    readonly Truthy: [unknown, "must be a truthy value", []];
    readonly Falsy: [unknown, "must be a falsy value", []];
    readonly IsSomething: [unknown, "must be 'something' (aka, not null or undefined)", []];
    readonly IsNothing: [unknown, "must be 'nothing' (aka, null or undefined)", []];
    readonly IsString: [string, "must extend a string type", []];
    readonly IsNumber: [number, "must extend a number type", []];
    readonly IsBoolean: [boolean, "must extend a boolean type", []];
    readonly GreaterThan: [number, "must be a numeric literal greater than [[0]]", [(t: {
        readonly boolean: () => boolean;
        readonly string: () => string;
        readonly number: () => number;
        readonly symbol: () => symbol;
        readonly null: () => null;
        readonly function: () => (...args: unknown[]) => unknown;
        readonly tuple: () => readonly unknown[];
        readonly singularTuple: () => [readonly unknown[]];
        readonly object: () => Record<never, unknown> | Record<string | symbol, unknown>;
        readonly emptyObject: () => Record<never, unknown>;
        readonly undefined: () => undefined;
        readonly unknown: () => unknown;
        readonly nothing: () => null | undefined;
        readonly something: () => {};
    }) => number]];
    readonly LessThan: [number, "must be a numeric literal less than [[0]]", [(t: {
        readonly boolean: () => boolean;
        readonly string: () => string;
        readonly number: () => number;
        readonly symbol: () => symbol;
        readonly null: () => null;
        readonly function: () => (...args: unknown[]) => unknown;
        readonly tuple: () => readonly unknown[];
        readonly singularTuple: () => [readonly unknown[]];
        readonly object: () => Record<never, unknown> | Record<string | symbol, unknown>;
        readonly emptyObject: () => Record<never, unknown>;
        readonly undefined: () => undefined;
        readonly unknown: () => unknown;
        readonly nothing: () => null | undefined;
        readonly something: () => {};
    }) => number]];
    readonly StartsWith: [string, "must be a string literal that starts with '[[0]]'", [(t: {
        readonly boolean: () => boolean;
        readonly string: () => string;
        readonly number: () => number;
        readonly symbol: () => symbol;
        readonly null: () => null;
        readonly function: () => (...args: unknown[]) => unknown;
        readonly tuple: () => readonly unknown[];
        readonly singularTuple: () => [readonly unknown[]];
        readonly object: () => Record<never, unknown> | Record<string | symbol, unknown>;
        readonly emptyObject: () => Record<never, unknown>;
        readonly undefined: () => undefined;
        readonly unknown: () => unknown;
        readonly nothing: () => null | undefined;
        readonly something: () => {};
    }) => string]];
    readonly EndsWith: [string, "must be a string literal that ends with '[[0]]'", [(t: {
        readonly boolean: () => boolean;
        readonly string: () => string;
        readonly number: () => number;
        readonly symbol: () => symbol;
        readonly null: () => null;
        readonly function: () => (...args: unknown[]) => unknown;
        readonly tuple: () => readonly unknown[];
        readonly singularTuple: () => [readonly unknown[]];
        readonly object: () => Record<never, unknown> | Record<string | symbol, unknown>;
        readonly emptyObject: () => Record<never, unknown>;
        readonly undefined: () => undefined;
        readonly unknown: () => unknown;
        readonly nothing: () => null | undefined;
        readonly something: () => {};
    }) => string]];
    readonly Includes: [string, "must be a string literal that includes the substring '[[0]]'", [(t: {
        readonly boolean: () => boolean;
        readonly string: () => string;
        readonly number: () => number;
        readonly symbol: () => symbol;
        readonly null: () => null;
        readonly function: () => (...args: unknown[]) => unknown;
        readonly tuple: () => readonly unknown[];
        readonly singularTuple: () => [readonly unknown[]];
        readonly object: () => Record<never, unknown> | Record<string | symbol, unknown>;
        readonly emptyObject: () => Record<never, unknown>;
        readonly undefined: () => undefined;
        readonly unknown: () => unknown;
        readonly nothing: () => null | undefined;
        readonly something: () => {};
    }) => string]];
    readonly ReturnsSomething: [(...args: unknown[]) => unknown, "must be a function which returns 'something' (aka, not null or undefined)", []];
    readonly ReturnsNothing: [(...args: unknown[]) => unknown, "must be a function which returns 'nothing' (aka, null or undefined)", []];
    readonly ReturnsTrue: [(...args: unknown[]) => unknown, "must be a function which returns 'true'", []];
    readonly ReturnsFalse: [(...args: unknown[]) => unknown, "must be a function which returns 'false'", []];
    readonly ReturnsTruthy: [(...args: unknown[]) => unknown, "must be a function which returns a 'truthy' value", []];
    readonly ReturnsFalsy: [(...args: unknown[]) => unknown, "must be a function which returns a 'falsy' value", []];
    readonly ReturnsExtends: [unknown, "must be a function which returns a value which extends [[0]]", [(t: {
        readonly boolean: () => boolean;
        readonly string: () => string;
        readonly number: () => number;
        readonly symbol: () => symbol;
        readonly null: () => null;
        readonly function: () => (...args: unknown[]) => unknown;
        readonly tuple: () => readonly unknown[];
        readonly singularTuple: () => [readonly unknown[]];
        readonly object: () => Record<never, unknown> | Record<string | symbol, unknown>;
        readonly emptyObject: () => Record<never, unknown>;
        readonly undefined: () => undefined;
        readonly unknown: () => unknown;
        readonly nothing: () => null | undefined;
        readonly something: () => {};
    }) => unknown]];
    readonly ReturnsEquals: [unknown, "must be a function which returns a value which equals [[0]]", [(t: {
        readonly boolean: () => boolean;
        readonly string: () => string;
        readonly number: () => number;
        readonly symbol: () => symbol;
        readonly null: () => null;
        readonly function: () => (...args: unknown[]) => unknown;
        readonly tuple: () => readonly unknown[];
        readonly singularTuple: () => [readonly unknown[]];
        readonly object: () => Record<never, unknown> | Record<string | symbol, unknown>;
        readonly emptyObject: () => Record<never, unknown>;
        readonly undefined: () => undefined;
        readonly unknown: () => unknown;
        readonly nothing: () => null | undefined;
        readonly something: () => {};
    }) => unknown]];
    readonly Contains: [readonly unknown[], "must be a tuple and have elements that extends the value [[0]]", [(t: {
        readonly boolean: () => boolean;
        readonly string: () => string;
        readonly number: () => number;
        readonly symbol: () => symbol;
        readonly null: () => null;
        readonly function: () => (...args: unknown[]) => unknown;
        readonly tuple: () => readonly unknown[];
        readonly singularTuple: () => [readonly unknown[]];
        readonly object: () => Record<never, unknown> | Record<string | symbol, unknown>;
        readonly emptyObject: () => Record<never, unknown>;
        readonly undefined: () => undefined;
        readonly unknown: () => unknown;
        readonly nothing: () => null | undefined;
        readonly something: () => {};
    }) => unknown]];
    readonly ContainsSome: [readonly unknown[], "must be a tuple and have elements that extends the value [[0]]", [(t: {
        readonly boolean: () => boolean;
        readonly string: () => string;
        readonly number: () => number;
        readonly symbol: () => symbol;
        readonly null: () => null;
        readonly function: () => (...args: unknown[]) => unknown;
        readonly tuple: () => readonly unknown[];
        readonly singularTuple: () => [readonly unknown[]];
        readonly object: () => Record<never, unknown> | Record<string | symbol, unknown>;
        readonly emptyObject: () => Record<never, unknown>;
        readonly undefined: () => undefined;
        readonly unknown: () => unknown;
        readonly nothing: () => null | undefined;
        readonly something: () => {};
    }) => [readonly unknown[]]]];
};
//# sourceMappingURL=TypeComparisons.d.ts.map