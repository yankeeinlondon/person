import type { NarrowObject, Narrowable } from "src/types/index";
/**
 * **withoutKeys**(obj,...keys)
 *
 * Reduces the key/value pairs in an object with the expressed
 * keys excluded.
 *
 * - this is an alias to the `omit()` utility
 *
 * **Related**: `omit`, `createOmission`
 */
export declare const withoutKeys: <TObj extends NarrowObject<N>, N extends Narrowable, TKeys extends readonly (string & keyof TObj)[]>(dict: TObj, ...exclude: TKeys) => import("src/types/index").WithoutKeys<TObj, [...TKeys]>;
//# sourceMappingURL=withoutKeys.d.ts.map