import { Never } from "src/constants/index";
import { isSimpleContainerToken, isSimpleScalarToken } from "src/runtime/index";
/**
 * **simpleToken**`(token)`
 *
 * Creates a `SimpleToken` which assured to be a valid token type.
 *
 * **Related:** `simpleType()`, `simpleScalarToken()`, `simpleContainerToken()`
 */
export const simpleToken = (token) => token;
/**
 * **simpleScalarToken**`(token)`
 *
 * Creates a `SimpleScalarToken` which is assured to be a valid token type.
 *
 * **Related:** `simpleType()`, `simpleToken()`, `simpleContainerToken()`
 */
export const simpleScalarToken = (token) => token;
/**
 * **simpleContainerToken**`(token)`
 *
 * Creates a `SimpleContainerToken` which assured to be a valid token type.
 *
 * **Related:** `simpleType()`, `simpleToken()`, `simpleScalarToken()`
 */
export const simpleContainerToken = (token) => token;
/**
 * **simpleScalarType**`(token)`
 *
 * Creates a valid runtime token _and_ converts it's type to the type that
 * the token represents.
 *
 * **Related:** `simpleScalarToken`
 */
export const simpleScalarType = (token) => {
    const value = simpleScalarToken(token);
    return value;
};
/**
 * **simpleContainerType**`(token)`
 *
 * Creates a valid runtime token _and_ converts it's type to the type that
 * the token represents.
 *
 * **Related:** `simpleContainerToken`
 */
export const simpleContainerType = (token) => {
    const value = simpleContainerToken(token);
    return value;
};
/**
 * **simpleType**`(token)`
 *
 * Creates a valid runtime token of the `SimpleToken` convention and converts
 * the _type_ to the type that the token represents.
 */
export const simpleType = (token) => {
    const value = (isSimpleScalarToken(token)
        ? simpleScalarType(token)
        : isSimpleContainerToken(token)
            ? simpleContainerToken(token)
            : Never);
    return value;
};
