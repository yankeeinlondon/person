import { Dictionary, Narrowable, OptionalParamFn, TypedFunction } from "src/types/index";
export declare const isEscapeFunction: <T>(val: T) => val is T & (() => unknown);
/**
 * **isOptionalParamFunction**`(val)`
 *
 * A type guard which ensures that the value passed in is not only a _function_
 * but also has the `optionalParam` value set to **true** indicating that it
 * is safe to be called _without_ parameters.
 *
 * **Note:** this is similar to an "escape function" but whereas an API can
 * only have one escape function, an API may have as many ze
 */
export declare const isOptionalParamFunction: <T>(val: T) => val is T & OptionalParamFn;
/**
 * **isApi**`(val)`
 *
 * Type guard which validates that the value passed in is an `Api` type
 * with "surface" and "_kind" property.
 *
 * **Related:** `isFluentApi()`
 */
export declare const isApi: <T extends Narrowable>(api: T) => api is T & {
    __kind: "api";
    surface: Dictionary | TypedFunction;
};
/**
 * **isApiSurface**`(val)`
 *
 * A type guard which tests whether the value passed in is the SurfaceArea
 * of an API (or could be).
 */
export declare const isApiSurface: <T>(val: T) => val is T & (Dictionary | TypedFunction);
//# sourceMappingURL=api-tg.d.ts.map