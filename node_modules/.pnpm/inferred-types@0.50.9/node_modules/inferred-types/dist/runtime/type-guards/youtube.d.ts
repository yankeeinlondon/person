import { YouTubeCreatorUrl, YouTubeFeedType, YouTubeFeedUrl, YouTubePlaylistUrl, YouTubeShareUrl, YouTubeUrl, YouTubeVideosInPlaylist } from "src/types/index";
/**
 * **isYouTubeUrl**`(val)`
 *
 * Type guard which checks whether the passed in value is a valid
 * YouTube URL.
 */
export declare const isYouTubeUrl: <T>(val: T) => val is T & YouTubeUrl;
/**
 * **isYouTubeShareUrl**`(val)`
 *
 * Type guard which checks whether the passed in value is a URL
 * from YouTube's _URL shortening_ site `https://youtu.be`.
 */
export declare const isYouTubeShareUrl: <T>(val: T) => val is T & YouTubeShareUrl;
/**
 * **isYouTubeVideoUrl**`(val)`
 *
 * Type guard which checks whether the passed in value is a valid
 * YouTube URL _which plays video_.
 */
export declare const isYouTubeVideoUrl: <T>(val: T) => val is T & YouTubeUrl;
/**
 * **isYouTubePlaylistUrl**`(val)`
 *
 * Type guard which checks whether the passed in value is a valid
 * YouTube URL which points to a "playlist" on the platform.
 */
export declare const isYouTubePlaylistUrl: <T>(val: T) => val is T & YouTubePlaylistUrl;
/**
 * **isYouTubeFeedUrl**`(val,[kind])**
 *
 * Type guard which checks whether the passed in value is a valid
 * YouTube URL which responds with "feed" content. This is content
 * which is available to a logged in user and helps them see lists
 * of videos related to their settings.
 *
 * By default any "feed" URL is matched but you can narrow that down
 * to a specific feed type by specifying the `kind` variable.
 */
export declare const isYouTubeFeedUrl: <T, U extends YouTubeFeedType = YouTubeFeedType>(val: T, type?: U) => val is T & YouTubeFeedUrl<U>;
/**
 * **isYouTubeHistoryUrl**`(val,[kind])**
 *
 * Type guard which checks whether the passed in value is a valid
 * YouTube URL which responds with a user's history feed.
 */
export declare const isYouTubeFeedHistoryUrl: <T>(val: T) => boolean;
/**
 * **isYouTubePlaylistsUrl**`(val,[kind])**
 *
 * Type guard which checks whether the passed in value is a valid
 * YouTube URL which responds with a user's own playlists page.
 */
export declare const isYouTubePlaylistsUrl: <T>(val: T) => boolean;
/**
 * **isYouTubeTrendingUrl**`(val,[kind])**
 *
 * Type guard which checks whether the passed in value is a valid
 * YouTube URL which responds with a user's own history feed.
 */
export declare const isYouTubeTrendingUrl: <T>(val: T) => boolean;
/**
 * **isYouTubeSubscriptionsUrl**`(val,[kind])**
 *
 * Type guard which checks whether the passed in value is a valid
 * YouTube URL which responds with a user's own subscriptions feed.
 */
export declare const isYouTubeSubscriptionsUrl: <T>(val: T) => boolean;
export declare const isYouTubeCreatorUrl: <T extends string>(url: T) => url is T & YouTubeCreatorUrl;
export declare const isYouTubeVideosInPlaylist: <T>(val: T) => val is T & YouTubeVideosInPlaylist;
//# sourceMappingURL=youtube.d.ts.map