import { First, IsEqual, IsUndefined, Narrowable } from "src/types/index";
type Rtn<T extends readonly K[] | K[] | undefined, K extends Narrowable> = IsUndefined<T> extends true ? undefined : T extends readonly K[] | K[] ? IsEqual<T["length"], number> extends true ? undefined | string : T["length"] extends 0 ? undefined : First<T> : never;
/**
 * **shift**(list)
 *
 * Takes a list of elements and:
 *
 * - if the list is empty returns _undefined_
 * - otherwise returns the first element in the list
 *
 * **Note:** unlike using the builtin `ARR.shift()` method:
 *
 * - the source array is _never_ mutated
 * - you can shift off the first element of the readonly array as well a mutable one
 * (because the underlying array is _not_ mutated)
 * - in **many** cases, you should be using a queue of some sort with utils like
 * `createLifoQueue()` or `createFifoQueue()`
 *
 */
export declare const shift: <T extends readonly K[] | K[] | undefined, K extends Narrowable>(list: T) => Rtn<T, K>;
export {};
//# sourceMappingURL=shift.d.ts.map