import type { AnyObject, AnyFunction, IsEmptyObject, IsEqual, And, DoesExtend, If } from "src/types/index";
/**
 * **IsFnWithParams**`<TFn, [TParamMatch]>`
 *
 * Checks whether `T` is a function which also includes
 * dictionary props sitting alongside the function.
 *
 * - the optional `TParamMatch` will ensure that this generic _extends_
 * the params included in the function.
 */
export type IsFnWithParams<TFn, TParamMatch extends AnyObject | undefined = undefined> = TFn extends AnyFunction ? IsEmptyObject<TFn> extends true ? false : If<And<[
    DoesExtend<TFn, TParamMatch>,
    DoesExtend<TParamMatch, AnyObject>
]>, true, If<IsEqual<TParamMatch, undefined>, true, false>> : false;
//# sourceMappingURL=IsFnWithParams.d.ts.map