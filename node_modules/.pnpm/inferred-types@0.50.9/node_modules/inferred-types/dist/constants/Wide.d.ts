type AnyObject = Record<never, unknown> | Record<string | symbol, unknown>;
type AnyFunction<TArgs extends readonly unknown[] = unknown[], TReturn = unknown, TProps extends AnyObject = AnyObject> = TProps extends Record<never, unknown> ? (...args: TArgs) => TReturn : ((...args: TArgs) => TReturn) & TProps;
/**
 * **wide**
 *
 * Provides a dictionary of _wide_ types; in most cases you should
 * prefer the **kind** API.
 */
export declare const WideAssignment: {
    readonly boolean: () => boolean;
    readonly string: () => string;
    readonly number: () => number;
    readonly symbol: () => symbol;
    readonly null: () => null;
    readonly function: () => AnyFunction;
    readonly tuple: () => readonly unknown[];
    readonly singularTuple: () => [readonly unknown[]];
    readonly object: () => AnyObject;
    readonly emptyObject: () => Record<never, unknown>;
    readonly undefined: () => undefined;
    /**
     * run-time value is a type token for `unknown` and type is of course `unknown`
     */
    readonly unknown: () => unknown;
    readonly nothing: () => null | undefined;
    readonly something: () => {};
};
export {};
//# sourceMappingURL=Wide.d.ts.map